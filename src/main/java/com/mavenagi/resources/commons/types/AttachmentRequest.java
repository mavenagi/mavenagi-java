/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AttachmentRequest.Builder.class)
public final class AttachmentRequest implements IBaseAttachment {
    private final String type;

    private final Optional<String> name;

    private final Optional<byte[]> content;

    private final Optional<EntityIdBase> assetId;

    private final Map<String, Object> additionalProperties;

    private AttachmentRequest(
            String type,
            Optional<String> name,
            Optional<byte[]> content,
            Optional<EntityIdBase> assetId,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.name = name;
        this.content = content;
        this.assetId = assetId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The mime-type of the attachment. Supported types are:
     * <ul>
     * <li>image/jpeg</li>
     * <li>image/jpg</li>
     * <li>image/png</li>
     * <li>image/gif</li>
     * <li>image/webp</li>
     * <li>application/pdf</li>
     * <li>text/plain</li>
     * <li>text/csv</li>
     * <li>application/vnd.openxmlformats-officedocument.wordprocessingml.document</li>
     * <li>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</li>
     * <li>application/vnd.openxmlformats-officedocument.presentationml.presentation</li>
     * <li>application/msword</li>
     * <li>application/vnd.ms-excel</li>
     * <li>application/vnd.ms-powerpoint</li>
     * <li>audio/aac</li>
     * <li>audio/mpeg</li>
     * <li>audio/mp4</li>
     * <li>audio/wav</li>
     * <li>audio/ogg</li>
     * <li>video/mp4</li>
     * <li>video/webm</li>
     * </ul>
     */
    @JsonProperty("type")
    @java.lang.Override
    public String getType() {
        return type;
    }

    /**
     * @return An optional name for the attachment.
     */
    @JsonProperty("name")
    @java.lang.Override
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return Inline attachment data, up to 5MB.
     */
    @JsonProperty("content")
    public Optional<byte[]> getContent() {
        return content;
    }

    /**
     * @return The ID of an asynchronously uploaded asset.
     */
    @JsonProperty("assetId")
    public Optional<EntityIdBase> getAssetId() {
        return assetId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AttachmentRequest && equalTo((AttachmentRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AttachmentRequest other) {
        return type.equals(other.type)
                && name.equals(other.name)
                && content.equals(other.content)
                && assetId.equals(other.assetId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.name, this.content, this.assetId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        /**
         * <p>The mime-type of the attachment. Supported types are:</p>
         * <ul>
         * <li>image/jpeg</li>
         * <li>image/jpg</li>
         * <li>image/png</li>
         * <li>image/gif</li>
         * <li>image/webp</li>
         * <li>application/pdf</li>
         * <li>text/plain</li>
         * <li>text/csv</li>
         * <li>application/vnd.openxmlformats-officedocument.wordprocessingml.document</li>
         * <li>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</li>
         * <li>application/vnd.openxmlformats-officedocument.presentationml.presentation</li>
         * <li>application/msword</li>
         * <li>application/vnd.ms-excel</li>
         * <li>application/vnd.ms-powerpoint</li>
         * <li>audio/aac</li>
         * <li>audio/mpeg</li>
         * <li>audio/mp4</li>
         * <li>audio/wav</li>
         * <li>audio/ogg</li>
         * <li>video/mp4</li>
         * <li>video/webm</li>
         * </ul>
         */
        _FinalStage type(@NotNull String type);

        Builder from(AttachmentRequest other);
    }

    public interface _FinalStage {
        AttachmentRequest build();

        /**
         * <p>An optional name for the attachment.</p>
         */
        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        /**
         * <p>Inline attachment data, up to 5MB.</p>
         */
        _FinalStage content(Optional<byte[]> content);

        _FinalStage content(byte[] content);

        /**
         * <p>The ID of an asynchronously uploaded asset.</p>
         */
        _FinalStage assetId(Optional<EntityIdBase> assetId);

        _FinalStage assetId(EntityIdBase assetId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, _FinalStage {
        private String type;

        private Optional<EntityIdBase> assetId = Optional.empty();

        private Optional<byte[]> content = Optional.empty();

        private Optional<String> name = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AttachmentRequest other) {
            type(other.getType());
            name(other.getName());
            content(other.getContent());
            assetId(other.getAssetId());
            return this;
        }

        /**
         * <p>The mime-type of the attachment. Supported types are:</p>
         * <ul>
         * <li>image/jpeg</li>
         * <li>image/jpg</li>
         * <li>image/png</li>
         * <li>image/gif</li>
         * <li>image/webp</li>
         * <li>application/pdf</li>
         * <li>text/plain</li>
         * <li>text/csv</li>
         * <li>application/vnd.openxmlformats-officedocument.wordprocessingml.document</li>
         * <li>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</li>
         * <li>application/vnd.openxmlformats-officedocument.presentationml.presentation</li>
         * <li>application/msword</li>
         * <li>application/vnd.ms-excel</li>
         * <li>application/vnd.ms-powerpoint</li>
         * <li>audio/aac</li>
         * <li>audio/mpeg</li>
         * <li>audio/mp4</li>
         * <li>audio/wav</li>
         * <li>audio/ogg</li>
         * <li>video/mp4</li>
         * <li>video/webm</li>
         * </ul>
         * <p>The mime-type of the attachment. Supported types are:</p>
         * <ul>
         * <li>image/jpeg</li>
         * <li>image/jpg</li>
         * <li>image/png</li>
         * <li>image/gif</li>
         * <li>image/webp</li>
         * <li>application/pdf</li>
         * <li>text/plain</li>
         * <li>text/csv</li>
         * <li>application/vnd.openxmlformats-officedocument.wordprocessingml.document</li>
         * <li>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</li>
         * <li>application/vnd.openxmlformats-officedocument.presentationml.presentation</li>
         * <li>application/msword</li>
         * <li>application/vnd.ms-excel</li>
         * <li>application/vnd.ms-powerpoint</li>
         * <li>audio/aac</li>
         * <li>audio/mpeg</li>
         * <li>audio/mp4</li>
         * <li>audio/wav</li>
         * <li>audio/ogg</li>
         * <li>video/mp4</li>
         * <li>video/webm</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(@NotNull String type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>The ID of an asynchronously uploaded asset.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assetId(EntityIdBase assetId) {
            this.assetId = Optional.ofNullable(assetId);
            return this;
        }

        /**
         * <p>The ID of an asynchronously uploaded asset.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "assetId", nulls = Nulls.SKIP)
        public _FinalStage assetId(Optional<EntityIdBase> assetId) {
            this.assetId = assetId;
            return this;
        }

        /**
         * <p>Inline attachment data, up to 5MB.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage content(byte[] content) {
            this.content = Optional.ofNullable(content);
            return this;
        }

        /**
         * <p>Inline attachment data, up to 5MB.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "content", nulls = Nulls.SKIP)
        public _FinalStage content(Optional<byte[]> content) {
            this.content = content;
            return this;
        }

        /**
         * <p>An optional name for the attachment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>An optional name for the attachment.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        public AttachmentRequest build() {
            return new AttachmentRequest(type, name, content, assetId, additionalProperties);
        }
    }
}
