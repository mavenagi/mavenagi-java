/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.events.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FeedbackInfo.Builder.class)
public final class FeedbackInfo {
    private final Optional<Double> rating;

    private final Optional<Boolean> thumbUp;

    private final Optional<SurveyInfo> survey;

    private final Map<String, Object> additionalProperties;

    private FeedbackInfo(
            Optional<Double> rating,
            Optional<Boolean> thumbUp,
            Optional<SurveyInfo> survey,
            Map<String, Object> additionalProperties) {
        this.rating = rating;
        this.thumbUp = thumbUp;
        this.survey = survey;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The rating of the feedback as a ratio [0.0, 1.0]
     */
    @JsonProperty("rating")
    public Optional<Double> getRating() {
        return rating;
    }

    /**
     * @return Whether the feedback was marked as a thumbs up
     */
    @JsonProperty("thumbUp")
    public Optional<Boolean> getThumbUp() {
        return thumbUp;
    }

    /**
     * @return A question and answer associated with the feedback
     */
    @JsonProperty("survey")
    public Optional<SurveyInfo> getSurvey() {
        return survey;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FeedbackInfo && equalTo((FeedbackInfo) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FeedbackInfo other) {
        return rating.equals(other.rating) && thumbUp.equals(other.thumbUp) && survey.equals(other.survey);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.rating, this.thumbUp, this.survey);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> rating = Optional.empty();

        private Optional<Boolean> thumbUp = Optional.empty();

        private Optional<SurveyInfo> survey = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FeedbackInfo other) {
            rating(other.getRating());
            thumbUp(other.getThumbUp());
            survey(other.getSurvey());
            return this;
        }

        @JsonSetter(value = "rating", nulls = Nulls.SKIP)
        public Builder rating(Optional<Double> rating) {
            this.rating = rating;
            return this;
        }

        public Builder rating(Double rating) {
            this.rating = Optional.ofNullable(rating);
            return this;
        }

        @JsonSetter(value = "thumbUp", nulls = Nulls.SKIP)
        public Builder thumbUp(Optional<Boolean> thumbUp) {
            this.thumbUp = thumbUp;
            return this;
        }

        public Builder thumbUp(Boolean thumbUp) {
            this.thumbUp = Optional.ofNullable(thumbUp);
            return this;
        }

        @JsonSetter(value = "survey", nulls = Nulls.SKIP)
        public Builder survey(Optional<SurveyInfo> survey) {
            this.survey = survey;
            return this;
        }

        public Builder survey(SurveyInfo survey) {
            this.survey = Optional.ofNullable(survey);
            return this;
        }

        public FeedbackInfo build() {
            return new FeedbackInfo(rating, thumbUp, survey, additionalProperties);
        }
    }
}
