/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.analytics.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import com.mavenagi.api.resources.conversation.types.ConversationFilter;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ConversationAnalyticsRequest.Builder.class)
public final class ConversationAnalyticsRequest implements IConversationAnalyticsRequest {
    private final Optional<ConversationFilter> conversationFilter;

    private final Map<String, Object> additionalProperties;

    private ConversationAnalyticsRequest(
            Optional<ConversationFilter> conversationFilter, Map<String, Object> additionalProperties) {
        this.conversationFilter = conversationFilter;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Optional filter applied to refine the conversation data before processing.
     */
    @JsonProperty("conversationFilter")
    @java.lang.Override
    public Optional<ConversationFilter> getConversationFilter() {
        return conversationFilter;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ConversationAnalyticsRequest && equalTo((ConversationAnalyticsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ConversationAnalyticsRequest other) {
        return conversationFilter.equals(other.conversationFilter);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.conversationFilter);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ConversationFilter> conversationFilter = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ConversationAnalyticsRequest other) {
            conversationFilter(other.getConversationFilter());
            return this;
        }

        @JsonSetter(value = "conversationFilter", nulls = Nulls.SKIP)
        public Builder conversationFilter(Optional<ConversationFilter> conversationFilter) {
            this.conversationFilter = conversationFilter;
            return this;
        }

        public Builder conversationFilter(ConversationFilter conversationFilter) {
            this.conversationFilter = Optional.ofNullable(conversationFilter);
            return this;
        }

        public ConversationAnalyticsRequest build() {
            return new ConversationAnalyticsRequest(conversationFilter, additionalProperties);
        }
    }
}
