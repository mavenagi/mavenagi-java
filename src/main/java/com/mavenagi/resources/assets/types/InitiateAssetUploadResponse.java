/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.assets.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.resources.commons.types.EntityIdBase;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InitiateAssetUploadResponse.Builder.class)
public final class InitiateAssetUploadResponse {
    private final EntityIdBase assetId;

    private final String uploadUrl;

    private final OffsetDateTime expiresAt;

    private final Map<String, Object> additionalProperties;

    private InitiateAssetUploadResponse(
            EntityIdBase assetId,
            String uploadUrl,
            OffsetDateTime expiresAt,
            Map<String, Object> additionalProperties) {
        this.assetId = assetId;
        this.uploadUrl = uploadUrl;
        this.expiresAt = expiresAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the asset. Use this ID to commit the asset after upload.
     */
    @JsonProperty("assetId")
    public EntityIdBase getAssetId() {
        return assetId;
    }

    /**
     * @return Pre-signed URL for file upload. Use this URL to upload the file directly to storage.
     */
    @JsonProperty("uploadUrl")
    public String getUploadUrl() {
        return uploadUrl;
    }

    /**
     * @return The expiration time for the upload URL
     */
    @JsonProperty("expiresAt")
    public OffsetDateTime getExpiresAt() {
        return expiresAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InitiateAssetUploadResponse && equalTo((InitiateAssetUploadResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InitiateAssetUploadResponse other) {
        return assetId.equals(other.assetId) && uploadUrl.equals(other.uploadUrl) && expiresAt.equals(other.expiresAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.assetId, this.uploadUrl, this.expiresAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AssetIdStage builder() {
        return new Builder();
    }

    public interface AssetIdStage {
        /**
         * <p>The ID of the asset. Use this ID to commit the asset after upload.</p>
         */
        UploadUrlStage assetId(@NotNull EntityIdBase assetId);

        Builder from(InitiateAssetUploadResponse other);
    }

    public interface UploadUrlStage {
        /**
         * <p>Pre-signed URL for file upload. Use this URL to upload the file directly to storage.</p>
         */
        ExpiresAtStage uploadUrl(@NotNull String uploadUrl);
    }

    public interface ExpiresAtStage {
        /**
         * <p>The expiration time for the upload URL</p>
         */
        _FinalStage expiresAt(@NotNull OffsetDateTime expiresAt);
    }

    public interface _FinalStage {
        InitiateAssetUploadResponse build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AssetIdStage, UploadUrlStage, ExpiresAtStage, _FinalStage {
        private EntityIdBase assetId;

        private String uploadUrl;

        private OffsetDateTime expiresAt;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(InitiateAssetUploadResponse other) {
            assetId(other.getAssetId());
            uploadUrl(other.getUploadUrl());
            expiresAt(other.getExpiresAt());
            return this;
        }

        /**
         * <p>The ID of the asset. Use this ID to commit the asset after upload.</p>
         * <p>The ID of the asset. Use this ID to commit the asset after upload.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("assetId")
        public UploadUrlStage assetId(@NotNull EntityIdBase assetId) {
            this.assetId = Objects.requireNonNull(assetId, "assetId must not be null");
            return this;
        }

        /**
         * <p>Pre-signed URL for file upload. Use this URL to upload the file directly to storage.</p>
         * <p>Pre-signed URL for file upload. Use this URL to upload the file directly to storage.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("uploadUrl")
        public ExpiresAtStage uploadUrl(@NotNull String uploadUrl) {
            this.uploadUrl = Objects.requireNonNull(uploadUrl, "uploadUrl must not be null");
            return this;
        }

        /**
         * <p>The expiration time for the upload URL</p>
         * <p>The expiration time for the upload URL</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("expiresAt")
        public _FinalStage expiresAt(@NotNull OffsetDateTime expiresAt) {
            this.expiresAt = Objects.requireNonNull(expiresAt, "expiresAt must not be null");
            return this;
        }

        @java.lang.Override
        public InitiateAssetUploadResponse build() {
            return new InitiateAssetUploadResponse(assetId, uploadUrl, expiresAt, additionalProperties);
        }
    }
}
