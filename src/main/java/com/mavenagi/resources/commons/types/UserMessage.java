/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UserMessage.Builder.class)
public final class UserMessage implements IUserMessageBase, IConversationMessageBase {
    private final EntityIdBase userId;

    private final String text;

    private final UserConversationMessageType userMessageType;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<OffsetDateTime> updatedAt;

    private final EntityId conversationMessageId;

    private final Optional<String> language;

    private final List<AttachmentResponse> attachments;

    private final Optional<String> agentUserId;

    private final Optional<String> userDisplayName;

    private final MessageStatus status;

    private final Optional<UserMessageResponseState> responseState;

    private final Map<String, Object> additionalProperties;

    private UserMessage(
            EntityIdBase userId,
            String text,
            UserConversationMessageType userMessageType,
            Optional<OffsetDateTime> createdAt,
            Optional<OffsetDateTime> updatedAt,
            EntityId conversationMessageId,
            Optional<String> language,
            List<AttachmentResponse> attachments,
            Optional<String> agentUserId,
            Optional<String> userDisplayName,
            MessageStatus status,
            Optional<UserMessageResponseState> responseState,
            Map<String, Object> additionalProperties) {
        this.userId = userId;
        this.text = text;
        this.userMessageType = userMessageType;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.conversationMessageId = conversationMessageId;
        this.language = language;
        this.attachments = attachments;
        this.agentUserId = agentUserId;
        this.userDisplayName = userDisplayName;
        this.status = status;
        this.responseState = responseState;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return ID that uniquely identifies the user that created this message
     */
    @JsonProperty("userId")
    @java.lang.Override
    public EntityIdBase getUserId() {
        return userId;
    }

    /**
     * @return The text of the message. Cannot be empty
     */
    @JsonProperty("text")
    @java.lang.Override
    public String getText() {
        return text;
    }

    @JsonProperty("userMessageType")
    @java.lang.Override
    public UserConversationMessageType getUserMessageType() {
        return userMessageType;
    }

    /**
     * @return The date and time the conversation was created
     */
    @JsonProperty("createdAt")
    @java.lang.Override
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The date and time the conversation was last updated
     */
    @JsonProperty("updatedAt")
    @java.lang.Override
    public Optional<OffsetDateTime> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The ID that uniquely identifies this message within the conversation
     */
    @JsonProperty("conversationMessageId")
    public EntityId getConversationMessageId() {
        return conversationMessageId;
    }

    /**
     * @return The language of the message in ISO 639-1 code format
     */
    @JsonProperty("language")
    public Optional<String> getLanguage() {
        return language;
    }

    /**
     * @return The attachments associated with the message
     */
    @JsonProperty("attachments")
    public List<AttachmentResponse> getAttachments() {
        return attachments;
    }

    /**
     * @return The ID of the agent user that created this message. More detail can be fetched via the agent user APIs. Will be empty only for legacy conversations.
     */
    @JsonProperty("agentUserId")
    public Optional<String> getAgentUserId() {
        return agentUserId;
    }

    /**
     * @return The display name of the user who created this message. Only available for users who have saved name information.
     */
    @JsonProperty("userDisplayName")
    public Optional<String> getUserDisplayName() {
        return userDisplayName;
    }

    /**
     * @return The delivery status of the message. Only applicable to messages sent via the deliverMessage API.
     * All other messages have an <code>UNKNOWN</code> status.
     * <ul>
     * <li><code>SENT</code>: The message has been sent to the user.</li>
     * <li><code>FAILED</code>: The message sending encountered an error.</li>
     * <li><code>UNKNOWN</code>: The message status is unknown.</li>
     * </ul>
     */
    @JsonProperty("status")
    public MessageStatus getStatus() {
        return status;
    }

    /**
     * @return Only present on newer messaged where <code>userMessageType</code> is <code>USER</code>.
     * Indicates the state of the answer to the user message.
     * <ul>
     * <li><code>NOT_ASKED</code>: An answer was not requested for this user message.</li>
     * <li><code>LLM_ENABLED</code>: An answer was requested for this user message and the LLM was enabled.</li>
     * <li><code>LLM_DISABLED</code>: An answer was requested for this user message and the LLM was disabled.</li>
     * </ul>
     */
    @JsonProperty("responseState")
    public Optional<UserMessageResponseState> getResponseState() {
        return responseState;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UserMessage && equalTo((UserMessage) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UserMessage other) {
        return userId.equals(other.userId)
                && text.equals(other.text)
                && userMessageType.equals(other.userMessageType)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && conversationMessageId.equals(other.conversationMessageId)
                && language.equals(other.language)
                && attachments.equals(other.attachments)
                && agentUserId.equals(other.agentUserId)
                && userDisplayName.equals(other.userDisplayName)
                && status.equals(other.status)
                && responseState.equals(other.responseState);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.userId,
                this.text,
                this.userMessageType,
                this.createdAt,
                this.updatedAt,
                this.conversationMessageId,
                this.language,
                this.attachments,
                this.agentUserId,
                this.userDisplayName,
                this.status,
                this.responseState);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UserIdStage builder() {
        return new Builder();
    }

    public interface UserIdStage {
        /**
         * <p>ID that uniquely identifies the user that created this message</p>
         */
        TextStage userId(@NotNull EntityIdBase userId);

        Builder from(UserMessage other);
    }

    public interface TextStage {
        /**
         * <p>The text of the message. Cannot be empty</p>
         */
        UserMessageTypeStage text(@NotNull String text);
    }

    public interface UserMessageTypeStage {
        ConversationMessageIdStage userMessageType(@NotNull UserConversationMessageType userMessageType);
    }

    public interface ConversationMessageIdStage {
        /**
         * <p>The ID that uniquely identifies this message within the conversation</p>
         */
        StatusStage conversationMessageId(@NotNull EntityId conversationMessageId);
    }

    public interface StatusStage {
        /**
         * <p>The delivery status of the message. Only applicable to messages sent via the deliverMessage API.
         * All other messages have an <code>UNKNOWN</code> status.</p>
         * <ul>
         * <li><code>SENT</code>: The message has been sent to the user.</li>
         * <li><code>FAILED</code>: The message sending encountered an error.</li>
         * <li><code>UNKNOWN</code>: The message status is unknown.</li>
         * </ul>
         */
        _FinalStage status(@NotNull MessageStatus status);
    }

    public interface _FinalStage {
        UserMessage build();

        /**
         * <p>The date and time the conversation was created</p>
         */
        _FinalStage createdAt(Optional<OffsetDateTime> createdAt);

        _FinalStage createdAt(OffsetDateTime createdAt);

        /**
         * <p>The date and time the conversation was last updated</p>
         */
        _FinalStage updatedAt(Optional<OffsetDateTime> updatedAt);

        _FinalStage updatedAt(OffsetDateTime updatedAt);

        /**
         * <p>The language of the message in ISO 639-1 code format</p>
         */
        _FinalStage language(Optional<String> language);

        _FinalStage language(String language);

        /**
         * <p>The attachments associated with the message</p>
         */
        _FinalStage attachments(List<AttachmentResponse> attachments);

        _FinalStage addAttachments(AttachmentResponse attachments);

        _FinalStage addAllAttachments(List<AttachmentResponse> attachments);

        /**
         * <p>The ID of the agent user that created this message. More detail can be fetched via the agent user APIs. Will be empty only for legacy conversations.</p>
         */
        _FinalStage agentUserId(Optional<String> agentUserId);

        _FinalStage agentUserId(String agentUserId);

        /**
         * <p>The display name of the user who created this message. Only available for users who have saved name information.</p>
         */
        _FinalStage userDisplayName(Optional<String> userDisplayName);

        _FinalStage userDisplayName(String userDisplayName);

        /**
         * <p>Only present on newer messaged where <code>userMessageType</code> is <code>USER</code>.
         * Indicates the state of the answer to the user message.</p>
         * <ul>
         * <li><code>NOT_ASKED</code>: An answer was not requested for this user message.</li>
         * <li><code>LLM_ENABLED</code>: An answer was requested for this user message and the LLM was enabled.</li>
         * <li><code>LLM_DISABLED</code>: An answer was requested for this user message and the LLM was disabled.</li>
         * </ul>
         */
        _FinalStage responseState(Optional<UserMessageResponseState> responseState);

        _FinalStage responseState(UserMessageResponseState responseState);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements UserIdStage,
                    TextStage,
                    UserMessageTypeStage,
                    ConversationMessageIdStage,
                    StatusStage,
                    _FinalStage {
        private EntityIdBase userId;

        private String text;

        private UserConversationMessageType userMessageType;

        private EntityId conversationMessageId;

        private MessageStatus status;

        private Optional<UserMessageResponseState> responseState = Optional.empty();

        private Optional<String> userDisplayName = Optional.empty();

        private Optional<String> agentUserId = Optional.empty();

        private List<AttachmentResponse> attachments = new ArrayList<>();

        private Optional<String> language = Optional.empty();

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UserMessage other) {
            userId(other.getUserId());
            text(other.getText());
            userMessageType(other.getUserMessageType());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            conversationMessageId(other.getConversationMessageId());
            language(other.getLanguage());
            attachments(other.getAttachments());
            agentUserId(other.getAgentUserId());
            userDisplayName(other.getUserDisplayName());
            status(other.getStatus());
            responseState(other.getResponseState());
            return this;
        }

        /**
         * <p>ID that uniquely identifies the user that created this message</p>
         * <p>ID that uniquely identifies the user that created this message</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("userId")
        public TextStage userId(@NotNull EntityIdBase userId) {
            this.userId = Objects.requireNonNull(userId, "userId must not be null");
            return this;
        }

        /**
         * <p>The text of the message. Cannot be empty</p>
         * <p>The text of the message. Cannot be empty</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("text")
        public UserMessageTypeStage text(@NotNull String text) {
            this.text = Objects.requireNonNull(text, "text must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("userMessageType")
        public ConversationMessageIdStage userMessageType(@NotNull UserConversationMessageType userMessageType) {
            this.userMessageType = Objects.requireNonNull(userMessageType, "userMessageType must not be null");
            return this;
        }

        /**
         * <p>The ID that uniquely identifies this message within the conversation</p>
         * <p>The ID that uniquely identifies this message within the conversation</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("conversationMessageId")
        public StatusStage conversationMessageId(@NotNull EntityId conversationMessageId) {
            this.conversationMessageId =
                    Objects.requireNonNull(conversationMessageId, "conversationMessageId must not be null");
            return this;
        }

        /**
         * <p>The delivery status of the message. Only applicable to messages sent via the deliverMessage API.
         * All other messages have an <code>UNKNOWN</code> status.</p>
         * <ul>
         * <li><code>SENT</code>: The message has been sent to the user.</li>
         * <li><code>FAILED</code>: The message sending encountered an error.</li>
         * <li><code>UNKNOWN</code>: The message status is unknown.</li>
         * </ul>
         * <p>The delivery status of the message. Only applicable to messages sent via the deliverMessage API.
         * All other messages have an <code>UNKNOWN</code> status.</p>
         * <ul>
         * <li><code>SENT</code>: The message has been sent to the user.</li>
         * <li><code>FAILED</code>: The message sending encountered an error.</li>
         * <li><code>UNKNOWN</code>: The message status is unknown.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public _FinalStage status(@NotNull MessageStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>Only present on newer messaged where <code>userMessageType</code> is <code>USER</code>.
         * Indicates the state of the answer to the user message.</p>
         * <ul>
         * <li><code>NOT_ASKED</code>: An answer was not requested for this user message.</li>
         * <li><code>LLM_ENABLED</code>: An answer was requested for this user message and the LLM was enabled.</li>
         * <li><code>LLM_DISABLED</code>: An answer was requested for this user message and the LLM was disabled.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage responseState(UserMessageResponseState responseState) {
            this.responseState = Optional.ofNullable(responseState);
            return this;
        }

        /**
         * <p>Only present on newer messaged where <code>userMessageType</code> is <code>USER</code>.
         * Indicates the state of the answer to the user message.</p>
         * <ul>
         * <li><code>NOT_ASKED</code>: An answer was not requested for this user message.</li>
         * <li><code>LLM_ENABLED</code>: An answer was requested for this user message and the LLM was enabled.</li>
         * <li><code>LLM_DISABLED</code>: An answer was requested for this user message and the LLM was disabled.</li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "responseState", nulls = Nulls.SKIP)
        public _FinalStage responseState(Optional<UserMessageResponseState> responseState) {
            this.responseState = responseState;
            return this;
        }

        /**
         * <p>The display name of the user who created this message. Only available for users who have saved name information.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage userDisplayName(String userDisplayName) {
            this.userDisplayName = Optional.ofNullable(userDisplayName);
            return this;
        }

        /**
         * <p>The display name of the user who created this message. Only available for users who have saved name information.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "userDisplayName", nulls = Nulls.SKIP)
        public _FinalStage userDisplayName(Optional<String> userDisplayName) {
            this.userDisplayName = userDisplayName;
            return this;
        }

        /**
         * <p>The ID of the agent user that created this message. More detail can be fetched via the agent user APIs. Will be empty only for legacy conversations.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage agentUserId(String agentUserId) {
            this.agentUserId = Optional.ofNullable(agentUserId);
            return this;
        }

        /**
         * <p>The ID of the agent user that created this message. More detail can be fetched via the agent user APIs. Will be empty only for legacy conversations.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "agentUserId", nulls = Nulls.SKIP)
        public _FinalStage agentUserId(Optional<String> agentUserId) {
            this.agentUserId = agentUserId;
            return this;
        }

        /**
         * <p>The attachments associated with the message</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllAttachments(List<AttachmentResponse> attachments) {
            this.attachments.addAll(attachments);
            return this;
        }

        /**
         * <p>The attachments associated with the message</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAttachments(AttachmentResponse attachments) {
            this.attachments.add(attachments);
            return this;
        }

        /**
         * <p>The attachments associated with the message</p>
         */
        @java.lang.Override
        @JsonSetter(value = "attachments", nulls = Nulls.SKIP)
        public _FinalStage attachments(List<AttachmentResponse> attachments) {
            this.attachments.clear();
            this.attachments.addAll(attachments);
            return this;
        }

        /**
         * <p>The language of the message in ISO 639-1 code format</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage language(String language) {
            this.language = Optional.ofNullable(language);
            return this;
        }

        /**
         * <p>The language of the message in ISO 639-1 code format</p>
         */
        @java.lang.Override
        @JsonSetter(value = "language", nulls = Nulls.SKIP)
        public _FinalStage language(Optional<String> language) {
            this.language = language;
            return this;
        }

        /**
         * <p>The date and time the conversation was last updated</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * <p>The date and time the conversation was last updated</p>
         */
        @java.lang.Override
        @JsonSetter(value = "updatedAt", nulls = Nulls.SKIP)
        public _FinalStage updatedAt(Optional<OffsetDateTime> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * <p>The date and time the conversation was created</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>The date and time the conversation was created</p>
         */
        @java.lang.Override
        @JsonSetter(value = "createdAt", nulls = Nulls.SKIP)
        public _FinalStage createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        @java.lang.Override
        public UserMessage build() {
            return new UserMessage(
                    userId,
                    text,
                    userMessageType,
                    createdAt,
                    updatedAt,
                    conversationMessageId,
                    language,
                    attachments,
                    agentUserId,
                    userDisplayName,
                    status,
                    responseState,
                    additionalProperties);
        }
    }
}
