/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.events.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SourceInfo.Builder.class)
public final class SourceInfo {
    private final SourceType type;

    private final Optional<DeviceInfo> deviceInfo;

    private final Optional<BrowserInfo> browserInfo;

    private final Optional<GeoInfo> geoInfo;

    private final Optional<IpInfo> ipInfo;

    private final Optional<LanguageInfo> languageInfo;

    private final Map<String, Object> additionalProperties;

    private SourceInfo(
            SourceType type,
            Optional<DeviceInfo> deviceInfo,
            Optional<BrowserInfo> browserInfo,
            Optional<GeoInfo> geoInfo,
            Optional<IpInfo> ipInfo,
            Optional<LanguageInfo> languageInfo,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.deviceInfo = deviceInfo;
        this.browserInfo = browserInfo;
        this.geoInfo = geoInfo;
        this.ipInfo = ipInfo;
        this.languageInfo = languageInfo;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("type")
    public SourceType getType() {
        return type;
    }

    @JsonProperty("deviceInfo")
    public Optional<DeviceInfo> getDeviceInfo() {
        return deviceInfo;
    }

    @JsonProperty("browserInfo")
    public Optional<BrowserInfo> getBrowserInfo() {
        return browserInfo;
    }

    @JsonProperty("geoInfo")
    public Optional<GeoInfo> getGeoInfo() {
        return geoInfo;
    }

    @JsonProperty("ipInfo")
    public Optional<IpInfo> getIpInfo() {
        return ipInfo;
    }

    @JsonProperty("languageInfo")
    public Optional<LanguageInfo> getLanguageInfo() {
        return languageInfo;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SourceInfo && equalTo((SourceInfo) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SourceInfo other) {
        return type.equals(other.type)
                && deviceInfo.equals(other.deviceInfo)
                && browserInfo.equals(other.browserInfo)
                && geoInfo.equals(other.geoInfo)
                && ipInfo.equals(other.ipInfo)
                && languageInfo.equals(other.languageInfo);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.deviceInfo, this.browserInfo, this.geoInfo, this.ipInfo, this.languageInfo);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        _FinalStage type(@NotNull SourceType type);

        Builder from(SourceInfo other);
    }

    public interface _FinalStage {
        SourceInfo build();

        _FinalStage deviceInfo(Optional<DeviceInfo> deviceInfo);

        _FinalStage deviceInfo(DeviceInfo deviceInfo);

        _FinalStage browserInfo(Optional<BrowserInfo> browserInfo);

        _FinalStage browserInfo(BrowserInfo browserInfo);

        _FinalStage geoInfo(Optional<GeoInfo> geoInfo);

        _FinalStage geoInfo(GeoInfo geoInfo);

        _FinalStage ipInfo(Optional<IpInfo> ipInfo);

        _FinalStage ipInfo(IpInfo ipInfo);

        _FinalStage languageInfo(Optional<LanguageInfo> languageInfo);

        _FinalStage languageInfo(LanguageInfo languageInfo);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, _FinalStage {
        private SourceType type;

        private Optional<LanguageInfo> languageInfo = Optional.empty();

        private Optional<IpInfo> ipInfo = Optional.empty();

        private Optional<GeoInfo> geoInfo = Optional.empty();

        private Optional<BrowserInfo> browserInfo = Optional.empty();

        private Optional<DeviceInfo> deviceInfo = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SourceInfo other) {
            type(other.getType());
            deviceInfo(other.getDeviceInfo());
            browserInfo(other.getBrowserInfo());
            geoInfo(other.getGeoInfo());
            ipInfo(other.getIpInfo());
            languageInfo(other.getLanguageInfo());
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(@NotNull SourceType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage languageInfo(LanguageInfo languageInfo) {
            this.languageInfo = Optional.ofNullable(languageInfo);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "languageInfo", nulls = Nulls.SKIP)
        public _FinalStage languageInfo(Optional<LanguageInfo> languageInfo) {
            this.languageInfo = languageInfo;
            return this;
        }

        @java.lang.Override
        public _FinalStage ipInfo(IpInfo ipInfo) {
            this.ipInfo = Optional.ofNullable(ipInfo);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ipInfo", nulls = Nulls.SKIP)
        public _FinalStage ipInfo(Optional<IpInfo> ipInfo) {
            this.ipInfo = ipInfo;
            return this;
        }

        @java.lang.Override
        public _FinalStage geoInfo(GeoInfo geoInfo) {
            this.geoInfo = Optional.ofNullable(geoInfo);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "geoInfo", nulls = Nulls.SKIP)
        public _FinalStage geoInfo(Optional<GeoInfo> geoInfo) {
            this.geoInfo = geoInfo;
            return this;
        }

        @java.lang.Override
        public _FinalStage browserInfo(BrowserInfo browserInfo) {
            this.browserInfo = Optional.ofNullable(browserInfo);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "browserInfo", nulls = Nulls.SKIP)
        public _FinalStage browserInfo(Optional<BrowserInfo> browserInfo) {
            this.browserInfo = browserInfo;
            return this;
        }

        @java.lang.Override
        public _FinalStage deviceInfo(DeviceInfo deviceInfo) {
            this.deviceInfo = Optional.ofNullable(deviceInfo);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "deviceInfo", nulls = Nulls.SKIP)
        public _FinalStage deviceInfo(Optional<DeviceInfo> deviceInfo) {
            this.deviceInfo = deviceInfo;
            return this;
        }

        @java.lang.Override
        public SourceInfo build() {
            return new SourceInfo(type, deviceInfo, browserInfo, geoInfo, ipInfo, languageInfo, additionalProperties);
        }
    }
}
