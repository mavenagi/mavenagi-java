/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DocumentInformation.Builder.class)
public final class DocumentInformation {
    private final EntityIdWithoutAgent knowledgeBaseId;

    private final EntityIdWithoutAgent documentId;

    private final Optional<String> title;

    private final Optional<String> snippet;

    private final Map<String, Object> additionalProperties;

    private DocumentInformation(
            EntityIdWithoutAgent knowledgeBaseId,
            EntityIdWithoutAgent documentId,
            Optional<String> title,
            Optional<String> snippet,
            Map<String, Object> additionalProperties) {
        this.knowledgeBaseId = knowledgeBaseId;
        this.documentId = documentId;
        this.title = title;
        this.snippet = snippet;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique identifier for the knowledge base.
     */
    @JsonProperty("knowledgeBaseId")
    public EntityIdWithoutAgent getKnowledgeBaseId() {
        return knowledgeBaseId;
    }

    /**
     * @return Unique identifier for the document.
     */
    @JsonProperty("documentId")
    public EntityIdWithoutAgent getDocumentId() {
        return documentId;
    }

    /**
     * @return Title of the document.
     */
    @JsonProperty("title")
    public Optional<String> getTitle() {
        return title;
    }

    /**
     * @return Snippet or summary of the document.
     */
    @JsonProperty("snippet")
    public Optional<String> getSnippet() {
        return snippet;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DocumentInformation && equalTo((DocumentInformation) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DocumentInformation other) {
        return knowledgeBaseId.equals(other.knowledgeBaseId)
                && documentId.equals(other.documentId)
                && title.equals(other.title)
                && snippet.equals(other.snippet);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.knowledgeBaseId, this.documentId, this.title, this.snippet);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static KnowledgeBaseIdStage builder() {
        return new Builder();
    }

    public interface KnowledgeBaseIdStage {
        /**
         * <p>Unique identifier for the knowledge base.</p>
         */
        DocumentIdStage knowledgeBaseId(@NotNull EntityIdWithoutAgent knowledgeBaseId);

        Builder from(DocumentInformation other);
    }

    public interface DocumentIdStage {
        /**
         * <p>Unique identifier for the document.</p>
         */
        _FinalStage documentId(@NotNull EntityIdWithoutAgent documentId);
    }

    public interface _FinalStage {
        DocumentInformation build();

        /**
         * <p>Title of the document.</p>
         */
        _FinalStage title(Optional<String> title);

        _FinalStage title(String title);

        /**
         * <p>Snippet or summary of the document.</p>
         */
        _FinalStage snippet(Optional<String> snippet);

        _FinalStage snippet(String snippet);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements KnowledgeBaseIdStage, DocumentIdStage, _FinalStage {
        private EntityIdWithoutAgent knowledgeBaseId;

        private EntityIdWithoutAgent documentId;

        private Optional<String> snippet = Optional.empty();

        private Optional<String> title = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DocumentInformation other) {
            knowledgeBaseId(other.getKnowledgeBaseId());
            documentId(other.getDocumentId());
            title(other.getTitle());
            snippet(other.getSnippet());
            return this;
        }

        /**
         * <p>Unique identifier for the knowledge base.</p>
         * <p>Unique identifier for the knowledge base.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("knowledgeBaseId")
        public DocumentIdStage knowledgeBaseId(@NotNull EntityIdWithoutAgent knowledgeBaseId) {
            this.knowledgeBaseId = Objects.requireNonNull(knowledgeBaseId, "knowledgeBaseId must not be null");
            return this;
        }

        /**
         * <p>Unique identifier for the document.</p>
         * <p>Unique identifier for the document.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("documentId")
        public _FinalStage documentId(@NotNull EntityIdWithoutAgent documentId) {
            this.documentId = Objects.requireNonNull(documentId, "documentId must not be null");
            return this;
        }

        /**
         * <p>Snippet or summary of the document.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage snippet(String snippet) {
            this.snippet = Optional.ofNullable(snippet);
            return this;
        }

        /**
         * <p>Snippet or summary of the document.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "snippet", nulls = Nulls.SKIP)
        public _FinalStage snippet(Optional<String> snippet) {
            this.snippet = snippet;
            return this;
        }

        /**
         * <p>Title of the document.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage title(String title) {
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * <p>Title of the document.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "title", nulls = Nulls.SKIP)
        public _FinalStage title(Optional<String> title) {
            this.title = title;
            return this;
        }

        @java.lang.Override
        public DocumentInformation build() {
            return new DocumentInformation(knowledgeBaseId, documentId, title, snippet, additionalProperties);
        }
    }
}
