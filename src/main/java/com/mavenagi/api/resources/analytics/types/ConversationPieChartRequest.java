/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.analytics.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import com.mavenagi.api.resources.conversation.types.ConversationFilter;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ConversationPieChartRequest.Builder.class)
public final class ConversationPieChartRequest implements IConversationAnalyticsRequest {
    private final Optional<ConversationFilter> conversationFilter;

    private final ConversationGroupBy groupBy;

    private final ConversationMetric metric;

    private final Map<String, Object> additionalProperties;

    private ConversationPieChartRequest(
            Optional<ConversationFilter> conversationFilter,
            ConversationGroupBy groupBy,
            ConversationMetric metric,
            Map<String, Object> additionalProperties) {
        this.conversationFilter = conversationFilter;
        this.groupBy = groupBy;
        this.metric = metric;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Optional filter applied to refine the conversation data before processing.
     */
    @JsonProperty("conversationFilter")
    @java.lang.Override
    public Optional<ConversationFilter> getConversationFilter() {
        return conversationFilter;
    }

    /**
     * @return Field used to group data into slices for the pie chart.
     */
    @JsonProperty("groupBy")
    public ConversationGroupBy getGroupBy() {
        return groupBy;
    }

    /**
     * @return Metric defining the value for each pie slice, stored in the y-axis value.
     */
    @JsonProperty("metric")
    public ConversationMetric getMetric() {
        return metric;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ConversationPieChartRequest && equalTo((ConversationPieChartRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ConversationPieChartRequest other) {
        return conversationFilter.equals(other.conversationFilter)
                && groupBy.equals(other.groupBy)
                && metric.equals(other.metric);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.conversationFilter, this.groupBy, this.metric);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static GroupByStage builder() {
        return new Builder();
    }

    public interface GroupByStage {
        MetricStage groupBy(@NotNull ConversationGroupBy groupBy);

        Builder from(ConversationPieChartRequest other);
    }

    public interface MetricStage {
        _FinalStage metric(@NotNull ConversationMetric metric);
    }

    public interface _FinalStage {
        ConversationPieChartRequest build();

        _FinalStage conversationFilter(Optional<ConversationFilter> conversationFilter);

        _FinalStage conversationFilter(ConversationFilter conversationFilter);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements GroupByStage, MetricStage, _FinalStage {
        private ConversationGroupBy groupBy;

        private ConversationMetric metric;

        private Optional<ConversationFilter> conversationFilter = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ConversationPieChartRequest other) {
            conversationFilter(other.getConversationFilter());
            groupBy(other.getGroupBy());
            metric(other.getMetric());
            return this;
        }

        /**
         * <p>Field used to group data into slices for the pie chart.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("groupBy")
        public MetricStage groupBy(@NotNull ConversationGroupBy groupBy) {
            this.groupBy = Objects.requireNonNull(groupBy, "groupBy must not be null");
            return this;
        }

        /**
         * <p>Metric defining the value for each pie slice, stored in the y-axis value.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("metric")
        public _FinalStage metric(@NotNull ConversationMetric metric) {
            this.metric = Objects.requireNonNull(metric, "metric must not be null");
            return this;
        }

        /**
         * <p>Optional filter applied to refine the conversation data before processing.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage conversationFilter(ConversationFilter conversationFilter) {
            this.conversationFilter = Optional.ofNullable(conversationFilter);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "conversationFilter", nulls = Nulls.SKIP)
        public _FinalStage conversationFilter(Optional<ConversationFilter> conversationFilter) {
            this.conversationFilter = conversationFilter;
            return this;
        }

        @java.lang.Override
        public ConversationPieChartRequest build() {
            return new ConversationPieChartRequest(conversationFilter, groupBy, metric, additionalProperties);
        }
    }
}
