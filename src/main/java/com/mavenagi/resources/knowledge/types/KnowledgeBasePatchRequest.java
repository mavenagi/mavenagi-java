/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.knowledge.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.resources.commons.types.LlmInclusionStatus;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = KnowledgeBasePatchRequest.Builder.class)
public final class KnowledgeBasePatchRequest {
    private final Optional<String> appId;

    private final Optional<String> name;

    private final Optional<Set<String>> tags;

    private final Optional<LlmInclusionStatus> llmInclusionStatus;

    private final Optional<KnowledgeBaseRefreshFrequency> refreshFrequency;

    private final Map<String, Object> additionalProperties;

    private KnowledgeBasePatchRequest(
            Optional<String> appId,
            Optional<String> name,
            Optional<Set<String>> tags,
            Optional<LlmInclusionStatus> llmInclusionStatus,
            Optional<KnowledgeBaseRefreshFrequency> refreshFrequency,
            Map<String, Object> additionalProperties) {
        this.appId = appId;
        this.name = name;
        this.tags = tags;
        this.llmInclusionStatus = llmInclusionStatus;
        this.refreshFrequency = refreshFrequency;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The App ID of the knowledge base to patch. If not provided the ID of the calling app will be used.
     */
    @JsonProperty("appId")
    public Optional<String> getAppId() {
        return appId;
    }

    /**
     * @return The name of the knowledge base.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return The tags of the knowledge base.
     */
    @JsonProperty("tags")
    public Optional<Set<String>> getTags() {
        return tags;
    }

    /**
     * @return Determines whether documents in the knowledge base are sent to the LLM as part of a conversation. Note that at this time knowledge bases can not be set to <code>ALWAYS</code>.
     */
    @JsonProperty("llmInclusionStatus")
    public Optional<LlmInclusionStatus> getLlmInclusionStatus() {
        return llmInclusionStatus;
    }

    /**
     * @return How often the knowledge base should be refreshed.
     */
    @JsonProperty("refreshFrequency")
    public Optional<KnowledgeBaseRefreshFrequency> getRefreshFrequency() {
        return refreshFrequency;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof KnowledgeBasePatchRequest && equalTo((KnowledgeBasePatchRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(KnowledgeBasePatchRequest other) {
        return appId.equals(other.appId)
                && name.equals(other.name)
                && tags.equals(other.tags)
                && llmInclusionStatus.equals(other.llmInclusionStatus)
                && refreshFrequency.equals(other.refreshFrequency);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.appId, this.name, this.tags, this.llmInclusionStatus, this.refreshFrequency);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> appId = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<Set<String>> tags = Optional.empty();

        private Optional<LlmInclusionStatus> llmInclusionStatus = Optional.empty();

        private Optional<KnowledgeBaseRefreshFrequency> refreshFrequency = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(KnowledgeBasePatchRequest other) {
            appId(other.getAppId());
            name(other.getName());
            tags(other.getTags());
            llmInclusionStatus(other.getLlmInclusionStatus());
            refreshFrequency(other.getRefreshFrequency());
            return this;
        }

        /**
         * <p>The App ID of the knowledge base to patch. If not provided the ID of the calling app will be used.</p>
         */
        @JsonSetter(value = "appId", nulls = Nulls.SKIP)
        public Builder appId(Optional<String> appId) {
            this.appId = appId;
            return this;
        }

        public Builder appId(String appId) {
            this.appId = Optional.ofNullable(appId);
            return this;
        }

        /**
         * <p>The name of the knowledge base.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>The tags of the knowledge base.</p>
         */
        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public Builder tags(Optional<Set<String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(Set<String> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        /**
         * <p>Determines whether documents in the knowledge base are sent to the LLM as part of a conversation. Note that at this time knowledge bases can not be set to <code>ALWAYS</code>.</p>
         */
        @JsonSetter(value = "llmInclusionStatus", nulls = Nulls.SKIP)
        public Builder llmInclusionStatus(Optional<LlmInclusionStatus> llmInclusionStatus) {
            this.llmInclusionStatus = llmInclusionStatus;
            return this;
        }

        public Builder llmInclusionStatus(LlmInclusionStatus llmInclusionStatus) {
            this.llmInclusionStatus = Optional.ofNullable(llmInclusionStatus);
            return this;
        }

        /**
         * <p>How often the knowledge base should be refreshed.</p>
         */
        @JsonSetter(value = "refreshFrequency", nulls = Nulls.SKIP)
        public Builder refreshFrequency(Optional<KnowledgeBaseRefreshFrequency> refreshFrequency) {
            this.refreshFrequency = refreshFrequency;
            return this;
        }

        public Builder refreshFrequency(KnowledgeBaseRefreshFrequency refreshFrequency) {
            this.refreshFrequency = Optional.ofNullable(refreshFrequency);
            return this;
        }

        public KnowledgeBasePatchRequest build() {
            return new KnowledgeBasePatchRequest(
                    appId, name, tags, llmInclusionStatus, refreshFrequency, additionalProperties);
        }
    }
}
