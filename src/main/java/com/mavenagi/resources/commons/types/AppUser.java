/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AppUser.Builder.class)
public final class AppUser implements IAppUser {
    private final Set<AppUserIdentifier> identifiers;

    private final Map<String, UserData> data;

    private final Map<String, Object> additionalProperties;

    private AppUser(
            Set<AppUserIdentifier> identifiers, Map<String, UserData> data, Map<String, Object> additionalProperties) {
        this.identifiers = identifiers;
        this.data = data;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Used to determine whether two users from different apps are the same
     */
    @JsonProperty("identifiers")
    @java.lang.Override
    public Set<AppUserIdentifier> getIdentifiers() {
        return identifiers;
    }

    @JsonProperty("data")
    @java.lang.Override
    public Map<String, UserData> getData() {
        return data;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AppUser && equalTo((AppUser) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AppUser other) {
        return identifiers.equals(other.identifiers) && data.equals(other.data);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.identifiers, this.data);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Set<AppUserIdentifier> identifiers = new LinkedHashSet<>();

        private Map<String, UserData> data = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AppUser other) {
            identifiers(other.getIdentifiers());
            data(other.getData());
            return this;
        }

        /**
         * <p>Used to determine whether two users from different apps are the same</p>
         */
        @JsonSetter(value = "identifiers", nulls = Nulls.SKIP)
        public Builder identifiers(Set<AppUserIdentifier> identifiers) {
            this.identifiers.clear();
            this.identifiers.addAll(identifiers);
            return this;
        }

        public Builder addIdentifiers(AppUserIdentifier identifiers) {
            this.identifiers.add(identifiers);
            return this;
        }

        public Builder addAllIdentifiers(Set<AppUserIdentifier> identifiers) {
            this.identifiers.addAll(identifiers);
            return this;
        }

        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public Builder data(Map<String, UserData> data) {
            this.data.clear();
            this.data.putAll(data);
            return this;
        }

        public Builder putAllData(Map<String, UserData> data) {
            this.data.putAll(data);
            return this;
        }

        public Builder data(String key, UserData value) {
            this.data.put(key, value);
            return this;
        }

        public AppUser build() {
            return new AppUser(identifiers, data, additionalProperties);
        }
    }
}
