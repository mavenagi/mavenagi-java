/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class BotLogicItem {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private BotLogicItem(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static BotLogicItem knowledge(BotLogicKnowledgeItem value) {
        return new BotLogicItem(new KnowledgeValue(value));
    }

    public static BotLogicItem actions(BotLogicActionItem value) {
        return new BotLogicItem(new ActionsValue(value));
    }

    public static BotLogicItem form(BotLogicFormSubmissionItem value) {
        return new BotLogicItem(new FormValue(value));
    }

    public static BotLogicItem safety(BotLogicSafetyItem value) {
        return new BotLogicItem(new SafetyValue(value));
    }

    public static BotLogicItem user(BotLogicUserItem value) {
        return new BotLogicItem(new UserValue(value));
    }

    public static BotLogicItem segments(BotLogicSegmentsItem value) {
        return new BotLogicItem(new SegmentsValue(value));
    }

    public boolean isKnowledge() {
        return value instanceof KnowledgeValue;
    }

    public boolean isActions() {
        return value instanceof ActionsValue;
    }

    public boolean isForm() {
        return value instanceof FormValue;
    }

    public boolean isSafety() {
        return value instanceof SafetyValue;
    }

    public boolean isUser() {
        return value instanceof UserValue;
    }

    public boolean isSegments() {
        return value instanceof SegmentsValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<BotLogicKnowledgeItem> getKnowledge() {
        if (isKnowledge()) {
            return Optional.of(((KnowledgeValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<BotLogicActionItem> getActions() {
        if (isActions()) {
            return Optional.of(((ActionsValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<BotLogicFormSubmissionItem> getForm() {
        if (isForm()) {
            return Optional.of(((FormValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<BotLogicSafetyItem> getSafety() {
        if (isSafety()) {
            return Optional.of(((SafetyValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<BotLogicUserItem> getUser() {
        if (isUser()) {
            return Optional.of(((UserValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<BotLogicSegmentsItem> getSegments() {
        if (isSegments()) {
            return Optional.of(((SegmentsValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitKnowledge(BotLogicKnowledgeItem knowledge);

        T visitActions(BotLogicActionItem actions);

        T visitForm(BotLogicFormSubmissionItem form);

        T visitSafety(BotLogicSafetyItem safety);

        T visitUser(BotLogicUserItem user);

        T visitSegments(BotLogicSegmentsItem segments);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(KnowledgeValue.class),
        @JsonSubTypes.Type(ActionsValue.class),
        @JsonSubTypes.Type(FormValue.class),
        @JsonSubTypes.Type(SafetyValue.class),
        @JsonSubTypes.Type(UserValue.class),
        @JsonSubTypes.Type(SegmentsValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("knowledge")
    @JsonIgnoreProperties("type")
    private static final class KnowledgeValue implements Value {
        @JsonUnwrapped
        private BotLogicKnowledgeItem value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private KnowledgeValue() {}

        private KnowledgeValue(BotLogicKnowledgeItem value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitKnowledge(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof KnowledgeValue && equalTo((KnowledgeValue) other);
        }

        private boolean equalTo(KnowledgeValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BotLogicItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("actions")
    @JsonIgnoreProperties("type")
    private static final class ActionsValue implements Value {
        @JsonUnwrapped
        private BotLogicActionItem value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ActionsValue() {}

        private ActionsValue(BotLogicActionItem value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitActions(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ActionsValue && equalTo((ActionsValue) other);
        }

        private boolean equalTo(ActionsValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BotLogicItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("form")
    @JsonIgnoreProperties("type")
    private static final class FormValue implements Value {
        @JsonUnwrapped
        private BotLogicFormSubmissionItem value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private FormValue() {}

        private FormValue(BotLogicFormSubmissionItem value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitForm(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof FormValue && equalTo((FormValue) other);
        }

        private boolean equalTo(FormValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BotLogicItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("safety")
    @JsonIgnoreProperties("type")
    private static final class SafetyValue implements Value {
        @JsonUnwrapped
        private BotLogicSafetyItem value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SafetyValue() {}

        private SafetyValue(BotLogicSafetyItem value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSafety(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SafetyValue && equalTo((SafetyValue) other);
        }

        private boolean equalTo(SafetyValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BotLogicItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("user")
    @JsonIgnoreProperties("type")
    private static final class UserValue implements Value {
        @JsonUnwrapped
        private BotLogicUserItem value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private UserValue() {}

        private UserValue(BotLogicUserItem value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitUser(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof UserValue && equalTo((UserValue) other);
        }

        private boolean equalTo(UserValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BotLogicItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("segments")
    @JsonIgnoreProperties("type")
    private static final class SegmentsValue implements Value {
        @JsonUnwrapped
        private BotLogicSegmentsItem value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SegmentsValue() {}

        private SegmentsValue(BotLogicSegmentsItem value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSegments(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SegmentsValue && equalTo((SegmentsValue) other);
        }

        private boolean equalTo(SegmentsValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BotLogicItem{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("type")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BotLogicItem{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
