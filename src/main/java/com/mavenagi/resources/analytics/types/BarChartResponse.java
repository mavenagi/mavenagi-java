/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.analytics.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BarChartResponse.Builder.class)
public final class BarChartResponse {
    private final List<Series> series;

    private final Map<String, Object> additionalProperties;

    private BarChartResponse(List<Series> series, Map<String, Object> additionalProperties) {
        this.series = series;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Each LabeledPoint in the series represents a value for the bar, where the name serves as the bar's label.
     * If vertical grouping is defined, multiple series will be created, each representing a group.
     * In such cases, the bars can be stacked to reflect the grouped data distribution.
     */
    @JsonProperty("series")
    public List<Series> getSeries() {
        return series;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BarChartResponse && equalTo((BarChartResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BarChartResponse other) {
        return series.equals(other.series);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.series);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<Series> series = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BarChartResponse other) {
            series(other.getSeries());
            return this;
        }

        /**
         * <p>Each LabeledPoint in the series represents a value for the bar, where the name serves as the bar's label.
         * If vertical grouping is defined, multiple series will be created, each representing a group.
         * In such cases, the bars can be stacked to reflect the grouped data distribution.</p>
         */
        @JsonSetter(value = "series", nulls = Nulls.SKIP)
        public Builder series(List<Series> series) {
            this.series.clear();
            this.series.addAll(series);
            return this;
        }

        public Builder addSeries(Series series) {
            this.series.add(series);
            return this;
        }

        public Builder addAllSeries(List<Series> series) {
            this.series.addAll(series);
            return this;
        }

        public BarChartResponse build() {
            return new BarChartResponse(series, additionalProperties);
        }
    }
}
