/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.triggers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.mavenagi.core.ClientOptions;
import com.mavenagi.core.MavenAGIApiException;
import com.mavenagi.core.MavenAGIException;
import com.mavenagi.core.MavenAGIHttpResponse;
import com.mavenagi.core.MediaTypes;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.core.QueryStringMapper;
import com.mavenagi.core.RequestOptions;
import com.mavenagi.resources.commons.errors.BadRequestError;
import com.mavenagi.resources.commons.errors.NotFoundError;
import com.mavenagi.resources.commons.errors.ServerError;
import com.mavenagi.resources.commons.types.ErrorMessage;
import com.mavenagi.resources.triggers.requests.PartialUpdateRequest;
import com.mavenagi.resources.triggers.types.EventTriggerRequest;
import com.mavenagi.resources.triggers.types.EventTriggerResponse;
import com.mavenagi.resources.triggers.types.EventTriggersSearchRequest;
import com.mavenagi.resources.triggers.types.EventTriggersSearchResponse;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawTriggersClient {
    protected final ClientOptions clientOptions;

    public AsyncRawTriggersClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public CompletableFuture<MavenAGIHttpResponse<EventTriggersSearchResponse>> search() {
        return search(EventTriggersSearchRequest.builder().build());
    }

    public CompletableFuture<MavenAGIHttpResponse<EventTriggersSearchResponse>> search(
            EventTriggersSearchRequest request) {
        return search(request, null);
    }

    public CompletableFuture<MavenAGIHttpResponse<EventTriggersSearchResponse>> search(
            EventTriggersSearchRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/triggers")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new MavenAGIException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<MavenAGIHttpResponse<EventTriggersSearchResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new MavenAGIHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), EventTriggersSearchResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class),
                                        response));
                                return;
                            case 404:
                                future.completeExceptionally(new NotFoundError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new ServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new MavenAGIApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MavenAGIException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MavenAGIException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Update an event trigger or create it if it doesn't exist.
     */
    public CompletableFuture<MavenAGIHttpResponse<EventTriggerResponse>> createOrUpdate(EventTriggerRequest request) {
        return createOrUpdate(request, null);
    }

    /**
     * Update an event trigger or create it if it doesn't exist.
     */
    public CompletableFuture<MavenAGIHttpResponse<EventTriggerResponse>> createOrUpdate(
            EventTriggerRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/triggers")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new MavenAGIException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<MavenAGIHttpResponse<EventTriggerResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new MavenAGIHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), EventTriggerResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class),
                                        response));
                                return;
                            case 404:
                                future.completeExceptionally(new NotFoundError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new ServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new MavenAGIApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MavenAGIException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MavenAGIException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Get an event trigger by its supplied ID
     */
    public CompletableFuture<MavenAGIHttpResponse<EventTriggerResponse>> get(String triggerReferenceId) {
        return get(triggerReferenceId, null);
    }

    /**
     * Get an event trigger by its supplied ID
     */
    public CompletableFuture<MavenAGIHttpResponse<EventTriggerResponse>> get(
            String triggerReferenceId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/triggers")
                .addPathSegment(triggerReferenceId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<MavenAGIHttpResponse<EventTriggerResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new MavenAGIHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), EventTriggerResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class),
                                        response));
                                return;
                            case 404:
                                future.completeExceptionally(new NotFoundError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new ServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new MavenAGIApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MavenAGIException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MavenAGIException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Delete an event trigger
     */
    public CompletableFuture<MavenAGIHttpResponse<Void>> delete(String triggerReferenceId) {
        return delete(triggerReferenceId, null);
    }

    /**
     * Delete an event trigger
     */
    public CompletableFuture<MavenAGIHttpResponse<Void>> delete(
            String triggerReferenceId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/triggers")
                .addPathSegment(triggerReferenceId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<MavenAGIHttpResponse<Void>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new MavenAGIHttpResponse<>(null, response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class),
                                        response));
                                return;
                            case 404:
                                future.completeExceptionally(new NotFoundError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new ServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new MavenAGIApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MavenAGIException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MavenAGIException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Updates an event trigger. Only the enabled field is editable.
     */
    public CompletableFuture<MavenAGIHttpResponse<EventTriggerResponse>> partialUpdate(
            String triggerReferenceId, PartialUpdateRequest request) {
        return partialUpdate(triggerReferenceId, request, null);
    }

    /**
     * Updates an event trigger. Only the enabled field is editable.
     */
    public CompletableFuture<MavenAGIHttpResponse<EventTriggerResponse>> partialUpdate(
            String triggerReferenceId, PartialUpdateRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/triggers")
                .addPathSegment(triggerReferenceId);
        if (request.getAppId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "appId", request.getAppId().get(), false);
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("PATCH", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<MavenAGIHttpResponse<EventTriggerResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new MavenAGIHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), EventTriggerResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class),
                                        response));
                                return;
                            case 404:
                                future.completeExceptionally(new NotFoundError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new ServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new MavenAGIApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new MavenAGIException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new MavenAGIException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
