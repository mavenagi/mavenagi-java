/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MetadataPrecondition.Builder.class)
public final class MetadataPrecondition implements IPreconditionBase {
    private final Optional<PreconditionOperator> operator;

    private final String key;

    private final Optional<String> value;

    private final Map<String, Object> additionalProperties;

    private MetadataPrecondition(
            Optional<PreconditionOperator> operator,
            String key,
            Optional<String> value,
            Map<String, Object> additionalProperties) {
        this.operator = operator;
        this.key = key;
        this.value = value;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Operator to apply to this precondition
     */
    @JsonProperty("operator")
    @java.lang.Override
    public Optional<PreconditionOperator> getOperator() {
        return operator;
    }

    /**
     * @return The key that must be present in the metadata for a precondition to be met
     */
    @JsonProperty("key")
    public String getKey() {
        return key;
    }

    /**
     * @return If set, the value must match the metadata value for the given key
     */
    @JsonProperty("value")
    public Optional<String> getValue() {
        return value;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MetadataPrecondition && equalTo((MetadataPrecondition) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MetadataPrecondition other) {
        return operator.equals(other.operator) && key.equals(other.key) && value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.operator, this.key, this.value);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static KeyStage builder() {
        return new Builder();
    }

    public interface KeyStage {
        /**
         * <p>The key that must be present in the metadata for a precondition to be met</p>
         */
        _FinalStage key(@NotNull String key);

        Builder from(MetadataPrecondition other);
    }

    public interface _FinalStage {
        MetadataPrecondition build();

        /**
         * <p>Operator to apply to this precondition</p>
         */
        _FinalStage operator(Optional<PreconditionOperator> operator);

        _FinalStage operator(PreconditionOperator operator);

        /**
         * <p>If set, the value must match the metadata value for the given key</p>
         */
        _FinalStage value(Optional<String> value);

        _FinalStage value(String value);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements KeyStage, _FinalStage {
        private String key;

        private Optional<String> value = Optional.empty();

        private Optional<PreconditionOperator> operator = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(MetadataPrecondition other) {
            operator(other.getOperator());
            key(other.getKey());
            value(other.getValue());
            return this;
        }

        /**
         * <p>The key that must be present in the metadata for a precondition to be met</p>
         * <p>The key that must be present in the metadata for a precondition to be met</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("key")
        public _FinalStage key(@NotNull String key) {
            this.key = Objects.requireNonNull(key, "key must not be null");
            return this;
        }

        /**
         * <p>If set, the value must match the metadata value for the given key</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage value(String value) {
            this.value = Optional.ofNullable(value);
            return this;
        }

        /**
         * <p>If set, the value must match the metadata value for the given key</p>
         */
        @java.lang.Override
        @JsonSetter(value = "value", nulls = Nulls.SKIP)
        public _FinalStage value(Optional<String> value) {
            this.value = value;
            return this;
        }

        /**
         * <p>Operator to apply to this precondition</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage operator(PreconditionOperator operator) {
            this.operator = Optional.ofNullable(operator);
            return this;
        }

        /**
         * <p>Operator to apply to this precondition</p>
         */
        @java.lang.Override
        @JsonSetter(value = "operator", nulls = Nulls.SKIP)
        public _FinalStage operator(Optional<PreconditionOperator> operator) {
            this.operator = operator;
            return this;
        }

        @java.lang.Override
        public MetadataPrecondition build() {
            return new MetadataPrecondition(operator, key, value, additionalProperties);
        }
    }
}
