/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AppUserIdentifier.Builder.class)
public final class AppUserIdentifier {
    private final String value;

    private final AppUserIdentifyingPropertyType type;

    private final Map<String, Object> additionalProperties;

    private AppUserIdentifier(
            String value, AppUserIdentifyingPropertyType type, Map<String, Object> additionalProperties) {
        this.value = value;
        this.type = type;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The identifying property text
     */
    @JsonProperty("value")
    public String getValue() {
        return value;
    }

    @JsonProperty("type")
    public AppUserIdentifyingPropertyType getType() {
        return type;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AppUserIdentifier && equalTo((AppUserIdentifier) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AppUserIdentifier other) {
        return value.equals(other.value) && type.equals(other.type);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.value, this.type);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ValueStage builder() {
        return new Builder();
    }

    public interface ValueStage {
        /**
         * <p>The identifying property text</p>
         */
        TypeStage value(@NotNull String value);

        Builder from(AppUserIdentifier other);
    }

    public interface TypeStage {
        _FinalStage type(@NotNull AppUserIdentifyingPropertyType type);
    }

    public interface _FinalStage {
        AppUserIdentifier build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ValueStage, TypeStage, _FinalStage {
        private String value;

        private AppUserIdentifyingPropertyType type;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AppUserIdentifier other) {
            value(other.getValue());
            type(other.getType());
            return this;
        }

        /**
         * <p>The identifying property text</p>
         * <p>The identifying property text</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("value")
        public TypeStage value(@NotNull String value) {
            this.value = Objects.requireNonNull(value, "value must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(@NotNull AppUserIdentifyingPropertyType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        @java.lang.Override
        public AppUserIdentifier build() {
            return new AppUserIdentifier(value, type, additionalProperties);
        }
    }
}
