/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.analytics.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.resources.conversation.types.ConversationField;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ConversationGroupBy.Builder.class)
public final class ConversationGroupBy implements IGroupByBase {
    private final Optional<Integer> limit;

    private final ConversationField field;

    private final Optional<List<Range>> ranges;

    private final Map<String, Object> additionalProperties;

    private ConversationGroupBy(
            Optional<Integer> limit,
            ConversationField field,
            Optional<List<Range>> ranges,
            Map<String, Object> additionalProperties) {
        this.limit = limit;
        this.field = field;
        this.ranges = ranges;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Limits the number of groups returned (defaults to 100 if omitted).
     */
    @JsonProperty("limit")
    @java.lang.Override
    public Optional<Integer> getLimit() {
        return limit;
    }

    /**
     * @return Field used for data grouping.
     */
    @JsonProperty("field")
    public ConversationField getField() {
        return field;
    }

    /**
     * @return Numeric ranges for grouping data into predefined buckets. Applies only to numeric fields.
     */
    @JsonProperty("ranges")
    public Optional<List<Range>> getRanges() {
        return ranges;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ConversationGroupBy && equalTo((ConversationGroupBy) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ConversationGroupBy other) {
        return limit.equals(other.limit) && field.equals(other.field) && ranges.equals(other.ranges);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.limit, this.field, this.ranges);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FieldStage builder() {
        return new Builder();
    }

    public interface FieldStage {
        /**
         * <p>Field used for data grouping.</p>
         */
        _FinalStage field(@NotNull ConversationField field);

        Builder from(ConversationGroupBy other);
    }

    public interface _FinalStage {
        ConversationGroupBy build();

        /**
         * <p>Limits the number of groups returned (defaults to 100 if omitted).</p>
         */
        _FinalStage limit(Optional<Integer> limit);

        _FinalStage limit(Integer limit);

        /**
         * <p>Numeric ranges for grouping data into predefined buckets. Applies only to numeric fields.</p>
         */
        _FinalStage ranges(Optional<List<Range>> ranges);

        _FinalStage ranges(List<Range> ranges);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements FieldStage, _FinalStage {
        private ConversationField field;

        private Optional<List<Range>> ranges = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ConversationGroupBy other) {
            limit(other.getLimit());
            field(other.getField());
            ranges(other.getRanges());
            return this;
        }

        /**
         * <p>Field used for data grouping.</p>
         * <p>Field used for data grouping.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("field")
        public _FinalStage field(@NotNull ConversationField field) {
            this.field = Objects.requireNonNull(field, "field must not be null");
            return this;
        }

        /**
         * <p>Numeric ranges for grouping data into predefined buckets. Applies only to numeric fields.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ranges(List<Range> ranges) {
            this.ranges = Optional.ofNullable(ranges);
            return this;
        }

        /**
         * <p>Numeric ranges for grouping data into predefined buckets. Applies only to numeric fields.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ranges", nulls = Nulls.SKIP)
        public _FinalStage ranges(Optional<List<Range>> ranges) {
            this.ranges = ranges;
            return this;
        }

        /**
         * <p>Limits the number of groups returned (defaults to 100 if omitted).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * <p>Limits the number of groups returned (defaults to 100 if omitted).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public _FinalStage limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        @java.lang.Override
        public ConversationGroupBy build() {
            return new ConversationGroupBy(limit, field, ranges, additionalProperties);
        }
    }
}
