/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.segments.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.resources.commons.types.Precondition;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SegmentPatchRequest.Builder.class)
public final class SegmentPatchRequest {
    private final Optional<String> appId;

    private final Optional<String> name;

    private final Optional<Precondition> precondition;

    private final Optional<SegmentStatus> status;

    private final Map<String, Object> additionalProperties;

    private SegmentPatchRequest(
            Optional<String> appId,
            Optional<String> name,
            Optional<Precondition> precondition,
            Optional<SegmentStatus> status,
            Map<String, Object> additionalProperties) {
        this.appId = appId;
        this.name = name;
        this.precondition = precondition;
        this.status = status;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The App ID of the segment to update. If not provided, the ID of the calling app will be used.
     */
    @JsonProperty("appId")
    public Optional<String> getAppId() {
        return appId;
    }

    /**
     * @return The name of the segment.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return The precondition that must be met for a conversation message to be included in the segment.
     */
    @JsonProperty("precondition")
    public Optional<Precondition> getPrecondition() {
        return precondition;
    }

    /**
     * @return The status of the segment. Segments can only be deactivated if they are not set on any actions or active knowledge bases.
     */
    @JsonProperty("status")
    public Optional<SegmentStatus> getStatus() {
        return status;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SegmentPatchRequest && equalTo((SegmentPatchRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SegmentPatchRequest other) {
        return appId.equals(other.appId)
                && name.equals(other.name)
                && precondition.equals(other.precondition)
                && status.equals(other.status);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.appId, this.name, this.precondition, this.status);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> appId = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<Precondition> precondition = Optional.empty();

        private Optional<SegmentStatus> status = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SegmentPatchRequest other) {
            appId(other.getAppId());
            name(other.getName());
            precondition(other.getPrecondition());
            status(other.getStatus());
            return this;
        }

        /**
         * <p>The App ID of the segment to update. If not provided, the ID of the calling app will be used.</p>
         */
        @JsonSetter(value = "appId", nulls = Nulls.SKIP)
        public Builder appId(Optional<String> appId) {
            this.appId = appId;
            return this;
        }

        public Builder appId(String appId) {
            this.appId = Optional.ofNullable(appId);
            return this;
        }

        /**
         * <p>The name of the segment.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>The precondition that must be met for a conversation message to be included in the segment.</p>
         */
        @JsonSetter(value = "precondition", nulls = Nulls.SKIP)
        public Builder precondition(Optional<Precondition> precondition) {
            this.precondition = precondition;
            return this;
        }

        public Builder precondition(Precondition precondition) {
            this.precondition = Optional.ofNullable(precondition);
            return this;
        }

        /**
         * <p>The status of the segment. Segments can only be deactivated if they are not set on any actions or active knowledge bases.</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<SegmentStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(SegmentStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        public SegmentPatchRequest build() {
            return new SegmentPatchRequest(appId, name, precondition, status, additionalProperties);
        }
    }
}
