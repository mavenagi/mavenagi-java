/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BotLogicActionItem.Builder.class)
public final class BotLogicActionItem {
    private final List<BotLogicActionReviewedDetail> actionsReviewed;

    private final List<BotLogicActionExecutedDetail> actionsExecuted;

    private final Map<String, Object> additionalProperties;

    private BotLogicActionItem(
            List<BotLogicActionReviewedDetail> actionsReviewed,
            List<BotLogicActionExecutedDetail> actionsExecuted,
            Map<String, Object> additionalProperties) {
        this.actionsReviewed = actionsReviewed;
        this.actionsExecuted = actionsExecuted;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("actionsReviewed")
    public List<BotLogicActionReviewedDetail> getActionsReviewed() {
        return actionsReviewed;
    }

    @JsonProperty("actionsExecuted")
    public List<BotLogicActionExecutedDetail> getActionsExecuted() {
        return actionsExecuted;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BotLogicActionItem && equalTo((BotLogicActionItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BotLogicActionItem other) {
        return actionsReviewed.equals(other.actionsReviewed) && actionsExecuted.equals(other.actionsExecuted);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.actionsReviewed, this.actionsExecuted);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<BotLogicActionReviewedDetail> actionsReviewed = new ArrayList<>();

        private List<BotLogicActionExecutedDetail> actionsExecuted = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BotLogicActionItem other) {
            actionsReviewed(other.getActionsReviewed());
            actionsExecuted(other.getActionsExecuted());
            return this;
        }

        @JsonSetter(value = "actionsReviewed", nulls = Nulls.SKIP)
        public Builder actionsReviewed(List<BotLogicActionReviewedDetail> actionsReviewed) {
            this.actionsReviewed.clear();
            this.actionsReviewed.addAll(actionsReviewed);
            return this;
        }

        public Builder addActionsReviewed(BotLogicActionReviewedDetail actionsReviewed) {
            this.actionsReviewed.add(actionsReviewed);
            return this;
        }

        public Builder addAllActionsReviewed(List<BotLogicActionReviewedDetail> actionsReviewed) {
            this.actionsReviewed.addAll(actionsReviewed);
            return this;
        }

        @JsonSetter(value = "actionsExecuted", nulls = Nulls.SKIP)
        public Builder actionsExecuted(List<BotLogicActionExecutedDetail> actionsExecuted) {
            this.actionsExecuted.clear();
            this.actionsExecuted.addAll(actionsExecuted);
            return this;
        }

        public Builder addActionsExecuted(BotLogicActionExecutedDetail actionsExecuted) {
            this.actionsExecuted.add(actionsExecuted);
            return this;
        }

        public Builder addAllActionsExecuted(List<BotLogicActionExecutedDetail> actionsExecuted) {
            this.actionsExecuted.addAll(actionsExecuted);
            return this;
        }

        public BotLogicActionItem build() {
            return new BotLogicActionItem(actionsReviewed, actionsExecuted, additionalProperties);
        }
    }
}
