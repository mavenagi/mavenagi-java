/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.segments;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.mavenagi.core.ClientOptions;
import com.mavenagi.core.MavenAGIApiException;
import com.mavenagi.core.MavenAGIException;
import com.mavenagi.core.MavenAGIHttpResponse;
import com.mavenagi.core.MediaTypes;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.core.QueryStringMapper;
import com.mavenagi.core.RequestOptions;
import com.mavenagi.resources.commons.errors.BadRequestError;
import com.mavenagi.resources.commons.errors.NotFoundError;
import com.mavenagi.resources.commons.errors.ServerError;
import com.mavenagi.resources.commons.types.ErrorMessage;
import com.mavenagi.resources.segments.requests.SegmentGetRequest;
import com.mavenagi.resources.segments.types.SegmentPatchRequest;
import com.mavenagi.resources.segments.types.SegmentRequest;
import com.mavenagi.resources.segments.types.SegmentResponse;
import com.mavenagi.resources.segments.types.SegmentsSearchRequest;
import com.mavenagi.resources.segments.types.SegmentsSearchResponse;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawSegmentsClient {
    protected final ClientOptions clientOptions;

    public RawSegmentsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public MavenAGIHttpResponse<SegmentsSearchResponse> search() {
        return search(SegmentsSearchRequest.builder().build());
    }

    public MavenAGIHttpResponse<SegmentsSearchResponse> search(SegmentsSearchRequest request) {
        return search(request, null);
    }

    public MavenAGIHttpResponse<SegmentsSearchResponse> search(
            SegmentsSearchRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/segments")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new MavenAGIException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MavenAGIHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), SegmentsSearchResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class), response);
                    case 500:
                        throw new ServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new MavenAGIApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MavenAGIException("Network error executing HTTP request", e);
        }
    }

    /**
     * Update a segment or create it if it doesn't exist.
     */
    public MavenAGIHttpResponse<SegmentResponse> createOrUpdate(SegmentRequest request) {
        return createOrUpdate(request, null);
    }

    /**
     * Update a segment or create it if it doesn't exist.
     */
    public MavenAGIHttpResponse<SegmentResponse> createOrUpdate(SegmentRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/segments")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new MavenAGIException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MavenAGIHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), SegmentResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class), response);
                    case 500:
                        throw new ServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new MavenAGIApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MavenAGIException("Network error executing HTTP request", e);
        }
    }

    /**
     * Get a segment by its supplied ID
     */
    public MavenAGIHttpResponse<SegmentResponse> get(String segmentReferenceId) {
        return get(segmentReferenceId, SegmentGetRequest.builder().build());
    }

    /**
     * Get a segment by its supplied ID
     */
    public MavenAGIHttpResponse<SegmentResponse> get(String segmentReferenceId, SegmentGetRequest request) {
        return get(segmentReferenceId, request, null);
    }

    /**
     * Get a segment by its supplied ID
     */
    public MavenAGIHttpResponse<SegmentResponse> get(
            String segmentReferenceId, SegmentGetRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/segments")
                .addPathSegment(segmentReferenceId);
        if (request.getAppId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "appId", request.getAppId().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MavenAGIHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), SegmentResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class), response);
                    case 500:
                        throw new ServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new MavenAGIApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MavenAGIException("Network error executing HTTP request", e);
        }
    }

    /**
     * Update mutable segment fields
     * <p>The <code>appId</code> field can be provided to update a segment owned by a different app.
     * All other fields will overwrite the existing value on the segment only if provided.</p>
     */
    public MavenAGIHttpResponse<SegmentResponse> patch(String segmentReferenceId) {
        return patch(segmentReferenceId, SegmentPatchRequest.builder().build());
    }

    /**
     * Update mutable segment fields
     * <p>The <code>appId</code> field can be provided to update a segment owned by a different app.
     * All other fields will overwrite the existing value on the segment only if provided.</p>
     */
    public MavenAGIHttpResponse<SegmentResponse> patch(String segmentReferenceId, SegmentPatchRequest request) {
        return patch(segmentReferenceId, request, null);
    }

    /**
     * Update mutable segment fields
     * <p>The <code>appId</code> field can be provided to update a segment owned by a different app.
     * All other fields will overwrite the existing value on the segment only if provided.</p>
     */
    public MavenAGIHttpResponse<SegmentResponse> patch(
            String segmentReferenceId, SegmentPatchRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/segments")
                .addPathSegment(segmentReferenceId)
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request),
                    MediaType.parse("application/merge-patch+json"));
        } catch (JsonProcessingException e) {
            throw new MavenAGIException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PATCH", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/merge-patch+json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MavenAGIHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), SegmentResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class), response);
                    case 500:
                        throw new ServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new MavenAGIApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MavenAGIException("Network error executing HTTP request", e);
        }
    }
}
