/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.conversation.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AskStreamTextEvent.Builder.class)
public final class AskStreamTextEvent {
    private final String contents;

    private final Map<String, Object> additionalProperties;

    private AskStreamTextEvent(String contents, Map<String, Object> additionalProperties) {
        this.contents = contents;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A partial response to the question. All stream text events should be concatenated to form the full response.
     */
    @JsonProperty("contents")
    public String getContents() {
        return contents;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AskStreamTextEvent && equalTo((AskStreamTextEvent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AskStreamTextEvent other) {
        return contents.equals(other.contents);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.contents);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ContentsStage builder() {
        return new Builder();
    }

    public interface ContentsStage {
        /**
         * <p>A partial response to the question. All stream text events should be concatenated to form the full response.</p>
         */
        _FinalStage contents(@NotNull String contents);

        Builder from(AskStreamTextEvent other);
    }

    public interface _FinalStage {
        AskStreamTextEvent build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ContentsStage, _FinalStage {
        private String contents;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AskStreamTextEvent other) {
            contents(other.getContents());
            return this;
        }

        /**
         * <p>A partial response to the question. All stream text events should be concatenated to form the full response.</p>
         * <p>A partial response to the question. All stream text events should be concatenated to form the full response.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("contents")
        public _FinalStage contents(@NotNull String contents) {
            this.contents = Objects.requireNonNull(contents, "contents must not be null");
            return this;
        }

        @java.lang.Override
        public AskStreamTextEvent build() {
            return new AskStreamTextEvent(contents, additionalProperties);
        }
    }
}
