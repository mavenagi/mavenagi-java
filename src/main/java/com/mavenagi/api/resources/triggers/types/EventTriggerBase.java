/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.triggers.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EventTriggerBase.Builder.class)
public final class EventTriggerBase implements IEventTriggerBase {
    private final String description;

    private final EventTriggerType type;

    private final Map<String, Object> additionalProperties;

    private EventTriggerBase(String description, EventTriggerType type, Map<String, Object> additionalProperties) {
        this.description = description;
        this.type = type;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The description of what the event trigger does, shown in the Maven Dashboard
     */
    @JsonProperty("description")
    @java.lang.Override
    public String getDescription() {
        return description;
    }

    /**
     * @return The type of event trigger this app wishes to handle.
     * <p>Conversation triggers fire when a conversation is created, after each additional message, and upon deletion events.
     * There is a small delay before trigger execution to allow time for conversation analysis to complete.</p>
     * <p>Feedback can not be modified, so the feedback trigger fires immediately after feedback is created.</p>
     */
    @JsonProperty("type")
    @java.lang.Override
    public EventTriggerType getType() {
        return type;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EventTriggerBase && equalTo((EventTriggerBase) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EventTriggerBase other) {
        return description.equals(other.description) && type.equals(other.type);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.description, this.type);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DescriptionStage builder() {
        return new Builder();
    }

    public interface DescriptionStage {
        TypeStage description(@NotNull String description);

        Builder from(EventTriggerBase other);
    }

    public interface TypeStage {
        _FinalStage type(@NotNull EventTriggerType type);
    }

    public interface _FinalStage {
        EventTriggerBase build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements DescriptionStage, TypeStage, _FinalStage {
        private String description;

        private EventTriggerType type;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(EventTriggerBase other) {
            description(other.getDescription());
            type(other.getType());
            return this;
        }

        /**
         * <p>The description of what the event trigger does, shown in the Maven Dashboard</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("description")
        public TypeStage description(@NotNull String description) {
            this.description = Objects.requireNonNull(description, "description must not be null");
            return this;
        }

        /**
         * <p>The type of event trigger this app wishes to handle.</p>
         * <p>Conversation triggers fire when a conversation is created, after each additional message, and upon deletion events.
         * There is a small delay before trigger execution to allow time for conversation analysis to complete.</p>
         * <p>Feedback can not be modified, so the feedback trigger fires immediately after feedback is created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(@NotNull EventTriggerType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        @java.lang.Override
        public EventTriggerBase build() {
            return new EventTriggerBase(description, type, additionalProperties);
        }
    }
}
