/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.knowledge.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.resources.commons.types.EntityIdBase;
import com.mavenagi.resources.commons.types.EntityIdWithoutAgent;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = KnowledgeDocumentRequest.Builder.class)
public final class KnowledgeDocumentRequest implements IBaseKnowledgeDocument {
    private final String title;

    private final Optional<String> url;

    private final Optional<String> language;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<OffsetDateTime> updatedAt;

    private final Optional<String> author;

    private final EntityIdBase knowledgeDocumentId;

    private final Optional<EntityIdWithoutAgent> versionId;

    private final KnowledgeDocumentContentType contentType;

    private final String content;

    private final Optional<Map<String, String>> metadata;

    private final Map<String, Object> additionalProperties;

    private KnowledgeDocumentRequest(
            String title,
            Optional<String> url,
            Optional<String> language,
            Optional<OffsetDateTime> createdAt,
            Optional<OffsetDateTime> updatedAt,
            Optional<String> author,
            EntityIdBase knowledgeDocumentId,
            Optional<EntityIdWithoutAgent> versionId,
            KnowledgeDocumentContentType contentType,
            String content,
            Optional<Map<String, String>> metadata,
            Map<String, Object> additionalProperties) {
        this.title = title;
        this.url = url;
        this.language = language;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.author = author;
        this.knowledgeDocumentId = knowledgeDocumentId;
        this.versionId = versionId;
        this.contentType = contentType;
        this.content = content;
        this.metadata = metadata;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The title of the document. Will be shown as part of answers.
     */
    @JsonProperty("title")
    @java.lang.Override
    public String getTitle() {
        return title;
    }

    /**
     * @return The URL of the document. Should be visible to end users. Will be shown as part of answers. Not used for crawling.
     */
    @JsonProperty("url")
    @java.lang.Override
    public Optional<String> getUrl() {
        return url;
    }

    /**
     * @return The document language. Must be a valid ISO 639-1 language code.
     */
    @JsonProperty("language")
    @java.lang.Override
    public Optional<String> getLanguage() {
        return language;
    }

    /**
     * @return The time at which this document was created.
     */
    @JsonProperty("createdAt")
    @java.lang.Override
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The time at which this document was last modified.
     */
    @JsonProperty("updatedAt")
    @java.lang.Override
    public Optional<OffsetDateTime> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The name of the author who created this document.
     */
    @JsonProperty("author")
    @java.lang.Override
    public Optional<String> getAuthor() {
        return author;
    }

    /**
     * @return ID that uniquely identifies this knowledge document within its knowledge base
     */
    @JsonProperty("knowledgeDocumentId")
    public EntityIdBase getKnowledgeDocumentId() {
        return knowledgeDocumentId;
    }

    /**
     * @return ID that uniquely identifies which knowledge base version to create the document in. If not provided will use the most recent version of the knowledge base.
     */
    @JsonProperty("versionId")
    public Optional<EntityIdWithoutAgent> getVersionId() {
        return versionId;
    }

    @JsonProperty("contentType")
    public KnowledgeDocumentContentType getContentType() {
        return contentType;
    }

    /**
     * @return The content of the document. Not shown directly to users. May be provided in HTML or markdown. HTML will be converted to markdown automatically. Images are not currently supported and will be ignored.
     */
    @JsonProperty("content")
    public String getContent() {
        return content;
    }

    /**
     * @return Metadata for the knowledge document.
     */
    @JsonProperty("metadata")
    public Optional<Map<String, String>> getMetadata() {
        return metadata;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof KnowledgeDocumentRequest && equalTo((KnowledgeDocumentRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(KnowledgeDocumentRequest other) {
        return title.equals(other.title)
                && url.equals(other.url)
                && language.equals(other.language)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && author.equals(other.author)
                && knowledgeDocumentId.equals(other.knowledgeDocumentId)
                && versionId.equals(other.versionId)
                && contentType.equals(other.contentType)
                && content.equals(other.content)
                && metadata.equals(other.metadata);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.title,
                this.url,
                this.language,
                this.createdAt,
                this.updatedAt,
                this.author,
                this.knowledgeDocumentId,
                this.versionId,
                this.contentType,
                this.content,
                this.metadata);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TitleStage builder() {
        return new Builder();
    }

    public interface TitleStage {
        /**
         * <p>The title of the document. Will be shown as part of answers.</p>
         */
        KnowledgeDocumentIdStage title(@NotNull String title);

        Builder from(KnowledgeDocumentRequest other);
    }

    public interface KnowledgeDocumentIdStage {
        /**
         * <p>ID that uniquely identifies this knowledge document within its knowledge base</p>
         */
        ContentTypeStage knowledgeDocumentId(@NotNull EntityIdBase knowledgeDocumentId);
    }

    public interface ContentTypeStage {
        ContentStage contentType(@NotNull KnowledgeDocumentContentType contentType);
    }

    public interface ContentStage {
        /**
         * <p>The content of the document. Not shown directly to users. May be provided in HTML or markdown. HTML will be converted to markdown automatically. Images are not currently supported and will be ignored.</p>
         */
        _FinalStage content(@NotNull String content);
    }

    public interface _FinalStage {
        KnowledgeDocumentRequest build();

        /**
         * <p>The URL of the document. Should be visible to end users. Will be shown as part of answers. Not used for crawling.</p>
         */
        _FinalStage url(Optional<String> url);

        _FinalStage url(String url);

        /**
         * <p>The document language. Must be a valid ISO 639-1 language code.</p>
         */
        _FinalStage language(Optional<String> language);

        _FinalStage language(String language);

        /**
         * <p>The time at which this document was created.</p>
         */
        _FinalStage createdAt(Optional<OffsetDateTime> createdAt);

        _FinalStage createdAt(OffsetDateTime createdAt);

        /**
         * <p>The time at which this document was last modified.</p>
         */
        _FinalStage updatedAt(Optional<OffsetDateTime> updatedAt);

        _FinalStage updatedAt(OffsetDateTime updatedAt);

        /**
         * <p>The name of the author who created this document.</p>
         */
        _FinalStage author(Optional<String> author);

        _FinalStage author(String author);

        /**
         * <p>ID that uniquely identifies which knowledge base version to create the document in. If not provided will use the most recent version of the knowledge base.</p>
         */
        _FinalStage versionId(Optional<EntityIdWithoutAgent> versionId);

        _FinalStage versionId(EntityIdWithoutAgent versionId);

        /**
         * <p>Metadata for the knowledge document.</p>
         */
        _FinalStage metadata(Optional<Map<String, String>> metadata);

        _FinalStage metadata(Map<String, String> metadata);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements TitleStage, KnowledgeDocumentIdStage, ContentTypeStage, ContentStage, _FinalStage {
        private String title;

        private EntityIdBase knowledgeDocumentId;

        private KnowledgeDocumentContentType contentType;

        private String content;

        private Optional<Map<String, String>> metadata = Optional.empty();

        private Optional<EntityIdWithoutAgent> versionId = Optional.empty();

        private Optional<String> author = Optional.empty();

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<String> language = Optional.empty();

        private Optional<String> url = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(KnowledgeDocumentRequest other) {
            title(other.getTitle());
            url(other.getUrl());
            language(other.getLanguage());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            author(other.getAuthor());
            knowledgeDocumentId(other.getKnowledgeDocumentId());
            versionId(other.getVersionId());
            contentType(other.getContentType());
            content(other.getContent());
            metadata(other.getMetadata());
            return this;
        }

        /**
         * <p>The title of the document. Will be shown as part of answers.</p>
         * <p>The title of the document. Will be shown as part of answers.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("title")
        public KnowledgeDocumentIdStage title(@NotNull String title) {
            this.title = Objects.requireNonNull(title, "title must not be null");
            return this;
        }

        /**
         * <p>ID that uniquely identifies this knowledge document within its knowledge base</p>
         * <p>ID that uniquely identifies this knowledge document within its knowledge base</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("knowledgeDocumentId")
        public ContentTypeStage knowledgeDocumentId(@NotNull EntityIdBase knowledgeDocumentId) {
            this.knowledgeDocumentId =
                    Objects.requireNonNull(knowledgeDocumentId, "knowledgeDocumentId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("contentType")
        public ContentStage contentType(@NotNull KnowledgeDocumentContentType contentType) {
            this.contentType = Objects.requireNonNull(contentType, "contentType must not be null");
            return this;
        }

        /**
         * <p>The content of the document. Not shown directly to users. May be provided in HTML or markdown. HTML will be converted to markdown automatically. Images are not currently supported and will be ignored.</p>
         * <p>The content of the document. Not shown directly to users. May be provided in HTML or markdown. HTML will be converted to markdown automatically. Images are not currently supported and will be ignored.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("content")
        public _FinalStage content(@NotNull String content) {
            this.content = Objects.requireNonNull(content, "content must not be null");
            return this;
        }

        /**
         * <p>Metadata for the knowledge document.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(Map<String, String> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * <p>Metadata for the knowledge document.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Map<String, String>> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * <p>ID that uniquely identifies which knowledge base version to create the document in. If not provided will use the most recent version of the knowledge base.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage versionId(EntityIdWithoutAgent versionId) {
            this.versionId = Optional.ofNullable(versionId);
            return this;
        }

        /**
         * <p>ID that uniquely identifies which knowledge base version to create the document in. If not provided will use the most recent version of the knowledge base.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "versionId", nulls = Nulls.SKIP)
        public _FinalStage versionId(Optional<EntityIdWithoutAgent> versionId) {
            this.versionId = versionId;
            return this;
        }

        /**
         * <p>The name of the author who created this document.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage author(String author) {
            this.author = Optional.ofNullable(author);
            return this;
        }

        /**
         * <p>The name of the author who created this document.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "author", nulls = Nulls.SKIP)
        public _FinalStage author(Optional<String> author) {
            this.author = author;
            return this;
        }

        /**
         * <p>The time at which this document was last modified.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * <p>The time at which this document was last modified.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "updatedAt", nulls = Nulls.SKIP)
        public _FinalStage updatedAt(Optional<OffsetDateTime> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * <p>The time at which this document was created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>The time at which this document was created.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "createdAt", nulls = Nulls.SKIP)
        public _FinalStage createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>The document language. Must be a valid ISO 639-1 language code.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage language(String language) {
            this.language = Optional.ofNullable(language);
            return this;
        }

        /**
         * <p>The document language. Must be a valid ISO 639-1 language code.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "language", nulls = Nulls.SKIP)
        public _FinalStage language(Optional<String> language) {
            this.language = language;
            return this;
        }

        /**
         * <p>The URL of the document. Should be visible to end users. Will be shown as part of answers. Not used for crawling.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage url(String url) {
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * <p>The URL of the document. Should be visible to end users. Will be shown as part of answers. Not used for crawling.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "url", nulls = Nulls.SKIP)
        public _FinalStage url(Optional<String> url) {
            this.url = url;
            return this;
        }

        @java.lang.Override
        public KnowledgeDocumentRequest build() {
            return new KnowledgeDocumentRequest(
                    title,
                    url,
                    language,
                    createdAt,
                    updatedAt,
                    author,
                    knowledgeDocumentId,
                    versionId,
                    contentType,
                    content,
                    metadata,
                    additionalProperties);
        }
    }
}
