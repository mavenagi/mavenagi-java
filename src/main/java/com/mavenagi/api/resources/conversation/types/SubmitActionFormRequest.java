/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.conversation.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SubmitActionFormRequest.Builder.class)
public final class SubmitActionFormRequest {
    private final String actionFormId;

    private final Map<String, Object> parameters;

    private final Optional<Map<String, String>> transientData;

    private final Map<String, Object> additionalProperties;

    private SubmitActionFormRequest(
            String actionFormId,
            Map<String, Object> parameters,
            Optional<Map<String, String>> transientData,
            Map<String, Object> additionalProperties) {
        this.actionFormId = actionFormId;
        this.parameters = parameters;
        this.transientData = transientData;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("actionFormId")
    public String getActionFormId() {
        return actionFormId;
    }

    /**
     * @return Map of parameter IDs to values provided by the user. All required action fields must be provided.
     */
    @JsonProperty("parameters")
    public Map<String, Object> getParameters() {
        return parameters;
    }

    /**
     * @return Transient data which the Maven platform will not persist. This data will only be forwarded to actions taken. For example, one may put in user tokens as transient data.
     */
    @JsonProperty("transientData")
    public Optional<Map<String, String>> getTransientData() {
        return transientData;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SubmitActionFormRequest && equalTo((SubmitActionFormRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SubmitActionFormRequest other) {
        return actionFormId.equals(other.actionFormId)
                && parameters.equals(other.parameters)
                && transientData.equals(other.transientData);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.actionFormId, this.parameters, this.transientData);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ActionFormIdStage builder() {
        return new Builder();
    }

    public interface ActionFormIdStage {
        _FinalStage actionFormId(@NotNull String actionFormId);

        Builder from(SubmitActionFormRequest other);
    }

    public interface _FinalStage {
        SubmitActionFormRequest build();

        _FinalStage parameters(Map<String, Object> parameters);

        _FinalStage putAllParameters(Map<String, Object> parameters);

        _FinalStage parameters(String key, Object value);

        _FinalStage transientData(Optional<Map<String, String>> transientData);

        _FinalStage transientData(Map<String, String> transientData);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ActionFormIdStage, _FinalStage {
        private String actionFormId;

        private Optional<Map<String, String>> transientData = Optional.empty();

        private Map<String, Object> parameters = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SubmitActionFormRequest other) {
            actionFormId(other.getActionFormId());
            parameters(other.getParameters());
            transientData(other.getTransientData());
            return this;
        }

        @java.lang.Override
        @JsonSetter("actionFormId")
        public _FinalStage actionFormId(@NotNull String actionFormId) {
            this.actionFormId = Objects.requireNonNull(actionFormId, "actionFormId must not be null");
            return this;
        }

        /**
         * <p>Transient data which the Maven platform will not persist. This data will only be forwarded to actions taken. For example, one may put in user tokens as transient data.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage transientData(Map<String, String> transientData) {
            this.transientData = Optional.ofNullable(transientData);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "transientData", nulls = Nulls.SKIP)
        public _FinalStage transientData(Optional<Map<String, String>> transientData) {
            this.transientData = transientData;
            return this;
        }

        /**
         * <p>Map of parameter IDs to values provided by the user. All required action fields must be provided.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage parameters(String key, Object value) {
            this.parameters.put(key, value);
            return this;
        }

        /**
         * <p>Map of parameter IDs to values provided by the user. All required action fields must be provided.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage putAllParameters(Map<String, Object> parameters) {
            this.parameters.putAll(parameters);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "parameters", nulls = Nulls.SKIP)
        public _FinalStage parameters(Map<String, Object> parameters) {
            this.parameters.clear();
            this.parameters.putAll(parameters);
            return this;
        }

        @java.lang.Override
        public SubmitActionFormRequest build() {
            return new SubmitActionFormRequest(actionFormId, parameters, transientData, additionalProperties);
        }
    }
}
