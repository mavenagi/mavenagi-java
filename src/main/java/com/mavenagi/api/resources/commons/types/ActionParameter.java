/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ActionParameter.Builder.class)
public final class ActionParameter {
    private final String id;

    private final String label;

    private final String description;

    private final boolean required;

    private final Optional<ActionParameterType> type;

    private final Optional<List<ActionEnumOption>> enumOptions;

    private final Optional<String> schema;

    private final Map<String, Object> additionalProperties;

    private ActionParameter(
            String id,
            String label,
            String description,
            boolean required,
            Optional<ActionParameterType> type,
            Optional<List<ActionEnumOption>> enumOptions,
            Optional<String> schema,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.label = label;
        this.description = description;
        this.required = required;
        this.type = type;
        this.enumOptions = enumOptions;
        this.schema = schema;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID field will be used when parameters are supplied to <code>executeAction</code>.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The title of the field that will be shown on action forms.
     */
    @JsonProperty("label")
    public String getLabel() {
        return label;
    }

    /**
     * @return A longer description of the field which will be shown in smaller text near the label on action forms.
     */
    @JsonProperty("description")
    public String getDescription() {
        return description;
    }

    /**
     * @return Whether the field is required for action execution.
     */
    @JsonProperty("required")
    public boolean getRequired() {
        return required;
    }

    /**
     * @return The parameter type. Values provided to <code>executeAction</code> will conform to this type. Defaults to <code>STRING</code>.
     */
    @JsonProperty("type")
    public Optional<ActionParameterType> getType() {
        return type;
    }

    /**
     * @return Restricts the action parameter to only the options in this list. Valid for type <code>STRING</code>, <code>BOOLEAN</code>, and <code>NUMBER</code>. Should not be used when type is <code>SCHEMA</code>.
     */
    @JsonProperty("enumOptions")
    public Optional<List<ActionEnumOption>> getEnumOptions() {
        return enumOptions;
    }

    /**
     * @return JSON schema for validating the parameter value. Only valid when type is <code>SCHEMA</code>.
     */
    @JsonProperty("schema")
    public Optional<String> getSchema() {
        return schema;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ActionParameter && equalTo((ActionParameter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ActionParameter other) {
        return id.equals(other.id)
                && label.equals(other.label)
                && description.equals(other.description)
                && required == other.required
                && type.equals(other.type)
                && enumOptions.equals(other.enumOptions)
                && schema.equals(other.schema);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id, this.label, this.description, this.required, this.type, this.enumOptions, this.schema);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        LabelStage id(@NotNull String id);

        Builder from(ActionParameter other);
    }

    public interface LabelStage {
        DescriptionStage label(@NotNull String label);
    }

    public interface DescriptionStage {
        RequiredStage description(@NotNull String description);
    }

    public interface RequiredStage {
        _FinalStage required(boolean required);
    }

    public interface _FinalStage {
        ActionParameter build();

        _FinalStage type(Optional<ActionParameterType> type);

        _FinalStage type(ActionParameterType type);

        _FinalStage enumOptions(Optional<List<ActionEnumOption>> enumOptions);

        _FinalStage enumOptions(List<ActionEnumOption> enumOptions);

        _FinalStage schema(Optional<String> schema);

        _FinalStage schema(String schema);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, LabelStage, DescriptionStage, RequiredStage, _FinalStage {
        private String id;

        private String label;

        private String description;

        private boolean required;

        private Optional<String> schema = Optional.empty();

        private Optional<List<ActionEnumOption>> enumOptions = Optional.empty();

        private Optional<ActionParameterType> type = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ActionParameter other) {
            id(other.getId());
            label(other.getLabel());
            description(other.getDescription());
            required(other.getRequired());
            type(other.getType());
            enumOptions(other.getEnumOptions());
            schema(other.getSchema());
            return this;
        }

        /**
         * <p>The ID field will be used when parameters are supplied to <code>executeAction</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public LabelStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The title of the field that will be shown on action forms.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("label")
        public DescriptionStage label(@NotNull String label) {
            this.label = Objects.requireNonNull(label, "label must not be null");
            return this;
        }

        /**
         * <p>A longer description of the field which will be shown in smaller text near the label on action forms.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("description")
        public RequiredStage description(@NotNull String description) {
            this.description = Objects.requireNonNull(description, "description must not be null");
            return this;
        }

        /**
         * <p>Whether the field is required for action execution.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("required")
        public _FinalStage required(boolean required) {
            this.required = required;
            return this;
        }

        /**
         * <p>JSON schema for validating the parameter value. Only valid when type is <code>SCHEMA</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage schema(String schema) {
            this.schema = Optional.ofNullable(schema);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "schema", nulls = Nulls.SKIP)
        public _FinalStage schema(Optional<String> schema) {
            this.schema = schema;
            return this;
        }

        /**
         * <p>Restricts the action parameter to only the options in this list. Valid for type <code>STRING</code>, <code>BOOLEAN</code>, and <code>NUMBER</code>. Should not be used when type is <code>SCHEMA</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage enumOptions(List<ActionEnumOption> enumOptions) {
            this.enumOptions = Optional.ofNullable(enumOptions);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "enumOptions", nulls = Nulls.SKIP)
        public _FinalStage enumOptions(Optional<List<ActionEnumOption>> enumOptions) {
            this.enumOptions = enumOptions;
            return this;
        }

        /**
         * <p>The parameter type. Values provided to <code>executeAction</code> will conform to this type. Defaults to <code>STRING</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage type(ActionParameterType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public _FinalStage type(Optional<ActionParameterType> type) {
            this.type = type;
            return this;
        }

        @java.lang.Override
        public ActionParameter build() {
            return new ActionParameter(
                    id, label, description, required, type, enumOptions, schema, additionalProperties);
        }
    }
}
