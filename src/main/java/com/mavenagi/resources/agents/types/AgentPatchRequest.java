/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.agents.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AgentPatchRequest.Builder.class)
public final class AgentPatchRequest {
    private final Optional<String> name;

    private final Optional<AgentEnvironment> environment;

    private final Optional<Set<PiiCategory>> enabledPiiCategories;

    private final Map<String, Object> additionalProperties;

    private AgentPatchRequest(
            Optional<String> name,
            Optional<AgentEnvironment> environment,
            Optional<Set<PiiCategory>> enabledPiiCategories,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.environment = environment;
        this.enabledPiiCategories = enabledPiiCategories;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the agent.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return The environment of the agent.
     */
    @JsonProperty("environment")
    public Optional<AgentEnvironment> getEnvironment() {
        return environment;
    }

    /**
     * @return The PII categories that are enabled for the agent.
     */
    @JsonProperty("enabledPiiCategories")
    public Optional<Set<PiiCategory>> getEnabledPiiCategories() {
        return enabledPiiCategories;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AgentPatchRequest && equalTo((AgentPatchRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AgentPatchRequest other) {
        return name.equals(other.name)
                && environment.equals(other.environment)
                && enabledPiiCategories.equals(other.enabledPiiCategories);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.environment, this.enabledPiiCategories);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<AgentEnvironment> environment = Optional.empty();

        private Optional<Set<PiiCategory>> enabledPiiCategories = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AgentPatchRequest other) {
            name(other.getName());
            environment(other.getEnvironment());
            enabledPiiCategories(other.getEnabledPiiCategories());
            return this;
        }

        /**
         * <p>The name of the agent.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>The environment of the agent.</p>
         */
        @JsonSetter(value = "environment", nulls = Nulls.SKIP)
        public Builder environment(Optional<AgentEnvironment> environment) {
            this.environment = environment;
            return this;
        }

        public Builder environment(AgentEnvironment environment) {
            this.environment = Optional.ofNullable(environment);
            return this;
        }

        /**
         * <p>The PII categories that are enabled for the agent.</p>
         */
        @JsonSetter(value = "enabledPiiCategories", nulls = Nulls.SKIP)
        public Builder enabledPiiCategories(Optional<Set<PiiCategory>> enabledPiiCategories) {
            this.enabledPiiCategories = enabledPiiCategories;
            return this;
        }

        public Builder enabledPiiCategories(Set<PiiCategory> enabledPiiCategories) {
            this.enabledPiiCategories = Optional.ofNullable(enabledPiiCategories);
            return this;
        }

        public AgentPatchRequest build() {
            return new AgentPatchRequest(name, environment, enabledPiiCategories, additionalProperties);
        }
    }
}
