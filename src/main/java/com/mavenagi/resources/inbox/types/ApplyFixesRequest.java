/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.inbox.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ApplyFixesRequest.Builder.class)
public final class ApplyFixesRequest {
    private final String appId;

    private final List<String> fixReferenceIds;

    private final Optional<AddDocumentFixRequest> addDocumentRequest;

    private final Map<String, Object> additionalProperties;

    private ApplyFixesRequest(
            String appId,
            List<String> fixReferenceIds,
            Optional<AddDocumentFixRequest> addDocumentRequest,
            Map<String, Object> additionalProperties) {
        this.appId = appId;
        this.fixReferenceIds = fixReferenceIds;
        this.addDocumentRequest = addDocumentRequest;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The appId of the inbox item and fixes.
     */
    @JsonProperty("appId")
    public String getAppId() {
        return appId;
    }

    /**
     * @return A list of one or more reference IDs of fixes to apply. All must belong to the same inbox item.
     */
    @JsonProperty("fixReferenceIds")
    public List<String> getFixReferenceIds() {
        return fixReferenceIds;
    }

    /**
     * @return Only applies to add document fixes, includes the document content to save.
     */
    @JsonProperty("addDocumentRequest")
    public Optional<AddDocumentFixRequest> getAddDocumentRequest() {
        return addDocumentRequest;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApplyFixesRequest && equalTo((ApplyFixesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApplyFixesRequest other) {
        return appId.equals(other.appId)
                && fixReferenceIds.equals(other.fixReferenceIds)
                && addDocumentRequest.equals(other.addDocumentRequest);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.appId, this.fixReferenceIds, this.addDocumentRequest);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AppIdStage builder() {
        return new Builder();
    }

    public interface AppIdStage {
        /**
         * <p>The appId of the inbox item and fixes.</p>
         */
        _FinalStage appId(@NotNull String appId);

        Builder from(ApplyFixesRequest other);
    }

    public interface _FinalStage {
        ApplyFixesRequest build();

        /**
         * <p>A list of one or more reference IDs of fixes to apply. All must belong to the same inbox item.</p>
         */
        _FinalStage fixReferenceIds(List<String> fixReferenceIds);

        _FinalStage addFixReferenceIds(String fixReferenceIds);

        _FinalStage addAllFixReferenceIds(List<String> fixReferenceIds);

        /**
         * <p>Only applies to add document fixes, includes the document content to save.</p>
         */
        _FinalStage addDocumentRequest(Optional<AddDocumentFixRequest> addDocumentRequest);

        _FinalStage addDocumentRequest(AddDocumentFixRequest addDocumentRequest);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AppIdStage, _FinalStage {
        private String appId;

        private Optional<AddDocumentFixRequest> addDocumentRequest = Optional.empty();

        private List<String> fixReferenceIds = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ApplyFixesRequest other) {
            appId(other.getAppId());
            fixReferenceIds(other.getFixReferenceIds());
            addDocumentRequest(other.getAddDocumentRequest());
            return this;
        }

        /**
         * <p>The appId of the inbox item and fixes.</p>
         * <p>The appId of the inbox item and fixes.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("appId")
        public _FinalStage appId(@NotNull String appId) {
            this.appId = Objects.requireNonNull(appId, "appId must not be null");
            return this;
        }

        /**
         * <p>Only applies to add document fixes, includes the document content to save.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addDocumentRequest(AddDocumentFixRequest addDocumentRequest) {
            this.addDocumentRequest = Optional.ofNullable(addDocumentRequest);
            return this;
        }

        /**
         * <p>Only applies to add document fixes, includes the document content to save.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "addDocumentRequest", nulls = Nulls.SKIP)
        public _FinalStage addDocumentRequest(Optional<AddDocumentFixRequest> addDocumentRequest) {
            this.addDocumentRequest = addDocumentRequest;
            return this;
        }

        /**
         * <p>A list of one or more reference IDs of fixes to apply. All must belong to the same inbox item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllFixReferenceIds(List<String> fixReferenceIds) {
            this.fixReferenceIds.addAll(fixReferenceIds);
            return this;
        }

        /**
         * <p>A list of one or more reference IDs of fixes to apply. All must belong to the same inbox item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addFixReferenceIds(String fixReferenceIds) {
            this.fixReferenceIds.add(fixReferenceIds);
            return this;
        }

        /**
         * <p>A list of one or more reference IDs of fixes to apply. All must belong to the same inbox item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "fixReferenceIds", nulls = Nulls.SKIP)
        public _FinalStage fixReferenceIds(List<String> fixReferenceIds) {
            this.fixReferenceIds.clear();
            this.fixReferenceIds.addAll(fixReferenceIds);
            return this;
        }

        @java.lang.Override
        public ApplyFixesRequest build() {
            return new ApplyFixesRequest(appId, fixReferenceIds, addDocumentRequest, additionalProperties);
        }
    }
}
