/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.events.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PageInfo.Builder.class)
public final class PageInfo {
    private final String pageName;

    private final Optional<String> pageUrl;

    private final Optional<String> pageTitle;

    private final Optional<String> linkUrl;

    private final Optional<String> elementId;

    private final Map<String, Object> additionalProperties;

    private PageInfo(
            String pageName,
            Optional<String> pageUrl,
            Optional<String> pageTitle,
            Optional<String> linkUrl,
            Optional<String> elementId,
            Map<String, Object> additionalProperties) {
        this.pageName = pageName;
        this.pageUrl = pageUrl;
        this.pageTitle = pageTitle;
        this.linkUrl = linkUrl;
        this.elementId = elementId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("pageName")
    public String getPageName() {
        return pageName;
    }

    @JsonProperty("pageUrl")
    public Optional<String> getPageUrl() {
        return pageUrl;
    }

    @JsonProperty("pageTitle")
    public Optional<String> getPageTitle() {
        return pageTitle;
    }

    @JsonProperty("linkUrl")
    public Optional<String> getLinkUrl() {
        return linkUrl;
    }

    @JsonProperty("elementId")
    public Optional<String> getElementId() {
        return elementId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PageInfo && equalTo((PageInfo) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PageInfo other) {
        return pageName.equals(other.pageName)
                && pageUrl.equals(other.pageUrl)
                && pageTitle.equals(other.pageTitle)
                && linkUrl.equals(other.linkUrl)
                && elementId.equals(other.elementId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.pageName, this.pageUrl, this.pageTitle, this.linkUrl, this.elementId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PageNameStage builder() {
        return new Builder();
    }

    public interface PageNameStage {
        _FinalStage pageName(@NotNull String pageName);

        Builder from(PageInfo other);
    }

    public interface _FinalStage {
        PageInfo build();

        _FinalStage pageUrl(Optional<String> pageUrl);

        _FinalStage pageUrl(String pageUrl);

        _FinalStage pageTitle(Optional<String> pageTitle);

        _FinalStage pageTitle(String pageTitle);

        _FinalStage linkUrl(Optional<String> linkUrl);

        _FinalStage linkUrl(String linkUrl);

        _FinalStage elementId(Optional<String> elementId);

        _FinalStage elementId(String elementId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements PageNameStage, _FinalStage {
        private String pageName;

        private Optional<String> elementId = Optional.empty();

        private Optional<String> linkUrl = Optional.empty();

        private Optional<String> pageTitle = Optional.empty();

        private Optional<String> pageUrl = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PageInfo other) {
            pageName(other.getPageName());
            pageUrl(other.getPageUrl());
            pageTitle(other.getPageTitle());
            linkUrl(other.getLinkUrl());
            elementId(other.getElementId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("pageName")
        public _FinalStage pageName(@NotNull String pageName) {
            this.pageName = Objects.requireNonNull(pageName, "pageName must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage elementId(String elementId) {
            this.elementId = Optional.ofNullable(elementId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "elementId", nulls = Nulls.SKIP)
        public _FinalStage elementId(Optional<String> elementId) {
            this.elementId = elementId;
            return this;
        }

        @java.lang.Override
        public _FinalStage linkUrl(String linkUrl) {
            this.linkUrl = Optional.ofNullable(linkUrl);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "linkUrl", nulls = Nulls.SKIP)
        public _FinalStage linkUrl(Optional<String> linkUrl) {
            this.linkUrl = linkUrl;
            return this;
        }

        @java.lang.Override
        public _FinalStage pageTitle(String pageTitle) {
            this.pageTitle = Optional.ofNullable(pageTitle);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "pageTitle", nulls = Nulls.SKIP)
        public _FinalStage pageTitle(Optional<String> pageTitle) {
            this.pageTitle = pageTitle;
            return this;
        }

        @java.lang.Override
        public _FinalStage pageUrl(String pageUrl) {
            this.pageUrl = Optional.ofNullable(pageUrl);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "pageUrl", nulls = Nulls.SKIP)
        public _FinalStage pageUrl(Optional<String> pageUrl) {
            this.pageUrl = pageUrl;
            return this;
        }

        @java.lang.Override
        public PageInfo build() {
            return new PageInfo(pageName, pageUrl, pageTitle, linkUrl, elementId, additionalProperties);
        }
    }
}
