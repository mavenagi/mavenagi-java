/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.knowledge.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.resources.commons.types.EntityId;
import com.mavenagi.resources.commons.types.LlmInclusionStatus;
import com.mavenagi.resources.commons.types.Precondition;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = KnowledgeBaseResponse.Builder.class)
public final class KnowledgeBaseResponse implements IKnowledgeBaseProperties {
    private final String name;

    private final Optional<Precondition> precondition;

    private final EntityId knowledgeBaseId;

    private final KnowledgeBaseType type;

    private final Map<String, String> metadata;

    private final Set<String> tags;

    private final Optional<LlmInclusionStatus> llmInclusionStatus;

    private final KnowledgeBaseRefreshFrequency refreshFrequency;

    private final Optional<EntityId> segmentId;

    private final Map<String, Object> additionalProperties;

    private KnowledgeBaseResponse(
            String name,
            Optional<Precondition> precondition,
            EntityId knowledgeBaseId,
            KnowledgeBaseType type,
            Map<String, String> metadata,
            Set<String> tags,
            Optional<LlmInclusionStatus> llmInclusionStatus,
            KnowledgeBaseRefreshFrequency refreshFrequency,
            Optional<EntityId> segmentId,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.precondition = precondition;
        this.knowledgeBaseId = knowledgeBaseId;
        this.type = type;
        this.metadata = metadata;
        this.tags = tags;
        this.llmInclusionStatus = llmInclusionStatus;
        this.refreshFrequency = refreshFrequency;
        this.segmentId = segmentId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the knowledge base
     */
    @JsonProperty("name")
    @java.lang.Override
    public String getName() {
        return name;
    }

    /**
     * @return The preconditions that must be met for knowledge base be relevant to a conversation. Can be used to restrict knowledge bases to certain types of users.
     */
    @JsonProperty("precondition")
    @java.lang.Override
    public Optional<Precondition> getPrecondition() {
        return precondition;
    }

    /**
     * @return ID that uniquely identifies this knowledge base
     */
    @JsonProperty("knowledgeBaseId")
    public EntityId getKnowledgeBaseId() {
        return knowledgeBaseId;
    }

    /**
     * @return The type of the knowledge base. Can not be changed once created.
     */
    @JsonProperty("type")
    public KnowledgeBaseType getType() {
        return type;
    }

    /**
     * @return Metadata for the knowledge base.
     */
    @JsonProperty("metadata")
    public Map<String, String> getMetadata() {
        return metadata;
    }

    /**
     * @return The tags of the knowledge base.
     */
    @JsonProperty("tags")
    public Set<String> getTags() {
        return tags;
    }

    /**
     * @return Determines whether documents in the knowledge base are sent to the LLM as part of a conversation.
     */
    @JsonProperty("llmInclusionStatus")
    public Optional<LlmInclusionStatus> getLlmInclusionStatus() {
        return llmInclusionStatus;
    }

    /**
     * @return How often the knowledge base should be refreshed.
     */
    @JsonProperty("refreshFrequency")
    public KnowledgeBaseRefreshFrequency getRefreshFrequency() {
        return refreshFrequency;
    }

    /**
     * @return The IDs of the segment that must be matched for the knowledge base to be relevant to a conversation.
     * Segments are replacing inline preconditions - a Knowledge Base may not have both an inline precondition and a segment.
     * Inline precondition support will be removed in a future release.
     */
    @JsonProperty("segmentId")
    public Optional<EntityId> getSegmentId() {
        return segmentId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof KnowledgeBaseResponse && equalTo((KnowledgeBaseResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(KnowledgeBaseResponse other) {
        return name.equals(other.name)
                && precondition.equals(other.precondition)
                && knowledgeBaseId.equals(other.knowledgeBaseId)
                && type.equals(other.type)
                && metadata.equals(other.metadata)
                && tags.equals(other.tags)
                && llmInclusionStatus.equals(other.llmInclusionStatus)
                && refreshFrequency.equals(other.refreshFrequency)
                && segmentId.equals(other.segmentId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.precondition,
                this.knowledgeBaseId,
                this.type,
                this.metadata,
                this.tags,
                this.llmInclusionStatus,
                this.refreshFrequency,
                this.segmentId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        /**
         * <p>The name of the knowledge base</p>
         */
        KnowledgeBaseIdStage name(@NotNull String name);

        Builder from(KnowledgeBaseResponse other);
    }

    public interface KnowledgeBaseIdStage {
        /**
         * <p>ID that uniquely identifies this knowledge base</p>
         */
        TypeStage knowledgeBaseId(@NotNull EntityId knowledgeBaseId);
    }

    public interface TypeStage {
        /**
         * <p>The type of the knowledge base. Can not be changed once created.</p>
         */
        RefreshFrequencyStage type(@NotNull KnowledgeBaseType type);
    }

    public interface RefreshFrequencyStage {
        /**
         * <p>How often the knowledge base should be refreshed.</p>
         */
        _FinalStage refreshFrequency(@NotNull KnowledgeBaseRefreshFrequency refreshFrequency);
    }

    public interface _FinalStage {
        KnowledgeBaseResponse build();

        /**
         * <p>The preconditions that must be met for knowledge base be relevant to a conversation. Can be used to restrict knowledge bases to certain types of users.</p>
         */
        _FinalStage precondition(Optional<Precondition> precondition);

        _FinalStage precondition(Precondition precondition);

        /**
         * <p>Metadata for the knowledge base.</p>
         */
        _FinalStage metadata(Map<String, String> metadata);

        _FinalStage putAllMetadata(Map<String, String> metadata);

        _FinalStage metadata(String key, String value);

        /**
         * <p>The tags of the knowledge base.</p>
         */
        _FinalStage tags(Set<String> tags);

        _FinalStage addTags(String tags);

        _FinalStage addAllTags(Set<String> tags);

        /**
         * <p>Determines whether documents in the knowledge base are sent to the LLM as part of a conversation.</p>
         */
        _FinalStage llmInclusionStatus(Optional<LlmInclusionStatus> llmInclusionStatus);

        _FinalStage llmInclusionStatus(LlmInclusionStatus llmInclusionStatus);

        /**
         * <p>The IDs of the segment that must be matched for the knowledge base to be relevant to a conversation.
         * Segments are replacing inline preconditions - a Knowledge Base may not have both an inline precondition and a segment.
         * Inline precondition support will be removed in a future release.</p>
         */
        _FinalStage segmentId(Optional<EntityId> segmentId);

        _FinalStage segmentId(EntityId segmentId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements NameStage, KnowledgeBaseIdStage, TypeStage, RefreshFrequencyStage, _FinalStage {
        private String name;

        private EntityId knowledgeBaseId;

        private KnowledgeBaseType type;

        private KnowledgeBaseRefreshFrequency refreshFrequency;

        private Optional<EntityId> segmentId = Optional.empty();

        private Optional<LlmInclusionStatus> llmInclusionStatus = Optional.empty();

        private Set<String> tags = new LinkedHashSet<>();

        private Map<String, String> metadata = new LinkedHashMap<>();

        private Optional<Precondition> precondition = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(KnowledgeBaseResponse other) {
            name(other.getName());
            precondition(other.getPrecondition());
            knowledgeBaseId(other.getKnowledgeBaseId());
            type(other.getType());
            metadata(other.getMetadata());
            tags(other.getTags());
            llmInclusionStatus(other.getLlmInclusionStatus());
            refreshFrequency(other.getRefreshFrequency());
            segmentId(other.getSegmentId());
            return this;
        }

        /**
         * <p>The name of the knowledge base</p>
         * <p>The name of the knowledge base</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public KnowledgeBaseIdStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>ID that uniquely identifies this knowledge base</p>
         * <p>ID that uniquely identifies this knowledge base</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("knowledgeBaseId")
        public TypeStage knowledgeBaseId(@NotNull EntityId knowledgeBaseId) {
            this.knowledgeBaseId = Objects.requireNonNull(knowledgeBaseId, "knowledgeBaseId must not be null");
            return this;
        }

        /**
         * <p>The type of the knowledge base. Can not be changed once created.</p>
         * <p>The type of the knowledge base. Can not be changed once created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public RefreshFrequencyStage type(@NotNull KnowledgeBaseType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>How often the knowledge base should be refreshed.</p>
         * <p>How often the knowledge base should be refreshed.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("refreshFrequency")
        public _FinalStage refreshFrequency(@NotNull KnowledgeBaseRefreshFrequency refreshFrequency) {
            this.refreshFrequency = Objects.requireNonNull(refreshFrequency, "refreshFrequency must not be null");
            return this;
        }

        /**
         * <p>The IDs of the segment that must be matched for the knowledge base to be relevant to a conversation.
         * Segments are replacing inline preconditions - a Knowledge Base may not have both an inline precondition and a segment.
         * Inline precondition support will be removed in a future release.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage segmentId(EntityId segmentId) {
            this.segmentId = Optional.ofNullable(segmentId);
            return this;
        }

        /**
         * <p>The IDs of the segment that must be matched for the knowledge base to be relevant to a conversation.
         * Segments are replacing inline preconditions - a Knowledge Base may not have both an inline precondition and a segment.
         * Inline precondition support will be removed in a future release.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "segmentId", nulls = Nulls.SKIP)
        public _FinalStage segmentId(Optional<EntityId> segmentId) {
            this.segmentId = segmentId;
            return this;
        }

        /**
         * <p>Determines whether documents in the knowledge base are sent to the LLM as part of a conversation.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage llmInclusionStatus(LlmInclusionStatus llmInclusionStatus) {
            this.llmInclusionStatus = Optional.ofNullable(llmInclusionStatus);
            return this;
        }

        /**
         * <p>Determines whether documents in the knowledge base are sent to the LLM as part of a conversation.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "llmInclusionStatus", nulls = Nulls.SKIP)
        public _FinalStage llmInclusionStatus(Optional<LlmInclusionStatus> llmInclusionStatus) {
            this.llmInclusionStatus = llmInclusionStatus;
            return this;
        }

        /**
         * <p>The tags of the knowledge base.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllTags(Set<String> tags) {
            this.tags.addAll(tags);
            return this;
        }

        /**
         * <p>The tags of the knowledge base.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addTags(String tags) {
            this.tags.add(tags);
            return this;
        }

        /**
         * <p>The tags of the knowledge base.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public _FinalStage tags(Set<String> tags) {
            this.tags.clear();
            this.tags.addAll(tags);
            return this;
        }

        /**
         * <p>Metadata for the knowledge base.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(String key, String value) {
            this.metadata.put(key, value);
            return this;
        }

        /**
         * <p>Metadata for the knowledge base.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage putAllMetadata(Map<String, String> metadata) {
            this.metadata.putAll(metadata);
            return this;
        }

        /**
         * <p>Metadata for the knowledge base.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Map<String, String> metadata) {
            this.metadata.clear();
            this.metadata.putAll(metadata);
            return this;
        }

        /**
         * <p>The preconditions that must be met for knowledge base be relevant to a conversation. Can be used to restrict knowledge bases to certain types of users.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage precondition(Precondition precondition) {
            this.precondition = Optional.ofNullable(precondition);
            return this;
        }

        /**
         * <p>The preconditions that must be met for knowledge base be relevant to a conversation. Can be used to restrict knowledge bases to certain types of users.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "precondition", nulls = Nulls.SKIP)
        public _FinalStage precondition(Optional<Precondition> precondition) {
            this.precondition = precondition;
            return this;
        }

        @java.lang.Override
        public KnowledgeBaseResponse build() {
            return new KnowledgeBaseResponse(
                    name,
                    precondition,
                    knowledgeBaseId,
                    type,
                    metadata,
                    tags,
                    llmInclusionStatus,
                    refreshFrequency,
                    segmentId,
                    additionalProperties);
        }
    }
}
