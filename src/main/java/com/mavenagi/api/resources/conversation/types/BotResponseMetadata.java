/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.conversation.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BotResponseMetadata.Builder.class)
public final class BotResponseMetadata implements IBotResponseMetadata {
    private final List<String> followupQuestions;

    private final List<Source> sources;

    private final Optional<String> language;

    private final Map<String, Object> additionalProperties;

    private BotResponseMetadata(
            List<String> followupQuestions,
            List<Source> sources,
            Optional<String> language,
            Map<String, Object> additionalProperties) {
        this.followupQuestions = followupQuestions;
        this.sources = sources;
        this.language = language;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("followupQuestions")
    @java.lang.Override
    public List<String> getFollowupQuestions() {
        return followupQuestions;
    }

    @JsonProperty("sources")
    @java.lang.Override
    public List<Source> getSources() {
        return sources;
    }

    /**
     * @return The language of the message in ISO 639-1 code format
     */
    @JsonProperty("language")
    @java.lang.Override
    public Optional<String> getLanguage() {
        return language;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BotResponseMetadata && equalTo((BotResponseMetadata) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BotResponseMetadata other) {
        return followupQuestions.equals(other.followupQuestions)
                && sources.equals(other.sources)
                && language.equals(other.language);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.followupQuestions, this.sources, this.language);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<String> followupQuestions = new ArrayList<>();

        private List<Source> sources = new ArrayList<>();

        private Optional<String> language = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BotResponseMetadata other) {
            followupQuestions(other.getFollowupQuestions());
            sources(other.getSources());
            language(other.getLanguage());
            return this;
        }

        @JsonSetter(value = "followupQuestions", nulls = Nulls.SKIP)
        public Builder followupQuestions(List<String> followupQuestions) {
            this.followupQuestions.clear();
            this.followupQuestions.addAll(followupQuestions);
            return this;
        }

        public Builder addFollowupQuestions(String followupQuestions) {
            this.followupQuestions.add(followupQuestions);
            return this;
        }

        public Builder addAllFollowupQuestions(List<String> followupQuestions) {
            this.followupQuestions.addAll(followupQuestions);
            return this;
        }

        @JsonSetter(value = "sources", nulls = Nulls.SKIP)
        public Builder sources(List<Source> sources) {
            this.sources.clear();
            this.sources.addAll(sources);
            return this;
        }

        public Builder addSources(Source sources) {
            this.sources.add(sources);
            return this;
        }

        public Builder addAllSources(List<Source> sources) {
            this.sources.addAll(sources);
            return this;
        }

        @JsonSetter(value = "language", nulls = Nulls.SKIP)
        public Builder language(Optional<String> language) {
            this.language = language;
            return this;
        }

        public Builder language(String language) {
            this.language = Optional.ofNullable(language);
            return this;
        }

        public BotResponseMetadata build() {
            return new BotResponseMetadata(followupQuestions, sources, language, additionalProperties);
        }
    }
}
