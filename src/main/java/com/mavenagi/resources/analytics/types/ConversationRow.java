/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.analytics.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.resources.conversation.types.ConversationField;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ConversationRow.Builder.class)
public final class ConversationRow implements IRowBase {
    private final Map<String, CellData> data;

    private final Map<ConversationField, FieldValue> identifier;

    private final Map<String, Object> additionalProperties;

    private ConversationRow(
            Map<String, CellData> data,
            Map<ConversationField, FieldValue> identifier,
            Map<String, Object> additionalProperties) {
        this.data = data;
        this.identifier = identifier;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The actual row data, where keys represent column headers and values contain the respective metric results.
     */
    @JsonProperty("data")
    @java.lang.Override
    public Map<String, CellData> getData() {
        return data;
    }

    /**
     * @return A unique identifier for each row, consisting of field names mapped to their respective values.
     * This includes time groupings and any specified field groupings.
     */
    @JsonProperty("identifier")
    public Map<ConversationField, FieldValue> getIdentifier() {
        return identifier;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ConversationRow && equalTo((ConversationRow) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ConversationRow other) {
        return data.equals(other.data) && identifier.equals(other.identifier);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.data, this.identifier);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Map<String, CellData> data = new LinkedHashMap<>();

        private Map<ConversationField, FieldValue> identifier = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ConversationRow other) {
            data(other.getData());
            identifier(other.getIdentifier());
            return this;
        }

        /**
         * <p>The actual row data, where keys represent column headers and values contain the respective metric results.</p>
         */
        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public Builder data(Map<String, CellData> data) {
            this.data.clear();
            this.data.putAll(data);
            return this;
        }

        public Builder putAllData(Map<String, CellData> data) {
            this.data.putAll(data);
            return this;
        }

        public Builder data(String key, CellData value) {
            this.data.put(key, value);
            return this;
        }

        /**
         * <p>A unique identifier for each row, consisting of field names mapped to their respective values.
         * This includes time groupings and any specified field groupings.</p>
         */
        @JsonSetter(value = "identifier", nulls = Nulls.SKIP)
        public Builder identifier(Map<ConversationField, FieldValue> identifier) {
            this.identifier.clear();
            this.identifier.putAll(identifier);
            return this;
        }

        public Builder putAllIdentifier(Map<ConversationField, FieldValue> identifier) {
            this.identifier.putAll(identifier);
            return this;
        }

        public Builder identifier(ConversationField key, FieldValue value) {
            this.identifier.put(key, value);
            return this;
        }

        public ConversationRow build() {
            return new ConversationRow(data, identifier, additionalProperties);
        }
    }
}
