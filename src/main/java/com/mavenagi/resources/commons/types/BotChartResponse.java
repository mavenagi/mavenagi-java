/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BotChartResponse.Builder.class)
public final class BotChartResponse implements IBotChartResponse {
    private final String label;

    private final ChartSpecSchema specSchema;

    private final String spec;

    private final Map<String, Object> additionalProperties;

    private BotChartResponse(
            String label, ChartSpecSchema specSchema, String spec, Map<String, Object> additionalProperties) {
        this.label = label;
        this.specSchema = specSchema;
        this.spec = spec;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The label of the chart
     */
    @JsonProperty("label")
    @java.lang.Override
    public String getLabel() {
        return label;
    }

    @JsonProperty("specSchema")
    @java.lang.Override
    public ChartSpecSchema getSpecSchema() {
        return specSchema;
    }

    /**
     * @return The spec string for the chart. For HIGHCHARTS_TS charts, the spec is the json object that represents the chart options.
     */
    @JsonProperty("spec")
    @java.lang.Override
    public String getSpec() {
        return spec;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BotChartResponse && equalTo((BotChartResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BotChartResponse other) {
        return label.equals(other.label) && specSchema.equals(other.specSchema) && spec.equals(other.spec);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.label, this.specSchema, this.spec);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LabelStage builder() {
        return new Builder();
    }

    public interface LabelStage {
        /**
         * <p>The label of the chart</p>
         */
        SpecSchemaStage label(@NotNull String label);

        Builder from(BotChartResponse other);
    }

    public interface SpecSchemaStage {
        SpecStage specSchema(@NotNull ChartSpecSchema specSchema);
    }

    public interface SpecStage {
        /**
         * <p>The spec string for the chart. For HIGHCHARTS_TS charts, the spec is the json object that represents the chart options.</p>
         */
        _FinalStage spec(@NotNull String spec);
    }

    public interface _FinalStage {
        BotChartResponse build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements LabelStage, SpecSchemaStage, SpecStage, _FinalStage {
        private String label;

        private ChartSpecSchema specSchema;

        private String spec;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BotChartResponse other) {
            label(other.getLabel());
            specSchema(other.getSpecSchema());
            spec(other.getSpec());
            return this;
        }

        /**
         * <p>The label of the chart</p>
         * <p>The label of the chart</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("label")
        public SpecSchemaStage label(@NotNull String label) {
            this.label = Objects.requireNonNull(label, "label must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("specSchema")
        public SpecStage specSchema(@NotNull ChartSpecSchema specSchema) {
            this.specSchema = Objects.requireNonNull(specSchema, "specSchema must not be null");
            return this;
        }

        /**
         * <p>The spec string for the chart. For HIGHCHARTS_TS charts, the spec is the json object that represents the chart options.</p>
         * <p>The spec string for the chart. For HIGHCHARTS_TS charts, the spec is the json object that represents the chart options.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("spec")
        public _FinalStage spec(@NotNull String spec) {
            this.spec = Objects.requireNonNull(spec, "spec must not be null");
            return this;
        }

        @java.lang.Override
        public BotChartResponse build() {
            return new BotChartResponse(label, specSchema, spec, additionalProperties);
        }
    }
}
