/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.segments.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.resources.commons.types.EntityId;
import com.mavenagi.resources.commons.types.Precondition;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SegmentResponse.Builder.class)
public final class SegmentResponse implements ISegmentBase {
    private final String name;

    private final Precondition precondition;

    private final EntityId segmentId;

    private final SegmentStatus status;

    private final Map<String, Object> additionalProperties;

    private SegmentResponse(
            String name,
            Precondition precondition,
            EntityId segmentId,
            SegmentStatus status,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.precondition = precondition;
        this.segmentId = segmentId;
        this.status = status;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the segment.
     */
    @JsonProperty("name")
    @java.lang.Override
    public String getName() {
        return name;
    }

    /**
     * @return The precondition that must be met for a conversation message to be included in the segment.
     */
    @JsonProperty("precondition")
    @java.lang.Override
    public Precondition getPrecondition() {
        return precondition;
    }

    /**
     * @return ID that uniquely identifies this segment
     */
    @JsonProperty("segmentId")
    public EntityId getSegmentId() {
        return segmentId;
    }

    /**
     * @return Whether or not the segment is in active use. To preserve historical data, segments can not be deleted.
     * <p>Only active segments will be evaluated for matching user questions.</p>
     */
    @JsonProperty("status")
    public SegmentStatus getStatus() {
        return status;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SegmentResponse && equalTo((SegmentResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SegmentResponse other) {
        return name.equals(other.name)
                && precondition.equals(other.precondition)
                && segmentId.equals(other.segmentId)
                && status.equals(other.status);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.precondition, this.segmentId, this.status);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        /**
         * <p>The name of the segment.</p>
         */
        PreconditionStage name(@NotNull String name);

        Builder from(SegmentResponse other);
    }

    public interface PreconditionStage {
        /**
         * <p>The precondition that must be met for a conversation message to be included in the segment.</p>
         */
        SegmentIdStage precondition(@NotNull Precondition precondition);
    }

    public interface SegmentIdStage {
        /**
         * <p>ID that uniquely identifies this segment</p>
         */
        StatusStage segmentId(@NotNull EntityId segmentId);
    }

    public interface StatusStage {
        /**
         * <p>Whether or not the segment is in active use. To preserve historical data, segments can not be deleted.</p>
         * <p>Only active segments will be evaluated for matching user questions.</p>
         */
        _FinalStage status(@NotNull SegmentStatus status);
    }

    public interface _FinalStage {
        SegmentResponse build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements NameStage, PreconditionStage, SegmentIdStage, StatusStage, _FinalStage {
        private String name;

        private Precondition precondition;

        private EntityId segmentId;

        private SegmentStatus status;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SegmentResponse other) {
            name(other.getName());
            precondition(other.getPrecondition());
            segmentId(other.getSegmentId());
            status(other.getStatus());
            return this;
        }

        /**
         * <p>The name of the segment.</p>
         * <p>The name of the segment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public PreconditionStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>The precondition that must be met for a conversation message to be included in the segment.</p>
         * <p>The precondition that must be met for a conversation message to be included in the segment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("precondition")
        public SegmentIdStage precondition(@NotNull Precondition precondition) {
            this.precondition = Objects.requireNonNull(precondition, "precondition must not be null");
            return this;
        }

        /**
         * <p>ID that uniquely identifies this segment</p>
         * <p>ID that uniquely identifies this segment</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("segmentId")
        public StatusStage segmentId(@NotNull EntityId segmentId) {
            this.segmentId = Objects.requireNonNull(segmentId, "segmentId must not be null");
            return this;
        }

        /**
         * <p>Whether or not the segment is in active use. To preserve historical data, segments can not be deleted.</p>
         * <p>Only active segments will be evaluated for matching user questions.</p>
         * <p>Whether or not the segment is in active use. To preserve historical data, segments can not be deleted.</p>
         * <p>Only active segments will be evaluated for matching user questions.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public _FinalStage status(@NotNull SegmentStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        @java.lang.Override
        public SegmentResponse build() {
            return new SegmentResponse(name, precondition, segmentId, status, additionalProperties);
        }
    }
}
