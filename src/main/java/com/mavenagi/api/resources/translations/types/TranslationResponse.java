/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.translations.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TranslationResponse.Builder.class)
public final class TranslationResponse {
    private final String translatedText;

    private final Map<String, Object> additionalProperties;

    private TranslationResponse(String translatedText, Map<String, Object> additionalProperties) {
        this.translatedText = translatedText;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The translated text
     */
    @JsonProperty("translatedText")
    public String getTranslatedText() {
        return translatedText;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TranslationResponse && equalTo((TranslationResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TranslationResponse other) {
        return translatedText.equals(other.translatedText);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.translatedText);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TranslatedTextStage builder() {
        return new Builder();
    }

    public interface TranslatedTextStage {
        _FinalStage translatedText(@NotNull String translatedText);

        Builder from(TranslationResponse other);
    }

    public interface _FinalStage {
        TranslationResponse build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TranslatedTextStage, _FinalStage {
        private String translatedText;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TranslationResponse other) {
            translatedText(other.getTranslatedText());
            return this;
        }

        /**
         * <p>The translated text</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("translatedText")
        public _FinalStage translatedText(@NotNull String translatedText) {
            this.translatedText = Objects.requireNonNull(translatedText, "translatedText must not be null");
            return this;
        }

        @java.lang.Override
        public TranslationResponse build() {
            return new TranslationResponse(translatedText, additionalProperties);
        }
    }
}
