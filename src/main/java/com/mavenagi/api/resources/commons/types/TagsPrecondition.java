/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TagsPrecondition.Builder.class)
public final class TagsPrecondition implements IPreconditionBase {
    private final Optional<PreconditionOperator> operator;

    private final Set<String> tags;

    private final Map<String, Object> additionalProperties;

    private TagsPrecondition(
            Optional<PreconditionOperator> operator, Set<String> tags, Map<String, Object> additionalProperties) {
        this.operator = operator;
        this.tags = tags;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Operator to apply to this precondition
     */
    @JsonProperty("operator")
    @java.lang.Override
    public Optional<PreconditionOperator> getOperator() {
        return operator;
    }

    /**
     * @return The tags that must be present in the conversation context for the precondition to be met
     */
    @JsonProperty("tags")
    public Set<String> getTags() {
        return tags;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TagsPrecondition && equalTo((TagsPrecondition) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TagsPrecondition other) {
        return operator.equals(other.operator) && tags.equals(other.tags);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.operator, this.tags);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<PreconditionOperator> operator = Optional.empty();

        private Set<String> tags = new LinkedHashSet<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TagsPrecondition other) {
            operator(other.getOperator());
            tags(other.getTags());
            return this;
        }

        @JsonSetter(value = "operator", nulls = Nulls.SKIP)
        public Builder operator(Optional<PreconditionOperator> operator) {
            this.operator = operator;
            return this;
        }

        public Builder operator(PreconditionOperator operator) {
            this.operator = Optional.ofNullable(operator);
            return this;
        }

        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public Builder tags(Set<String> tags) {
            this.tags.clear();
            this.tags.addAll(tags);
            return this;
        }

        public Builder addTags(String tags) {
            this.tags.add(tags);
            return this;
        }

        public Builder addAllTags(Set<String> tags) {
            this.tags.addAll(tags);
            return this;
        }

        public TagsPrecondition build() {
            return new TagsPrecondition(operator, tags, additionalProperties);
        }
    }
}
