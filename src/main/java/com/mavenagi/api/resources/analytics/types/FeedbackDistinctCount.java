/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.analytics.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import com.mavenagi.api.resources.conversation.types.FeedbackField;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FeedbackDistinctCount.Builder.class)
public final class FeedbackDistinctCount {
    private final FeedbackField targetField;

    private final Map<String, Object> additionalProperties;

    private FeedbackDistinctCount(FeedbackField targetField, Map<String, Object> additionalProperties) {
        this.targetField = targetField;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return All the distinct values of this field will be counted.
     */
    @JsonProperty("targetField")
    public FeedbackField getTargetField() {
        return targetField;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FeedbackDistinctCount && equalTo((FeedbackDistinctCount) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FeedbackDistinctCount other) {
        return targetField.equals(other.targetField);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.targetField);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TargetFieldStage builder() {
        return new Builder();
    }

    public interface TargetFieldStage {
        _FinalStage targetField(@NotNull FeedbackField targetField);

        Builder from(FeedbackDistinctCount other);
    }

    public interface _FinalStage {
        FeedbackDistinctCount build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TargetFieldStage, _FinalStage {
        private FeedbackField targetField;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(FeedbackDistinctCount other) {
            targetField(other.getTargetField());
            return this;
        }

        /**
         * <p>All the distinct values of this field will be counted.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("targetField")
        public _FinalStage targetField(@NotNull FeedbackField targetField) {
            this.targetField = Objects.requireNonNull(targetField, "targetField must not be null");
            return this;
        }

        @java.lang.Override
        public FeedbackDistinctCount build() {
            return new FeedbackDistinctCount(targetField, additionalProperties);
        }
    }
}
