/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.conversation.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import com.mavenagi.api.resources.commons.types.ActionParameterType;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ActionFormField.Builder.class)
public final class ActionFormField {
    private final String id;

    private final String label;

    private final String description;

    private final boolean required;

    private final Optional<Object> suggestion;

    private final ActionParameterType type;

    private final Map<String, Object> additionalProperties;

    private ActionFormField(
            String id,
            String label,
            String description,
            boolean required,
            Optional<Object> suggestion,
            ActionParameterType type,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.label = label;
        this.description = description;
        this.required = required;
        this.suggestion = suggestion;
        this.type = type;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("label")
    public String getLabel() {
        return label;
    }

    @JsonProperty("description")
    public String getDescription() {
        return description;
    }

    @JsonProperty("required")
    public boolean getRequired() {
        return required;
    }

    @JsonProperty("suggestion")
    public Optional<Object> getSuggestion() {
        return suggestion;
    }

    @JsonProperty("type")
    public ActionParameterType getType() {
        return type;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ActionFormField && equalTo((ActionFormField) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ActionFormField other) {
        return id.equals(other.id)
                && label.equals(other.label)
                && description.equals(other.description)
                && required == other.required
                && suggestion.equals(other.suggestion)
                && type.equals(other.type);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.label, this.description, this.required, this.suggestion, this.type);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        LabelStage id(@NotNull String id);

        Builder from(ActionFormField other);
    }

    public interface LabelStage {
        DescriptionStage label(@NotNull String label);
    }

    public interface DescriptionStage {
        RequiredStage description(@NotNull String description);
    }

    public interface RequiredStage {
        TypeStage required(boolean required);
    }

    public interface TypeStage {
        _FinalStage type(@NotNull ActionParameterType type);
    }

    public interface _FinalStage {
        ActionFormField build();

        _FinalStage suggestion(Optional<Object> suggestion);

        _FinalStage suggestion(Object suggestion);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage, LabelStage, DescriptionStage, RequiredStage, TypeStage, _FinalStage {
        private String id;

        private String label;

        private String description;

        private boolean required;

        private ActionParameterType type;

        private Optional<Object> suggestion = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ActionFormField other) {
            id(other.getId());
            label(other.getLabel());
            description(other.getDescription());
            required(other.getRequired());
            suggestion(other.getSuggestion());
            type(other.getType());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public LabelStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("label")
        public DescriptionStage label(@NotNull String label) {
            this.label = Objects.requireNonNull(label, "label must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("description")
        public RequiredStage description(@NotNull String description) {
            this.description = Objects.requireNonNull(description, "description must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("required")
        public TypeStage required(boolean required) {
            this.required = required;
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(@NotNull ActionParameterType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage suggestion(Object suggestion) {
            this.suggestion = Optional.ofNullable(suggestion);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "suggestion", nulls = Nulls.SKIP)
        public _FinalStage suggestion(Optional<Object> suggestion) {
            this.suggestion = suggestion;
            return this;
        }

        @java.lang.Override
        public ActionFormField build() {
            return new ActionFormField(id, label, description, required, suggestion, type, additionalProperties);
        }
    }
}
