/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PreconditionGroup.Builder.class)
public final class PreconditionGroup {
    private final PreconditionGroupOperator operator;

    private final List<Precondition> preconditions;

    private final Map<String, Object> additionalProperties;

    private PreconditionGroup(
            PreconditionGroupOperator operator,
            List<Precondition> preconditions,
            Map<String, Object> additionalProperties) {
        this.operator = operator;
        this.preconditions = preconditions;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("operator")
    public PreconditionGroupOperator getOperator() {
        return operator;
    }

    @JsonProperty("preconditions")
    public List<Precondition> getPreconditions() {
        return preconditions;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PreconditionGroup && equalTo((PreconditionGroup) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PreconditionGroup other) {
        return operator.equals(other.operator) && preconditions.equals(other.preconditions);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.operator, this.preconditions);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static OperatorStage builder() {
        return new Builder();
    }

    public interface OperatorStage {
        _FinalStage operator(@NotNull PreconditionGroupOperator operator);

        Builder from(PreconditionGroup other);
    }

    public interface _FinalStage {
        PreconditionGroup build();

        _FinalStage preconditions(List<Precondition> preconditions);

        _FinalStage addPreconditions(Precondition preconditions);

        _FinalStage addAllPreconditions(List<Precondition> preconditions);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements OperatorStage, _FinalStage {
        private PreconditionGroupOperator operator;

        private List<Precondition> preconditions = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PreconditionGroup other) {
            operator(other.getOperator());
            preconditions(other.getPreconditions());
            return this;
        }

        @java.lang.Override
        @JsonSetter("operator")
        public _FinalStage operator(@NotNull PreconditionGroupOperator operator) {
            this.operator = Objects.requireNonNull(operator, "operator must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllPreconditions(List<Precondition> preconditions) {
            this.preconditions.addAll(preconditions);
            return this;
        }

        @java.lang.Override
        public _FinalStage addPreconditions(Precondition preconditions) {
            this.preconditions.add(preconditions);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "preconditions", nulls = Nulls.SKIP)
        public _FinalStage preconditions(List<Precondition> preconditions) {
            this.preconditions.clear();
            this.preconditions.addAll(preconditions);
            return this;
        }

        @java.lang.Override
        public PreconditionGroup build() {
            return new PreconditionGroup(operator, preconditions, additionalProperties);
        }
    }
}
