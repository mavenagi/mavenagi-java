/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.knowledge.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = KnowledgeDocumentFilter.Builder.class)
public final class KnowledgeDocumentFilter {
    private final Optional<String> search;

    private final Optional<String> title;

    private final Optional<OffsetDateTime> createdAfter;

    private final Optional<OffsetDateTime> createdBefore;

    private final Map<String, Object> additionalProperties;

    private KnowledgeDocumentFilter(
            Optional<String> search,
            Optional<String> title,
            Optional<OffsetDateTime> createdAfter,
            Optional<OffsetDateTime> createdBefore,
            Map<String, Object> additionalProperties) {
        this.search = search;
        this.title = title;
        this.createdAfter = createdAfter;
        this.createdBefore = createdBefore;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Full-text search query for matching knowledge documents by content.
     * When you search with this parameter, you're performing a full-text search across the knowledge document title and metadata.
     * <p>This field also supports a syntax for advanced filtering the <code>metadata</code> field.</p>
     * <p>Metadata examples:</p>
     * <ul>
     * <li><code>metadata:myvalue</code> - matches knowledge documents with any metadata field set to <code>myvalue</code></li>
     * <li><code>metadata.mykey:myvalue</code> - matches knowledge documents with a metadata field <code>mykey</code> set to <code>myvalue</code></li>
     * <li><code>metadata.mykey:myvalue OR anothervalue</code> - matches knowledge documents with a metadata field <code>mykey</code> set to <code>myvalue</code> or <code>anothervalue</code></li>
     * <li><code>metadata.mykey:*</code> - matches knowledge documents with a metadata field <code>mykey</code></li>
     * <li><code>-metadata:myvalue</code> - matches knowledge documents that do not have any metadata field set to <code>myvalue</code></li>
     * <li><code>_exists_:metadata</code> - matches knowledge documents that have any metadata field set</li>
     * </ul>
     */
    @JsonProperty("search")
    public Optional<String> getSearch() {
        return search;
    }

    /**
     * @return Filter by title
     */
    @JsonProperty("title")
    public Optional<String> getTitle() {
        return title;
    }

    /**
     * @return Filter knowledge documents created on or after this timestamp
     */
    @JsonProperty("createdAfter")
    public Optional<OffsetDateTime> getCreatedAfter() {
        return createdAfter;
    }

    /**
     * @return Filter knowledge documents created on or before this timestamp
     */
    @JsonProperty("createdBefore")
    public Optional<OffsetDateTime> getCreatedBefore() {
        return createdBefore;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof KnowledgeDocumentFilter && equalTo((KnowledgeDocumentFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(KnowledgeDocumentFilter other) {
        return search.equals(other.search)
                && title.equals(other.title)
                && createdAfter.equals(other.createdAfter)
                && createdBefore.equals(other.createdBefore);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.search, this.title, this.createdAfter, this.createdBefore);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> search = Optional.empty();

        private Optional<String> title = Optional.empty();

        private Optional<OffsetDateTime> createdAfter = Optional.empty();

        private Optional<OffsetDateTime> createdBefore = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(KnowledgeDocumentFilter other) {
            search(other.getSearch());
            title(other.getTitle());
            createdAfter(other.getCreatedAfter());
            createdBefore(other.getCreatedBefore());
            return this;
        }

        /**
         * <p>Full-text search query for matching knowledge documents by content.
         * When you search with this parameter, you're performing a full-text search across the knowledge document title and metadata.</p>
         * <p>This field also supports a syntax for advanced filtering the <code>metadata</code> field.</p>
         * <p>Metadata examples:</p>
         * <ul>
         * <li><code>metadata:myvalue</code> - matches knowledge documents with any metadata field set to <code>myvalue</code></li>
         * <li><code>metadata.mykey:myvalue</code> - matches knowledge documents with a metadata field <code>mykey</code> set to <code>myvalue</code></li>
         * <li><code>metadata.mykey:myvalue OR anothervalue</code> - matches knowledge documents with a metadata field <code>mykey</code> set to <code>myvalue</code> or <code>anothervalue</code></li>
         * <li><code>metadata.mykey:*</code> - matches knowledge documents with a metadata field <code>mykey</code></li>
         * <li><code>-metadata:myvalue</code> - matches knowledge documents that do not have any metadata field set to <code>myvalue</code></li>
         * <li><code>_exists_:metadata</code> - matches knowledge documents that have any metadata field set</li>
         * </ul>
         */
        @JsonSetter(value = "search", nulls = Nulls.SKIP)
        public Builder search(Optional<String> search) {
            this.search = search;
            return this;
        }

        public Builder search(String search) {
            this.search = Optional.ofNullable(search);
            return this;
        }

        /**
         * <p>Filter by title</p>
         */
        @JsonSetter(value = "title", nulls = Nulls.SKIP)
        public Builder title(Optional<String> title) {
            this.title = title;
            return this;
        }

        public Builder title(String title) {
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * <p>Filter knowledge documents created on or after this timestamp</p>
         */
        @JsonSetter(value = "createdAfter", nulls = Nulls.SKIP)
        public Builder createdAfter(Optional<OffsetDateTime> createdAfter) {
            this.createdAfter = createdAfter;
            return this;
        }

        public Builder createdAfter(OffsetDateTime createdAfter) {
            this.createdAfter = Optional.ofNullable(createdAfter);
            return this;
        }

        /**
         * <p>Filter knowledge documents created on or before this timestamp</p>
         */
        @JsonSetter(value = "createdBefore", nulls = Nulls.SKIP)
        public Builder createdBefore(Optional<OffsetDateTime> createdBefore) {
            this.createdBefore = createdBefore;
            return this;
        }

        public Builder createdBefore(OffsetDateTime createdBefore) {
            this.createdBefore = Optional.ofNullable(createdBefore);
            return this;
        }

        public KnowledgeDocumentFilter build() {
            return new KnowledgeDocumentFilter(search, title, createdAfter, createdBefore, additionalProperties);
        }
    }
}
