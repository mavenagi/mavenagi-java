/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BotLogicKnowledgeItem.Builder.class)
public final class BotLogicKnowledgeItem {
    private final List<BotLogicKnowledgeDetail> knowledgeReviewed;

    private final List<BotLogicKnowledgeDetail> knowledgeUtilized;

    private final Map<String, Object> additionalProperties;

    private BotLogicKnowledgeItem(
            List<BotLogicKnowledgeDetail> knowledgeReviewed,
            List<BotLogicKnowledgeDetail> knowledgeUtilized,
            Map<String, Object> additionalProperties) {
        this.knowledgeReviewed = knowledgeReviewed;
        this.knowledgeUtilized = knowledgeUtilized;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("knowledgeReviewed")
    public List<BotLogicKnowledgeDetail> getKnowledgeReviewed() {
        return knowledgeReviewed;
    }

    @JsonProperty("knowledgeUtilized")
    public List<BotLogicKnowledgeDetail> getKnowledgeUtilized() {
        return knowledgeUtilized;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BotLogicKnowledgeItem && equalTo((BotLogicKnowledgeItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BotLogicKnowledgeItem other) {
        return knowledgeReviewed.equals(other.knowledgeReviewed) && knowledgeUtilized.equals(other.knowledgeUtilized);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.knowledgeReviewed, this.knowledgeUtilized);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<BotLogicKnowledgeDetail> knowledgeReviewed = new ArrayList<>();

        private List<BotLogicKnowledgeDetail> knowledgeUtilized = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BotLogicKnowledgeItem other) {
            knowledgeReviewed(other.getKnowledgeReviewed());
            knowledgeUtilized(other.getKnowledgeUtilized());
            return this;
        }

        @JsonSetter(value = "knowledgeReviewed", nulls = Nulls.SKIP)
        public Builder knowledgeReviewed(List<BotLogicKnowledgeDetail> knowledgeReviewed) {
            this.knowledgeReviewed.clear();
            this.knowledgeReviewed.addAll(knowledgeReviewed);
            return this;
        }

        public Builder addKnowledgeReviewed(BotLogicKnowledgeDetail knowledgeReviewed) {
            this.knowledgeReviewed.add(knowledgeReviewed);
            return this;
        }

        public Builder addAllKnowledgeReviewed(List<BotLogicKnowledgeDetail> knowledgeReviewed) {
            this.knowledgeReviewed.addAll(knowledgeReviewed);
            return this;
        }

        @JsonSetter(value = "knowledgeUtilized", nulls = Nulls.SKIP)
        public Builder knowledgeUtilized(List<BotLogicKnowledgeDetail> knowledgeUtilized) {
            this.knowledgeUtilized.clear();
            this.knowledgeUtilized.addAll(knowledgeUtilized);
            return this;
        }

        public Builder addKnowledgeUtilized(BotLogicKnowledgeDetail knowledgeUtilized) {
            this.knowledgeUtilized.add(knowledgeUtilized);
            return this;
        }

        public Builder addAllKnowledgeUtilized(List<BotLogicKnowledgeDetail> knowledgeUtilized) {
            this.knowledgeUtilized.addAll(knowledgeUtilized);
            return this;
        }

        public BotLogicKnowledgeItem build() {
            return new BotLogicKnowledgeItem(knowledgeReviewed, knowledgeUtilized, additionalProperties);
        }
    }
}
