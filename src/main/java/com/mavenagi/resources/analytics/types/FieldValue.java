/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.analytics.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import com.mavenagi.resources.commons.types.EntityIdFilter;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public final class FieldValue {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private FieldValue(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static FieldValue dateTime(OffsetDateTime value) {
        return new FieldValue(new DateTimeValue(value));
    }

    public static FieldValue string(String value) {
        return new FieldValue(new StringValue(value));
    }

    public static FieldValue double_(double value) {
        return new FieldValue(new DoubleValue(value));
    }

    public static FieldValue long_(long value) {
        return new FieldValue(new LongValue(value));
    }

    public static FieldValue range(Range value) {
        return new FieldValue(new RangeValue(value));
    }

    public static FieldValue boolean_(boolean value) {
        return new FieldValue(new BooleanValue(value));
    }

    public static FieldValue entityId(EntityIdFilter value) {
        return new FieldValue(new EntityIdValue(value));
    }

    public boolean isDateTime() {
        return value instanceof DateTimeValue;
    }

    public boolean isString() {
        return value instanceof StringValue;
    }

    public boolean isDouble() {
        return value instanceof DoubleValue;
    }

    public boolean isLong() {
        return value instanceof LongValue;
    }

    public boolean isRange() {
        return value instanceof RangeValue;
    }

    public boolean isBoolean() {
        return value instanceof BooleanValue;
    }

    public boolean isEntityId() {
        return value instanceof EntityIdValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<OffsetDateTime> getDateTime() {
        if (isDateTime()) {
            return Optional.of(((DateTimeValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<String> getString() {
        if (isString()) {
            return Optional.of(((StringValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Double> getDouble() {
        if (isDouble()) {
            return Optional.of(((DoubleValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Long> getLong() {
        if (isLong()) {
            return Optional.of(((LongValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Range> getRange() {
        if (isRange()) {
            return Optional.of(((RangeValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Boolean> getBoolean() {
        if (isBoolean()) {
            return Optional.of(((BooleanValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<EntityIdFilter> getEntityId() {
        if (isEntityId()) {
            return Optional.of(((EntityIdValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitDateTime(OffsetDateTime dateTime);

        T visitString(String string);

        T visitDouble(double double_);

        T visitLong(long long_);

        T visitRange(Range range);

        T visitBoolean(boolean boolean_);

        T visitEntityId(EntityIdFilter entityId);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(DateTimeValue.class),
        @JsonSubTypes.Type(StringValue.class),
        @JsonSubTypes.Type(DoubleValue.class),
        @JsonSubTypes.Type(LongValue.class),
        @JsonSubTypes.Type(RangeValue.class),
        @JsonSubTypes.Type(BooleanValue.class),
        @JsonSubTypes.Type(EntityIdValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("dateTime")
    @JsonIgnoreProperties("type")
    private static final class DateTimeValue implements Value {
        @JsonProperty("value")
        private OffsetDateTime value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DateTimeValue(@JsonProperty("value") OffsetDateTime value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDateTime(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DateTimeValue && equalTo((DateTimeValue) other);
        }

        private boolean equalTo(DateTimeValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "FieldValue{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("string")
    @JsonIgnoreProperties("type")
    private static final class StringValue implements Value {
        @JsonProperty("value")
        private String value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private StringValue(@JsonProperty("value") String value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitString(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof StringValue && equalTo((StringValue) other);
        }

        private boolean equalTo(StringValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "FieldValue{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("double")
    @JsonIgnoreProperties("type")
    private static final class DoubleValue implements Value {
        @JsonProperty("value")
        private double value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DoubleValue(@JsonProperty("value") double value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDouble(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DoubleValue && equalTo((DoubleValue) other);
        }

        private boolean equalTo(DoubleValue other) {
            return value == other.value;
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "FieldValue{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("long")
    @JsonIgnoreProperties("type")
    private static final class LongValue implements Value {
        @JsonProperty("value")
        private long value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private LongValue(@JsonProperty("value") long value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitLong(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof LongValue && equalTo((LongValue) other);
        }

        private boolean equalTo(LongValue other) {
            return value == other.value;
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "FieldValue{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("range")
    @JsonIgnoreProperties("type")
    private static final class RangeValue implements Value {
        @JsonUnwrapped
        private Range value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private RangeValue() {}

        private RangeValue(Range value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitRange(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof RangeValue && equalTo((RangeValue) other);
        }

        private boolean equalTo(RangeValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "FieldValue{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("boolean")
    @JsonIgnoreProperties("type")
    private static final class BooleanValue implements Value {
        @JsonProperty("value")
        private boolean value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private BooleanValue(@JsonProperty("value") boolean value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitBoolean(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof BooleanValue && equalTo((BooleanValue) other);
        }

        private boolean equalTo(BooleanValue other) {
            return value == other.value;
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "FieldValue{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("entityId")
    @JsonIgnoreProperties("type")
    private static final class EntityIdValue implements Value {
        @JsonUnwrapped
        private EntityIdFilter value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private EntityIdValue() {}

        private EntityIdValue(EntityIdFilter value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitEntityId(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof EntityIdValue && equalTo((EntityIdValue) other);
        }

        private boolean equalTo(EntityIdValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "FieldValue{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("type")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "FieldValue{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
