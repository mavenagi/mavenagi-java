/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.actions.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.resources.commons.types.LlmInclusionStatus;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ActionFilter.Builder.class)
public final class ActionFilter {
    private final Optional<String> instructions;

    private final Optional<List<LlmInclusionStatus>> llmInclusionStatuses;

    private final Optional<List<String>> appIds;

    private final Optional<Boolean> userInteractionRequired;

    private final Map<String, Object> additionalProperties;

    private ActionFilter(
            Optional<String> instructions,
            Optional<List<LlmInclusionStatus>> llmInclusionStatuses,
            Optional<List<String>> appIds,
            Optional<Boolean> userInteractionRequired,
            Map<String, Object> additionalProperties) {
        this.instructions = instructions;
        this.llmInclusionStatuses = llmInclusionStatuses;
        this.appIds = appIds;
        this.userInteractionRequired = userInteractionRequired;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Filter by instructions
     */
    @JsonProperty("instructions")
    public Optional<String> getInstructions() {
        return instructions;
    }

    /**
     * @return Filter by LLM inclusion status
     */
    @JsonProperty("llmInclusionStatuses")
    public Optional<List<LlmInclusionStatus>> getLlmInclusionStatuses() {
        return llmInclusionStatuses;
    }

    /**
     * @return Filter by app IDs
     */
    @JsonProperty("appIds")
    public Optional<List<String>> getAppIds() {
        return appIds;
    }

    /**
     * @return Filter by user interaction required
     */
    @JsonProperty("userInteractionRequired")
    public Optional<Boolean> getUserInteractionRequired() {
        return userInteractionRequired;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ActionFilter && equalTo((ActionFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ActionFilter other) {
        return instructions.equals(other.instructions)
                && llmInclusionStatuses.equals(other.llmInclusionStatuses)
                && appIds.equals(other.appIds)
                && userInteractionRequired.equals(other.userInteractionRequired);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.instructions, this.llmInclusionStatuses, this.appIds, this.userInteractionRequired);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> instructions = Optional.empty();

        private Optional<List<LlmInclusionStatus>> llmInclusionStatuses = Optional.empty();

        private Optional<List<String>> appIds = Optional.empty();

        private Optional<Boolean> userInteractionRequired = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ActionFilter other) {
            instructions(other.getInstructions());
            llmInclusionStatuses(other.getLlmInclusionStatuses());
            appIds(other.getAppIds());
            userInteractionRequired(other.getUserInteractionRequired());
            return this;
        }

        /**
         * <p>Filter by instructions</p>
         */
        @JsonSetter(value = "instructions", nulls = Nulls.SKIP)
        public Builder instructions(Optional<String> instructions) {
            this.instructions = instructions;
            return this;
        }

        public Builder instructions(String instructions) {
            this.instructions = Optional.ofNullable(instructions);
            return this;
        }

        /**
         * <p>Filter by LLM inclusion status</p>
         */
        @JsonSetter(value = "llmInclusionStatuses", nulls = Nulls.SKIP)
        public Builder llmInclusionStatuses(Optional<List<LlmInclusionStatus>> llmInclusionStatuses) {
            this.llmInclusionStatuses = llmInclusionStatuses;
            return this;
        }

        public Builder llmInclusionStatuses(List<LlmInclusionStatus> llmInclusionStatuses) {
            this.llmInclusionStatuses = Optional.ofNullable(llmInclusionStatuses);
            return this;
        }

        /**
         * <p>Filter by app IDs</p>
         */
        @JsonSetter(value = "appIds", nulls = Nulls.SKIP)
        public Builder appIds(Optional<List<String>> appIds) {
            this.appIds = appIds;
            return this;
        }

        public Builder appIds(List<String> appIds) {
            this.appIds = Optional.ofNullable(appIds);
            return this;
        }

        /**
         * <p>Filter by user interaction required</p>
         */
        @JsonSetter(value = "userInteractionRequired", nulls = Nulls.SKIP)
        public Builder userInteractionRequired(Optional<Boolean> userInteractionRequired) {
            this.userInteractionRequired = userInteractionRequired;
            return this;
        }

        public Builder userInteractionRequired(Boolean userInteractionRequired) {
            this.userInteractionRequired = Optional.ofNullable(userInteractionRequired);
            return this;
        }

        public ActionFilter build() {
            return new ActionFilter(
                    instructions, llmInclusionStatuses, appIds, userInteractionRequired, additionalProperties);
        }
    }
}
