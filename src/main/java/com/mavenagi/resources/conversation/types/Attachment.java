/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.conversation.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Attachment.Builder.class)
public final class Attachment {
    private final String type;

    private final byte[] content;

    private final Optional<String> name;

    private final Map<String, Object> additionalProperties;

    private Attachment(String type, byte[] content, Optional<String> name, Map<String, Object> additionalProperties) {
        this.type = type;
        this.content = content;
        this.name = name;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The mime-type of the attachment. Supported types are:
     * <ul>
     * <li>image/jpeg</li>
     * <li>image/jpg</li>
     * <li>image/png</li>
     * <li>image/gif</li>
     * <li>image/webp</li>
     * <li>application/pdf</li>
     * <li>audio/aac</li>
     * <li>audio/mpeg</li>
     * <li>audio/mp4</li>
     * <li>video/mp4</li>
     * </ul>
     * <p>Image attachments will be sent to the LLM as additional data.
     * Non-image attachments can be stored and downloaded from the API but will not be sent to the LLM.</p>
     */
    @JsonProperty("type")
    public String getType() {
        return type;
    }

    /**
     * @return The attachment data, up to 5MB.
     */
    @JsonProperty("content")
    public byte[] getContent() {
        return content;
    }

    /**
     * @return The name of the attachment, if one was provided.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Attachment && equalTo((Attachment) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Attachment other) {
        return type.equals(other.type) && content.equals(other.content) && name.equals(other.name);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.content, this.name);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        /**
         * <p>The mime-type of the attachment. Supported types are:</p>
         * <ul>
         * <li>image/jpeg</li>
         * <li>image/jpg</li>
         * <li>image/png</li>
         * <li>image/gif</li>
         * <li>image/webp</li>
         * <li>application/pdf</li>
         * <li>audio/aac</li>
         * <li>audio/mpeg</li>
         * <li>audio/mp4</li>
         * <li>video/mp4</li>
         * </ul>
         * <p>Image attachments will be sent to the LLM as additional data.
         * Non-image attachments can be stored and downloaded from the API but will not be sent to the LLM.</p>
         */
        ContentStage type(@NotNull String type);

        Builder from(Attachment other);
    }

    public interface ContentStage {
        /**
         * <p>The attachment data, up to 5MB.</p>
         */
        _FinalStage content(@NotNull byte[] content);
    }

    public interface _FinalStage {
        Attachment build();

        /**
         * <p>The name of the attachment, if one was provided.</p>
         */
        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, ContentStage, _FinalStage {
        private String type;

        private byte[] content;

        private Optional<String> name = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Attachment other) {
            type(other.getType());
            content(other.getContent());
            name(other.getName());
            return this;
        }

        /**
         * <p>The mime-type of the attachment. Supported types are:</p>
         * <ul>
         * <li>image/jpeg</li>
         * <li>image/jpg</li>
         * <li>image/png</li>
         * <li>image/gif</li>
         * <li>image/webp</li>
         * <li>application/pdf</li>
         * <li>audio/aac</li>
         * <li>audio/mpeg</li>
         * <li>audio/mp4</li>
         * <li>video/mp4</li>
         * </ul>
         * <p>Image attachments will be sent to the LLM as additional data.
         * Non-image attachments can be stored and downloaded from the API but will not be sent to the LLM.</p>
         * <p>The mime-type of the attachment. Supported types are:</p>
         * <ul>
         * <li>image/jpeg</li>
         * <li>image/jpg</li>
         * <li>image/png</li>
         * <li>image/gif</li>
         * <li>image/webp</li>
         * <li>application/pdf</li>
         * <li>audio/aac</li>
         * <li>audio/mpeg</li>
         * <li>audio/mp4</li>
         * <li>video/mp4</li>
         * </ul>
         * <p>Image attachments will be sent to the LLM as additional data.
         * Non-image attachments can be stored and downloaded from the API but will not be sent to the LLM.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public ContentStage type(@NotNull String type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>The attachment data, up to 5MB.</p>
         * <p>The attachment data, up to 5MB.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("content")
        public _FinalStage content(@NotNull byte[] content) {
            this.content = Objects.requireNonNull(content, "content must not be null");
            return this;
        }

        /**
         * <p>The name of the attachment, if one was provided.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>The name of the attachment, if one was provided.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        public Attachment build() {
            return new Attachment(type, content, name, additionalProperties);
        }
    }
}
