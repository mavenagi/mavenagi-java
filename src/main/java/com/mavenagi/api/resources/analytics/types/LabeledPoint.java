/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.analytics.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LabeledPoint.Builder.class)
public final class LabeledPoint {
    private final String label;

    private final double y;

    private final Map<String, Object> additionalProperties;

    private LabeledPoint(String label, double y, Map<String, Object> additionalProperties) {
        this.label = label;
        this.y = y;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Label for the data point corresponding to the y-value.
     */
    @JsonProperty("label")
    public String getLabel() {
        return label;
    }

    /**
     * @return Value of the data point.
     */
    @JsonProperty("y")
    public double getY() {
        return y;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LabeledPoint && equalTo((LabeledPoint) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LabeledPoint other) {
        return label.equals(other.label) && y == other.y;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.label, this.y);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LabelStage builder() {
        return new Builder();
    }

    public interface LabelStage {
        YStage label(@NotNull String label);

        Builder from(LabeledPoint other);
    }

    public interface YStage {
        _FinalStage y(double y);
    }

    public interface _FinalStage {
        LabeledPoint build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements LabelStage, YStage, _FinalStage {
        private String label;

        private double y;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(LabeledPoint other) {
            label(other.getLabel());
            y(other.getY());
            return this;
        }

        /**
         * <p>Label for the data point corresponding to the y-value.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("label")
        public YStage label(@NotNull String label) {
            this.label = Objects.requireNonNull(label, "label must not be null");
            return this;
        }

        /**
         * <p>Value of the data point.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("y")
        public _FinalStage y(double y) {
            this.y = y;
            return this;
        }

        @java.lang.Override
        public LabeledPoint build() {
            return new LabeledPoint(label, y, additionalProperties);
        }
    }
}
