/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.segments.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.resources.commons.types.Precondition;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SegmentBase.Builder.class)
public final class SegmentBase implements ISegmentBase {
    private final String name;

    private final Precondition precondition;

    private final Map<String, Object> additionalProperties;

    private SegmentBase(String name, Precondition precondition, Map<String, Object> additionalProperties) {
        this.name = name;
        this.precondition = precondition;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the segment.
     */
    @JsonProperty("name")
    @java.lang.Override
    public String getName() {
        return name;
    }

    /**
     * @return The precondition that must be met for a conversation message to be included in the segment.
     */
    @JsonProperty("precondition")
    @java.lang.Override
    public Precondition getPrecondition() {
        return precondition;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SegmentBase && equalTo((SegmentBase) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SegmentBase other) {
        return name.equals(other.name) && precondition.equals(other.precondition);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.precondition);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        /**
         * <p>The name of the segment.</p>
         */
        PreconditionStage name(@NotNull String name);

        Builder from(SegmentBase other);
    }

    public interface PreconditionStage {
        /**
         * <p>The precondition that must be met for a conversation message to be included in the segment.</p>
         */
        _FinalStage precondition(@NotNull Precondition precondition);
    }

    public interface _FinalStage {
        SegmentBase build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, PreconditionStage, _FinalStage {
        private String name;

        private Precondition precondition;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SegmentBase other) {
            name(other.getName());
            precondition(other.getPrecondition());
            return this;
        }

        /**
         * <p>The name of the segment.</p>
         * <p>The name of the segment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public PreconditionStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>The precondition that must be met for a conversation message to be included in the segment.</p>
         * <p>The precondition that must be met for a conversation message to be included in the segment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("precondition")
        public _FinalStage precondition(@NotNull Precondition precondition) {
            this.precondition = Objects.requireNonNull(precondition, "precondition must not be null");
            return this;
        }

        @java.lang.Override
        public SegmentBase build() {
            return new SegmentBase(name, precondition, additionalProperties);
        }
    }
}
