/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AppUserResponse.Builder.class)
public final class AppUserResponse implements IAppUser {
    private final Set<AppUserIdentifier> identifiers;

    private final Map<String, UserData> data;

    private final EntityId userId;

    private final Map<String, Map<String, String>> allUserData;

    private final Map<String, String> defaultUserData;

    private final Map<String, Object> additionalProperties;

    private AppUserResponse(
            Set<AppUserIdentifier> identifiers,
            Map<String, UserData> data,
            EntityId userId,
            Map<String, Map<String, String>> allUserData,
            Map<String, String> defaultUserData,
            Map<String, Object> additionalProperties) {
        this.identifiers = identifiers;
        this.data = data;
        this.userId = userId;
        this.allUserData = allUserData;
        this.defaultUserData = defaultUserData;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Used to determine whether two users from different apps are the same
     */
    @JsonProperty("identifiers")
    @java.lang.Override
    public Set<AppUserIdentifier> getIdentifiers() {
        return identifiers;
    }

    @JsonProperty("data")
    @java.lang.Override
    public Map<String, UserData> getData() {
        return data;
    }

    /**
     * @return ID that uniquely identifies this user
     */
    @JsonProperty("userId")
    public EntityId getUserId() {
        return userId;
    }

    /**
     * @return Data from all apps
     */
    @JsonProperty("allUserData")
    public Map<String, Map<String, String>> getAllUserData() {
        return allUserData;
    }

    /**
     * @return Default data for this user
     */
    @JsonProperty("defaultUserData")
    public Map<String, String> getDefaultUserData() {
        return defaultUserData;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AppUserResponse && equalTo((AppUserResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AppUserResponse other) {
        return identifiers.equals(other.identifiers)
                && data.equals(other.data)
                && userId.equals(other.userId)
                && allUserData.equals(other.allUserData)
                && defaultUserData.equals(other.defaultUserData);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.identifiers, this.data, this.userId, this.allUserData, this.defaultUserData);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UserIdStage builder() {
        return new Builder();
    }

    public interface UserIdStage {
        /**
         * <p>ID that uniquely identifies this user</p>
         */
        _FinalStage userId(@NotNull EntityId userId);

        Builder from(AppUserResponse other);
    }

    public interface _FinalStage {
        AppUserResponse build();

        /**
         * <p>Used to determine whether two users from different apps are the same</p>
         */
        _FinalStage identifiers(Set<AppUserIdentifier> identifiers);

        _FinalStage addIdentifiers(AppUserIdentifier identifiers);

        _FinalStage addAllIdentifiers(Set<AppUserIdentifier> identifiers);

        _FinalStage data(Map<String, UserData> data);

        _FinalStage putAllData(Map<String, UserData> data);

        _FinalStage data(String key, UserData value);

        /**
         * <p>Data from all apps</p>
         */
        _FinalStage allUserData(Map<String, Map<String, String>> allUserData);

        _FinalStage putAllAllUserData(Map<String, Map<String, String>> allUserData);

        _FinalStage allUserData(String key, Map<String, String> value);

        /**
         * <p>Default data for this user</p>
         */
        _FinalStage defaultUserData(Map<String, String> defaultUserData);

        _FinalStage putAllDefaultUserData(Map<String, String> defaultUserData);

        _FinalStage defaultUserData(String key, String value);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements UserIdStage, _FinalStage {
        private EntityId userId;

        private Map<String, String> defaultUserData = new LinkedHashMap<>();

        private Map<String, Map<String, String>> allUserData = new LinkedHashMap<>();

        private Map<String, UserData> data = new LinkedHashMap<>();

        private Set<AppUserIdentifier> identifiers = new LinkedHashSet<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AppUserResponse other) {
            identifiers(other.getIdentifiers());
            data(other.getData());
            userId(other.getUserId());
            allUserData(other.getAllUserData());
            defaultUserData(other.getDefaultUserData());
            return this;
        }

        /**
         * <p>ID that uniquely identifies this user</p>
         * <p>ID that uniquely identifies this user</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("userId")
        public _FinalStage userId(@NotNull EntityId userId) {
            this.userId = Objects.requireNonNull(userId, "userId must not be null");
            return this;
        }

        /**
         * <p>Default data for this user</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage defaultUserData(String key, String value) {
            this.defaultUserData.put(key, value);
            return this;
        }

        /**
         * <p>Default data for this user</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage putAllDefaultUserData(Map<String, String> defaultUserData) {
            this.defaultUserData.putAll(defaultUserData);
            return this;
        }

        /**
         * <p>Default data for this user</p>
         */
        @java.lang.Override
        @JsonSetter(value = "defaultUserData", nulls = Nulls.SKIP)
        public _FinalStage defaultUserData(Map<String, String> defaultUserData) {
            this.defaultUserData.clear();
            this.defaultUserData.putAll(defaultUserData);
            return this;
        }

        /**
         * <p>Data from all apps</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage allUserData(String key, Map<String, String> value) {
            this.allUserData.put(key, value);
            return this;
        }

        /**
         * <p>Data from all apps</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage putAllAllUserData(Map<String, Map<String, String>> allUserData) {
            this.allUserData.putAll(allUserData);
            return this;
        }

        /**
         * <p>Data from all apps</p>
         */
        @java.lang.Override
        @JsonSetter(value = "allUserData", nulls = Nulls.SKIP)
        public _FinalStage allUserData(Map<String, Map<String, String>> allUserData) {
            this.allUserData.clear();
            this.allUserData.putAll(allUserData);
            return this;
        }

        @java.lang.Override
        public _FinalStage data(String key, UserData value) {
            this.data.put(key, value);
            return this;
        }

        @java.lang.Override
        public _FinalStage putAllData(Map<String, UserData> data) {
            this.data.putAll(data);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public _FinalStage data(Map<String, UserData> data) {
            this.data.clear();
            this.data.putAll(data);
            return this;
        }

        /**
         * <p>Used to determine whether two users from different apps are the same</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllIdentifiers(Set<AppUserIdentifier> identifiers) {
            this.identifiers.addAll(identifiers);
            return this;
        }

        /**
         * <p>Used to determine whether two users from different apps are the same</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addIdentifiers(AppUserIdentifier identifiers) {
            this.identifiers.add(identifiers);
            return this;
        }

        /**
         * <p>Used to determine whether two users from different apps are the same</p>
         */
        @java.lang.Override
        @JsonSetter(value = "identifiers", nulls = Nulls.SKIP)
        public _FinalStage identifiers(Set<AppUserIdentifier> identifiers) {
            this.identifiers.clear();
            this.identifiers.addAll(identifiers);
            return this;
        }

        @java.lang.Override
        public AppUserResponse build() {
            return new AppUserResponse(identifiers, data, userId, allUserData, defaultUserData, additionalProperties);
        }
    }
}
