/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.knowledge.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import com.mavenagi.api.resources.commons.types.EntityId;
import com.mavenagi.api.resources.commons.types.Precondition;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = KnowledgeBaseResponse.Builder.class)
public final class KnowledgeBaseResponse implements IKnowledgeBaseProperties {
    private final String name;

    private final KnowledgeBaseType type;

    private final Optional<String> url;

    private final Optional<Precondition> precondition;

    private final EntityId knowledgeBaseId;

    private final Map<String, Object> additionalProperties;

    private KnowledgeBaseResponse(
            String name,
            KnowledgeBaseType type,
            Optional<String> url,
            Optional<Precondition> precondition,
            EntityId knowledgeBaseId,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.type = type;
        this.url = url;
        this.precondition = precondition;
        this.knowledgeBaseId = knowledgeBaseId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the knowledge base
     */
    @JsonProperty("name")
    @java.lang.Override
    public String getName() {
        return name;
    }

    /**
     * @return The type of the knowledge base. Can not be changed once created.
     */
    @JsonProperty("type")
    @java.lang.Override
    public KnowledgeBaseType getType() {
        return type;
    }

    /**
     * @return The URL to pull content from for RSS and URL knowledge bases.
     */
    @JsonProperty("url")
    @java.lang.Override
    public Optional<String> getUrl() {
        return url;
    }

    /**
     * @return (Beta) The preconditions that must be met for knowledge base be relevant to a conversation. Can be used to limit knowledge to certain types of users.
     */
    @JsonProperty("precondition")
    @java.lang.Override
    public Optional<Precondition> getPrecondition() {
        return precondition;
    }

    /**
     * @return ID that uniquely identifies this knowledge base
     */
    @JsonProperty("knowledgeBaseId")
    public EntityId getKnowledgeBaseId() {
        return knowledgeBaseId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof KnowledgeBaseResponse && equalTo((KnowledgeBaseResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(KnowledgeBaseResponse other) {
        return name.equals(other.name)
                && type.equals(other.type)
                && url.equals(other.url)
                && precondition.equals(other.precondition)
                && knowledgeBaseId.equals(other.knowledgeBaseId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.type, this.url, this.precondition, this.knowledgeBaseId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        TypeStage name(@NotNull String name);

        Builder from(KnowledgeBaseResponse other);
    }

    public interface TypeStage {
        KnowledgeBaseIdStage type(@NotNull KnowledgeBaseType type);
    }

    public interface KnowledgeBaseIdStage {
        _FinalStage knowledgeBaseId(@NotNull EntityId knowledgeBaseId);
    }

    public interface _FinalStage {
        KnowledgeBaseResponse build();

        _FinalStage url(Optional<String> url);

        _FinalStage url(String url);

        _FinalStage precondition(Optional<Precondition> precondition);

        _FinalStage precondition(Precondition precondition);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, TypeStage, KnowledgeBaseIdStage, _FinalStage {
        private String name;

        private KnowledgeBaseType type;

        private EntityId knowledgeBaseId;

        private Optional<Precondition> precondition = Optional.empty();

        private Optional<String> url = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(KnowledgeBaseResponse other) {
            name(other.getName());
            type(other.getType());
            url(other.getUrl());
            precondition(other.getPrecondition());
            knowledgeBaseId(other.getKnowledgeBaseId());
            return this;
        }

        /**
         * <p>The name of the knowledge base</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public TypeStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>The type of the knowledge base. Can not be changed once created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public KnowledgeBaseIdStage type(@NotNull KnowledgeBaseType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>ID that uniquely identifies this knowledge base</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("knowledgeBaseId")
        public _FinalStage knowledgeBaseId(@NotNull EntityId knowledgeBaseId) {
            this.knowledgeBaseId = Objects.requireNonNull(knowledgeBaseId, "knowledgeBaseId must not be null");
            return this;
        }

        /**
         * <p>(Beta) The preconditions that must be met for knowledge base be relevant to a conversation. Can be used to limit knowledge to certain types of users.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage precondition(Precondition precondition) {
            this.precondition = Optional.ofNullable(precondition);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "precondition", nulls = Nulls.SKIP)
        public _FinalStage precondition(Optional<Precondition> precondition) {
            this.precondition = precondition;
            return this;
        }

        /**
         * <p>The URL to pull content from for RSS and URL knowledge bases.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage url(String url) {
            this.url = Optional.ofNullable(url);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "url", nulls = Nulls.SKIP)
        public _FinalStage url(Optional<String> url) {
            this.url = url;
            return this;
        }

        @java.lang.Override
        public KnowledgeBaseResponse build() {
            return new KnowledgeBaseResponse(name, type, url, precondition, knowledgeBaseId, additionalProperties);
        }
    }
}
