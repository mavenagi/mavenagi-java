/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FeedbackBase.Builder.class)
public final class FeedbackBase implements IFeedbackBase {
    private final FeedbackType type;

    private final Optional<String> text;

    private final Map<String, Object> additionalProperties;

    private FeedbackBase(FeedbackType type, Optional<String> text, Map<String, Object> additionalProperties) {
        this.type = type;
        this.text = text;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The type of feedback
     */
    @JsonProperty("type")
    @java.lang.Override
    public FeedbackType getType() {
        return type;
    }

    /**
     * @return The feedback text
     */
    @JsonProperty("text")
    @java.lang.Override
    public Optional<String> getText() {
        return text;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FeedbackBase && equalTo((FeedbackBase) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FeedbackBase other) {
        return type.equals(other.type) && text.equals(other.text);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.text);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        /**
         * <p>The type of feedback</p>
         */
        _FinalStage type(@NotNull FeedbackType type);

        Builder from(FeedbackBase other);
    }

    public interface _FinalStage {
        FeedbackBase build();

        /**
         * <p>The feedback text</p>
         */
        _FinalStage text(Optional<String> text);

        _FinalStage text(String text);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, _FinalStage {
        private FeedbackType type;

        private Optional<String> text = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(FeedbackBase other) {
            type(other.getType());
            text(other.getText());
            return this;
        }

        /**
         * <p>The type of feedback</p>
         * <p>The type of feedback</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(@NotNull FeedbackType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>The feedback text</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage text(String text) {
            this.text = Optional.ofNullable(text);
            return this;
        }

        /**
         * <p>The feedback text</p>
         */
        @java.lang.Override
        @JsonSetter(value = "text", nulls = Nulls.SKIP)
        public _FinalStage text(Optional<String> text) {
            this.text = text;
            return this;
        }

        @java.lang.Override
        public FeedbackBase build() {
            return new FeedbackBase(type, text, additionalProperties);
        }
    }
}
