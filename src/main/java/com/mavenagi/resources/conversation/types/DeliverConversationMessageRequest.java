/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.conversation.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.resources.commons.types.EntityIdWithoutAgent;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DeliverConversationMessageRequest.Builder.class)
public final class DeliverConversationMessageRequest {
    private final EntityIdWithoutAgent conversationId;

    private final ConversationMessageRequest message;

    private final Map<String, Object> additionalProperties;

    private DeliverConversationMessageRequest(
            EntityIdWithoutAgent conversationId,
            ConversationMessageRequest message,
            Map<String, Object> additionalProperties) {
        this.conversationId = conversationId;
        this.message = message;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the conversation to deliver the message to. Message delivery will fail if the conversation does not have the <code>ASYNC</code> capability or if it is not <code>open</code>.
     */
    @JsonProperty("conversationId")
    public EntityIdWithoutAgent getConversationId() {
        return conversationId;
    }

    /**
     * @return The message to deliver.
     */
    @JsonProperty("message")
    public ConversationMessageRequest getMessage() {
        return message;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeliverConversationMessageRequest && equalTo((DeliverConversationMessageRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DeliverConversationMessageRequest other) {
        return conversationId.equals(other.conversationId) && message.equals(other.message);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.conversationId, this.message);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ConversationIdStage builder() {
        return new Builder();
    }

    public interface ConversationIdStage {
        /**
         * <p>The ID of the conversation to deliver the message to. Message delivery will fail if the conversation does not have the <code>ASYNC</code> capability or if it is not <code>open</code>.</p>
         */
        MessageStage conversationId(@NotNull EntityIdWithoutAgent conversationId);

        Builder from(DeliverConversationMessageRequest other);
    }

    public interface MessageStage {
        /**
         * <p>The message to deliver.</p>
         */
        _FinalStage message(@NotNull ConversationMessageRequest message);
    }

    public interface _FinalStage {
        DeliverConversationMessageRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ConversationIdStage, MessageStage, _FinalStage {
        private EntityIdWithoutAgent conversationId;

        private ConversationMessageRequest message;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DeliverConversationMessageRequest other) {
            conversationId(other.getConversationId());
            message(other.getMessage());
            return this;
        }

        /**
         * <p>The ID of the conversation to deliver the message to. Message delivery will fail if the conversation does not have the <code>ASYNC</code> capability or if it is not <code>open</code>.</p>
         * <p>The ID of the conversation to deliver the message to. Message delivery will fail if the conversation does not have the <code>ASYNC</code> capability or if it is not <code>open</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("conversationId")
        public MessageStage conversationId(@NotNull EntityIdWithoutAgent conversationId) {
            this.conversationId = Objects.requireNonNull(conversationId, "conversationId must not be null");
            return this;
        }

        /**
         * <p>The message to deliver.</p>
         * <p>The message to deliver.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("message")
        public _FinalStage message(@NotNull ConversationMessageRequest message) {
            this.message = Objects.requireNonNull(message, "message must not be null");
            return this;
        }

        @java.lang.Override
        public DeliverConversationMessageRequest build() {
            return new DeliverConversationMessageRequest(conversationId, message, additionalProperties);
        }
    }
}
