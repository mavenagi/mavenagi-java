/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.conversation.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.resources.commons.types.EntityIdBase;
import com.mavenagi.resources.commons.types.ResponseConfig;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ConversationRequest.Builder.class)
public final class ConversationRequest {
    private final EntityIdBase conversationId;

    private final Optional<ResponseConfig> responseConfig;

    private final Optional<String> subject;

    private final Optional<String> url;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<OffsetDateTime> updatedAt;

    private final Optional<Set<String>> tags;

    private final Optional<Map<String, String>> metadata;

    private final List<ConversationMessageRequest> messages;

    private final Map<String, Object> additionalProperties;

    private ConversationRequest(
            EntityIdBase conversationId,
            Optional<ResponseConfig> responseConfig,
            Optional<String> subject,
            Optional<String> url,
            Optional<OffsetDateTime> createdAt,
            Optional<OffsetDateTime> updatedAt,
            Optional<Set<String>> tags,
            Optional<Map<String, String>> metadata,
            List<ConversationMessageRequest> messages,
            Map<String, Object> additionalProperties) {
        this.conversationId = conversationId;
        this.responseConfig = responseConfig;
        this.subject = subject;
        this.url = url;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.tags = tags;
        this.metadata = metadata;
        this.messages = messages;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return An externally supplied ID to uniquely identify this conversation
     */
    @JsonProperty("conversationId")
    public EntityIdBase getConversationId() {
        return conversationId;
    }

    /**
     * @return Optional configurations for responses to this conversation
     */
    @JsonProperty("responseConfig")
    public Optional<ResponseConfig> getResponseConfig() {
        return responseConfig;
    }

    /**
     * @return The subject of the conversation
     */
    @JsonProperty("subject")
    public Optional<String> getSubject() {
        return subject;
    }

    /**
     * @return The url of the conversation
     */
    @JsonProperty("url")
    public Optional<String> getUrl() {
        return url;
    }

    /**
     * @return The date and time the conversation was created
     */
    @JsonProperty("createdAt")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The date and time the conversation was last updated
     */
    @JsonProperty("updatedAt")
    public Optional<OffsetDateTime> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The tags of the conversation. Used for filtering in Agent Designer.
     */
    @JsonProperty("tags")
    public Optional<Set<String>> getTags() {
        return tags;
    }

    /**
     * @return The metadata of the conversation supplied by the app which created the conversation.
     */
    @JsonProperty("metadata")
    public Optional<Map<String, String>> getMetadata() {
        return metadata;
    }

    /**
     * @return The messages in the conversation
     */
    @JsonProperty("messages")
    public List<ConversationMessageRequest> getMessages() {
        return messages;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ConversationRequest && equalTo((ConversationRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ConversationRequest other) {
        return conversationId.equals(other.conversationId)
                && responseConfig.equals(other.responseConfig)
                && subject.equals(other.subject)
                && url.equals(other.url)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && tags.equals(other.tags)
                && metadata.equals(other.metadata)
                && messages.equals(other.messages);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.conversationId,
                this.responseConfig,
                this.subject,
                this.url,
                this.createdAt,
                this.updatedAt,
                this.tags,
                this.metadata,
                this.messages);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ConversationIdStage builder() {
        return new Builder();
    }

    public interface ConversationIdStage {
        /**
         * <p>An externally supplied ID to uniquely identify this conversation</p>
         */
        _FinalStage conversationId(@NotNull EntityIdBase conversationId);

        Builder from(ConversationRequest other);
    }

    public interface _FinalStage {
        ConversationRequest build();

        /**
         * <p>Optional configurations for responses to this conversation</p>
         */
        _FinalStage responseConfig(Optional<ResponseConfig> responseConfig);

        _FinalStage responseConfig(ResponseConfig responseConfig);

        /**
         * <p>The subject of the conversation</p>
         */
        _FinalStage subject(Optional<String> subject);

        _FinalStage subject(String subject);

        /**
         * <p>The url of the conversation</p>
         */
        _FinalStage url(Optional<String> url);

        _FinalStage url(String url);

        /**
         * <p>The date and time the conversation was created</p>
         */
        _FinalStage createdAt(Optional<OffsetDateTime> createdAt);

        _FinalStage createdAt(OffsetDateTime createdAt);

        /**
         * <p>The date and time the conversation was last updated</p>
         */
        _FinalStage updatedAt(Optional<OffsetDateTime> updatedAt);

        _FinalStage updatedAt(OffsetDateTime updatedAt);

        /**
         * <p>The tags of the conversation. Used for filtering in Agent Designer.</p>
         */
        _FinalStage tags(Optional<Set<String>> tags);

        _FinalStage tags(Set<String> tags);

        /**
         * <p>The metadata of the conversation supplied by the app which created the conversation.</p>
         */
        _FinalStage metadata(Optional<Map<String, String>> metadata);

        _FinalStage metadata(Map<String, String> metadata);

        /**
         * <p>The messages in the conversation</p>
         */
        _FinalStage messages(List<ConversationMessageRequest> messages);

        _FinalStage addMessages(ConversationMessageRequest messages);

        _FinalStage addAllMessages(List<ConversationMessageRequest> messages);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ConversationIdStage, _FinalStage {
        private EntityIdBase conversationId;

        private List<ConversationMessageRequest> messages = new ArrayList<>();

        private Optional<Map<String, String>> metadata = Optional.empty();

        private Optional<Set<String>> tags = Optional.empty();

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<String> url = Optional.empty();

        private Optional<String> subject = Optional.empty();

        private Optional<ResponseConfig> responseConfig = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ConversationRequest other) {
            conversationId(other.getConversationId());
            responseConfig(other.getResponseConfig());
            subject(other.getSubject());
            url(other.getUrl());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            tags(other.getTags());
            metadata(other.getMetadata());
            messages(other.getMessages());
            return this;
        }

        /**
         * <p>An externally supplied ID to uniquely identify this conversation</p>
         * <p>An externally supplied ID to uniquely identify this conversation</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("conversationId")
        public _FinalStage conversationId(@NotNull EntityIdBase conversationId) {
            this.conversationId = Objects.requireNonNull(conversationId, "conversationId must not be null");
            return this;
        }

        /**
         * <p>The messages in the conversation</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllMessages(List<ConversationMessageRequest> messages) {
            this.messages.addAll(messages);
            return this;
        }

        /**
         * <p>The messages in the conversation</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addMessages(ConversationMessageRequest messages) {
            this.messages.add(messages);
            return this;
        }

        /**
         * <p>The messages in the conversation</p>
         */
        @java.lang.Override
        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public _FinalStage messages(List<ConversationMessageRequest> messages) {
            this.messages.clear();
            this.messages.addAll(messages);
            return this;
        }

        /**
         * <p>The metadata of the conversation supplied by the app which created the conversation.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(Map<String, String> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * <p>The metadata of the conversation supplied by the app which created the conversation.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Map<String, String>> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * <p>The tags of the conversation. Used for filtering in Agent Designer.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage tags(Set<String> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        /**
         * <p>The tags of the conversation. Used for filtering in Agent Designer.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public _FinalStage tags(Optional<Set<String>> tags) {
            this.tags = tags;
            return this;
        }

        /**
         * <p>The date and time the conversation was last updated</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * <p>The date and time the conversation was last updated</p>
         */
        @java.lang.Override
        @JsonSetter(value = "updatedAt", nulls = Nulls.SKIP)
        public _FinalStage updatedAt(Optional<OffsetDateTime> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * <p>The date and time the conversation was created</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>The date and time the conversation was created</p>
         */
        @java.lang.Override
        @JsonSetter(value = "createdAt", nulls = Nulls.SKIP)
        public _FinalStage createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>The url of the conversation</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage url(String url) {
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * <p>The url of the conversation</p>
         */
        @java.lang.Override
        @JsonSetter(value = "url", nulls = Nulls.SKIP)
        public _FinalStage url(Optional<String> url) {
            this.url = url;
            return this;
        }

        /**
         * <p>The subject of the conversation</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage subject(String subject) {
            this.subject = Optional.ofNullable(subject);
            return this;
        }

        /**
         * <p>The subject of the conversation</p>
         */
        @java.lang.Override
        @JsonSetter(value = "subject", nulls = Nulls.SKIP)
        public _FinalStage subject(Optional<String> subject) {
            this.subject = subject;
            return this;
        }

        /**
         * <p>Optional configurations for responses to this conversation</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage responseConfig(ResponseConfig responseConfig) {
            this.responseConfig = Optional.ofNullable(responseConfig);
            return this;
        }

        /**
         * <p>Optional configurations for responses to this conversation</p>
         */
        @java.lang.Override
        @JsonSetter(value = "responseConfig", nulls = Nulls.SKIP)
        public _FinalStage responseConfig(Optional<ResponseConfig> responseConfig) {
            this.responseConfig = responseConfig;
            return this;
        }

        @java.lang.Override
        public ConversationRequest build() {
            return new ConversationRequest(
                    conversationId,
                    responseConfig,
                    subject,
                    url,
                    createdAt,
                    updatedAt,
                    tags,
                    metadata,
                    messages,
                    additionalProperties);
        }
    }
}
