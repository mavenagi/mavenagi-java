/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EntityId.Builder.class)
public final class EntityId implements IEntityIdWithoutAgent, IEntityIdBase {
    private final EntityType type;

    private final String appId;

    private final String referenceId;

    private final String organizationId;

    private final String agentId;

    private final Map<String, Object> additionalProperties;

    private EntityId(
            EntityType type,
            String appId,
            String referenceId,
            String organizationId,
            String agentId,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.appId = appId;
        this.referenceId = referenceId;
        this.organizationId = organizationId;
        this.agentId = agentId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The object type
     */
    @JsonProperty("type")
    @java.lang.Override
    public EntityType getType() {
        return type;
    }

    /**
     * @return The ID of the application that created this object
     */
    @JsonProperty("appId")
    @java.lang.Override
    public String getAppId() {
        return appId;
    }

    /**
     * @return Externally supplied ID to uniquely identify this object. Is globally unique when combined with all other entityId fields (type, appId, organizationId, agentId)
     */
    @JsonProperty("referenceId")
    @java.lang.Override
    public String getReferenceId() {
        return referenceId;
    }

    /**
     * @return The ID of the organization that this object belongs to
     */
    @JsonProperty("organizationId")
    public String getOrganizationId() {
        return organizationId;
    }

    /**
     * @return The ID of the agent that this object belongs to
     */
    @JsonProperty("agentId")
    public String getAgentId() {
        return agentId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EntityId && equalTo((EntityId) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EntityId other) {
        return type.equals(other.type)
                && appId.equals(other.appId)
                && referenceId.equals(other.referenceId)
                && organizationId.equals(other.organizationId)
                && agentId.equals(other.agentId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.appId, this.referenceId, this.organizationId, this.agentId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        /**
         * <p>The object type</p>
         */
        AppIdStage type(@NotNull EntityType type);

        Builder from(EntityId other);
    }

    public interface AppIdStage {
        /**
         * <p>The ID of the application that created this object</p>
         */
        ReferenceIdStage appId(@NotNull String appId);
    }

    public interface ReferenceIdStage {
        /**
         * <p>Externally supplied ID to uniquely identify this object. Is globally unique when combined with all other entityId fields (type, appId, organizationId, agentId)</p>
         */
        OrganizationIdStage referenceId(@NotNull String referenceId);
    }

    public interface OrganizationIdStage {
        /**
         * <p>The ID of the organization that this object belongs to</p>
         */
        AgentIdStage organizationId(@NotNull String organizationId);
    }

    public interface AgentIdStage {
        /**
         * <p>The ID of the agent that this object belongs to</p>
         */
        _FinalStage agentId(@NotNull String agentId);
    }

    public interface _FinalStage {
        EntityId build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements TypeStage, AppIdStage, ReferenceIdStage, OrganizationIdStage, AgentIdStage, _FinalStage {
        private EntityType type;

        private String appId;

        private String referenceId;

        private String organizationId;

        private String agentId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(EntityId other) {
            type(other.getType());
            appId(other.getAppId());
            referenceId(other.getReferenceId());
            organizationId(other.getOrganizationId());
            agentId(other.getAgentId());
            return this;
        }

        /**
         * <p>The object type</p>
         * <p>The object type</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public AppIdStage type(@NotNull EntityType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>The ID of the application that created this object</p>
         * <p>The ID of the application that created this object</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("appId")
        public ReferenceIdStage appId(@NotNull String appId) {
            this.appId = Objects.requireNonNull(appId, "appId must not be null");
            return this;
        }

        /**
         * <p>Externally supplied ID to uniquely identify this object. Is globally unique when combined with all other entityId fields (type, appId, organizationId, agentId)</p>
         * <p>Externally supplied ID to uniquely identify this object. Is globally unique when combined with all other entityId fields (type, appId, organizationId, agentId)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("referenceId")
        public OrganizationIdStage referenceId(@NotNull String referenceId) {
            this.referenceId = Objects.requireNonNull(referenceId, "referenceId must not be null");
            return this;
        }

        /**
         * <p>The ID of the organization that this object belongs to</p>
         * <p>The ID of the organization that this object belongs to</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("organizationId")
        public AgentIdStage organizationId(@NotNull String organizationId) {
            this.organizationId = Objects.requireNonNull(organizationId, "organizationId must not be null");
            return this;
        }

        /**
         * <p>The ID of the agent that this object belongs to</p>
         * <p>The ID of the agent that this object belongs to</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("agentId")
        public _FinalStage agentId(@NotNull String agentId) {
            this.agentId = Objects.requireNonNull(agentId, "agentId must not be null");
            return this;
        }

        @java.lang.Override
        public EntityId build() {
            return new EntityId(type, appId, referenceId, organizationId, agentId, additionalProperties);
        }
    }
}
