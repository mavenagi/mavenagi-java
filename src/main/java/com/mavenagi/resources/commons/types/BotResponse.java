/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class BotResponse {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private BotResponse(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static BotResponse text(BotTextResponse value) {
        return new BotResponse(new TextValue(value));
    }

    public static BotResponse actionForm(BotActionFormResponse value) {
        return new BotResponse(new ActionFormValue(value));
    }

    public static BotResponse chart(BotChartResponse value) {
        return new BotResponse(new ChartValue(value));
    }

    public static BotResponse object(BotObjectResponse value) {
        return new BotResponse(new ObjectValue(value));
    }

    public boolean isText() {
        return value instanceof TextValue;
    }

    public boolean isActionForm() {
        return value instanceof ActionFormValue;
    }

    public boolean isChart() {
        return value instanceof ChartValue;
    }

    public boolean isObject() {
        return value instanceof ObjectValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<BotTextResponse> getText() {
        if (isText()) {
            return Optional.of(((TextValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<BotActionFormResponse> getActionForm() {
        if (isActionForm()) {
            return Optional.of(((ActionFormValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<BotChartResponse> getChart() {
        if (isChart()) {
            return Optional.of(((ChartValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<BotObjectResponse> getObject() {
        if (isObject()) {
            return Optional.of(((ObjectValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitText(BotTextResponse text);

        T visitActionForm(BotActionFormResponse actionForm);

        T visitChart(BotChartResponse chart);

        T visitObject(BotObjectResponse object);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(TextValue.class),
        @JsonSubTypes.Type(ActionFormValue.class),
        @JsonSubTypes.Type(ChartValue.class),
        @JsonSubTypes.Type(ObjectValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("text")
    @JsonIgnoreProperties("type")
    private static final class TextValue implements Value {
        @JsonUnwrapped
        private BotTextResponse value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private TextValue() {}

        private TextValue(BotTextResponse value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitText(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof TextValue && equalTo((TextValue) other);
        }

        private boolean equalTo(TextValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BotResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("actionForm")
    @JsonIgnoreProperties("type")
    private static final class ActionFormValue implements Value {
        @JsonUnwrapped
        private BotActionFormResponse value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ActionFormValue() {}

        private ActionFormValue(BotActionFormResponse value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitActionForm(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ActionFormValue && equalTo((ActionFormValue) other);
        }

        private boolean equalTo(ActionFormValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BotResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("chart")
    @JsonIgnoreProperties("type")
    private static final class ChartValue implements Value {
        @JsonUnwrapped
        private BotChartResponse value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ChartValue() {}

        private ChartValue(BotChartResponse value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitChart(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ChartValue && equalTo((ChartValue) other);
        }

        private boolean equalTo(ChartValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BotResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("object")
    @JsonIgnoreProperties("type")
    private static final class ObjectValue implements Value {
        @JsonUnwrapped
        private BotObjectResponse value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ObjectValue() {}

        private ObjectValue(BotObjectResponse value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitObject(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ObjectValue && equalTo((ObjectValue) other);
        }

        private boolean equalTo(ObjectValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BotResponse{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("type")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BotResponse{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
