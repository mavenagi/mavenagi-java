/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.conversation.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.resources.commons.types.AttachmentRequest;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ConversationPatchRequest.Builder.class)
public final class ConversationPatchRequest {
    private final Optional<String> appId;

    private final Optional<Boolean> open;

    private final Optional<Boolean> llmEnabled;

    private final Optional<List<AttachmentRequest>> attachments;

    private final Map<String, Object> additionalProperties;

    private ConversationPatchRequest(
            Optional<String> appId,
            Optional<Boolean> open,
            Optional<Boolean> llmEnabled,
            Optional<List<AttachmentRequest>> attachments,
            Map<String, Object> additionalProperties) {
        this.appId = appId;
        this.open = open;
        this.llmEnabled = llmEnabled;
        this.attachments = attachments;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The App ID of the conversation to patch. If not provided the ID of the calling app will be used.
     */
    @JsonProperty("appId")
    public Optional<String> getAppId() {
        return appId;
    }

    /**
     * @return Whether the conversation is able to receive asynchronous messages. Only valid for conversations with the <code>ASYNC</code> capability.
     */
    @JsonProperty("open")
    public Optional<Boolean> getOpen() {
        return open;
    }

    /**
     * @return Whether the LLM is enabled for this conversation.
     */
    @JsonProperty("llmEnabled")
    public Optional<Boolean> getLlmEnabled() {
        return llmEnabled;
    }

    /**
     * @return A list of attachments to add to the conversation. Attachments can only be appended. Removal is not allowed.
     */
    @JsonProperty("attachments")
    public Optional<List<AttachmentRequest>> getAttachments() {
        return attachments;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ConversationPatchRequest && equalTo((ConversationPatchRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ConversationPatchRequest other) {
        return appId.equals(other.appId)
                && open.equals(other.open)
                && llmEnabled.equals(other.llmEnabled)
                && attachments.equals(other.attachments);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.appId, this.open, this.llmEnabled, this.attachments);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> appId = Optional.empty();

        private Optional<Boolean> open = Optional.empty();

        private Optional<Boolean> llmEnabled = Optional.empty();

        private Optional<List<AttachmentRequest>> attachments = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ConversationPatchRequest other) {
            appId(other.getAppId());
            open(other.getOpen());
            llmEnabled(other.getLlmEnabled());
            attachments(other.getAttachments());
            return this;
        }

        /**
         * <p>The App ID of the conversation to patch. If not provided the ID of the calling app will be used.</p>
         */
        @JsonSetter(value = "appId", nulls = Nulls.SKIP)
        public Builder appId(Optional<String> appId) {
            this.appId = appId;
            return this;
        }

        public Builder appId(String appId) {
            this.appId = Optional.ofNullable(appId);
            return this;
        }

        /**
         * <p>Whether the conversation is able to receive asynchronous messages. Only valid for conversations with the <code>ASYNC</code> capability.</p>
         */
        @JsonSetter(value = "open", nulls = Nulls.SKIP)
        public Builder open(Optional<Boolean> open) {
            this.open = open;
            return this;
        }

        public Builder open(Boolean open) {
            this.open = Optional.ofNullable(open);
            return this;
        }

        /**
         * <p>Whether the LLM is enabled for this conversation.</p>
         */
        @JsonSetter(value = "llmEnabled", nulls = Nulls.SKIP)
        public Builder llmEnabled(Optional<Boolean> llmEnabled) {
            this.llmEnabled = llmEnabled;
            return this;
        }

        public Builder llmEnabled(Boolean llmEnabled) {
            this.llmEnabled = Optional.ofNullable(llmEnabled);
            return this;
        }

        /**
         * <p>A list of attachments to add to the conversation. Attachments can only be appended. Removal is not allowed.</p>
         */
        @JsonSetter(value = "attachments", nulls = Nulls.SKIP)
        public Builder attachments(Optional<List<AttachmentRequest>> attachments) {
            this.attachments = attachments;
            return this;
        }

        public Builder attachments(List<AttachmentRequest> attachments) {
            this.attachments = Optional.ofNullable(attachments);
            return this;
        }

        public ConversationPatchRequest build() {
            return new ConversationPatchRequest(appId, open, llmEnabled, attachments, additionalProperties);
        }
    }
}
