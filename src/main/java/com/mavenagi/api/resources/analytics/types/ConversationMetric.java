/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.analytics.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class ConversationMetric {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private ConversationMetric(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static ConversationMetric count(ConversationCount value) {
        return new ConversationMetric(new CountValue(value));
    }

    public static ConversationMetric sum(ConversationSum value) {
        return new ConversationMetric(new SumValue(value));
    }

    public static ConversationMetric average(ConversationAverage value) {
        return new ConversationMetric(new AverageValue(value));
    }

    public static ConversationMetric min(ConversationMin value) {
        return new ConversationMetric(new MinValue(value));
    }

    public static ConversationMetric max(ConversationMax value) {
        return new ConversationMetric(new MaxValue(value));
    }

    public static ConversationMetric percentile(ConversationPercentile value) {
        return new ConversationMetric(new PercentileValue(value));
    }

    public static ConversationMetric median(ConversationMedian value) {
        return new ConversationMetric(new MedianValue(value));
    }

    public static ConversationMetric distinctCount(ConversationDistinctCount value) {
        return new ConversationMetric(new DistinctCountValue(value));
    }

    public boolean isCount() {
        return value instanceof CountValue;
    }

    public boolean isSum() {
        return value instanceof SumValue;
    }

    public boolean isAverage() {
        return value instanceof AverageValue;
    }

    public boolean isMin() {
        return value instanceof MinValue;
    }

    public boolean isMax() {
        return value instanceof MaxValue;
    }

    public boolean isPercentile() {
        return value instanceof PercentileValue;
    }

    public boolean isMedian() {
        return value instanceof MedianValue;
    }

    public boolean isDistinctCount() {
        return value instanceof DistinctCountValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<ConversationCount> getCount() {
        if (isCount()) {
            return Optional.of(((CountValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ConversationSum> getSum() {
        if (isSum()) {
            return Optional.of(((SumValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ConversationAverage> getAverage() {
        if (isAverage()) {
            return Optional.of(((AverageValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ConversationMin> getMin() {
        if (isMin()) {
            return Optional.of(((MinValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ConversationMax> getMax() {
        if (isMax()) {
            return Optional.of(((MaxValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ConversationPercentile> getPercentile() {
        if (isPercentile()) {
            return Optional.of(((PercentileValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ConversationMedian> getMedian() {
        if (isMedian()) {
            return Optional.of(((MedianValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ConversationDistinctCount> getDistinctCount() {
        if (isDistinctCount()) {
            return Optional.of(((DistinctCountValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitCount(ConversationCount count);

        T visitSum(ConversationSum sum);

        T visitAverage(ConversationAverage average);

        T visitMin(ConversationMin min);

        T visitMax(ConversationMax max);

        T visitPercentile(ConversationPercentile percentile);

        T visitMedian(ConversationMedian median);

        T visitDistinctCount(ConversationDistinctCount distinctCount);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(CountValue.class),
        @JsonSubTypes.Type(SumValue.class),
        @JsonSubTypes.Type(AverageValue.class),
        @JsonSubTypes.Type(MinValue.class),
        @JsonSubTypes.Type(MaxValue.class),
        @JsonSubTypes.Type(PercentileValue.class),
        @JsonSubTypes.Type(MedianValue.class),
        @JsonSubTypes.Type(DistinctCountValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("count")
    private static final class CountValue implements Value {
        @JsonUnwrapped
        private ConversationCount value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private CountValue() {}

        private CountValue(ConversationCount value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitCount(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof CountValue && equalTo((CountValue) other);
        }

        private boolean equalTo(CountValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ConversationMetric{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("sum")
    private static final class SumValue implements Value {
        @JsonUnwrapped
        private ConversationSum value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SumValue() {}

        private SumValue(ConversationSum value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSum(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SumValue && equalTo((SumValue) other);
        }

        private boolean equalTo(SumValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ConversationMetric{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("average")
    private static final class AverageValue implements Value {
        @JsonUnwrapped
        private ConversationAverage value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private AverageValue() {}

        private AverageValue(ConversationAverage value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitAverage(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof AverageValue && equalTo((AverageValue) other);
        }

        private boolean equalTo(AverageValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ConversationMetric{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("min")
    private static final class MinValue implements Value {
        @JsonUnwrapped
        private ConversationMin value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private MinValue() {}

        private MinValue(ConversationMin value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitMin(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof MinValue && equalTo((MinValue) other);
        }

        private boolean equalTo(MinValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ConversationMetric{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("max")
    private static final class MaxValue implements Value {
        @JsonUnwrapped
        private ConversationMax value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private MaxValue() {}

        private MaxValue(ConversationMax value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitMax(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof MaxValue && equalTo((MaxValue) other);
        }

        private boolean equalTo(MaxValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ConversationMetric{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("percentile")
    private static final class PercentileValue implements Value {
        @JsonUnwrapped
        private ConversationPercentile value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private PercentileValue() {}

        private PercentileValue(ConversationPercentile value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitPercentile(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof PercentileValue && equalTo((PercentileValue) other);
        }

        private boolean equalTo(PercentileValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ConversationMetric{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("median")
    private static final class MedianValue implements Value {
        @JsonUnwrapped
        private ConversationMedian value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private MedianValue() {}

        private MedianValue(ConversationMedian value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitMedian(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof MedianValue && equalTo((MedianValue) other);
        }

        private boolean equalTo(MedianValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ConversationMetric{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("distinctCount")
    private static final class DistinctCountValue implements Value {
        @JsonUnwrapped
        private ConversationDistinctCount value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DistinctCountValue() {}

        private DistinctCountValue(ConversationDistinctCount value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDistinctCount(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DistinctCountValue && equalTo((DistinctCountValue) other);
        }

        private boolean equalTo(DistinctCountValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ConversationMetric{" + "value: " + value + "}";
        }
    }

    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ConversationMetric{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
