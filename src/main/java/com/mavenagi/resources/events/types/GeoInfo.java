/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.events.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GeoInfo.Builder.class)
public final class GeoInfo {
    private final Optional<String> city;

    private final Optional<String> state;

    private final Optional<String> country;

    private final Optional<String> region;

    private final Optional<Double> latitude;

    private final Optional<Double> longitude;

    private final Map<String, Object> additionalProperties;

    private GeoInfo(
            Optional<String> city,
            Optional<String> state,
            Optional<String> country,
            Optional<String> region,
            Optional<Double> latitude,
            Optional<Double> longitude,
            Map<String, Object> additionalProperties) {
        this.city = city;
        this.state = state;
        this.country = country;
        this.region = region;
        this.latitude = latitude;
        this.longitude = longitude;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("city")
    public Optional<String> getCity() {
        return city;
    }

    @JsonProperty("state")
    public Optional<String> getState() {
        return state;
    }

    @JsonProperty("country")
    public Optional<String> getCountry() {
        return country;
    }

    @JsonProperty("region")
    public Optional<String> getRegion() {
        return region;
    }

    @JsonProperty("latitude")
    public Optional<Double> getLatitude() {
        return latitude;
    }

    @JsonProperty("longitude")
    public Optional<Double> getLongitude() {
        return longitude;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GeoInfo && equalTo((GeoInfo) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GeoInfo other) {
        return city.equals(other.city)
                && state.equals(other.state)
                && country.equals(other.country)
                && region.equals(other.region)
                && latitude.equals(other.latitude)
                && longitude.equals(other.longitude);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.city, this.state, this.country, this.region, this.latitude, this.longitude);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> city = Optional.empty();

        private Optional<String> state = Optional.empty();

        private Optional<String> country = Optional.empty();

        private Optional<String> region = Optional.empty();

        private Optional<Double> latitude = Optional.empty();

        private Optional<Double> longitude = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GeoInfo other) {
            city(other.getCity());
            state(other.getState());
            country(other.getCountry());
            region(other.getRegion());
            latitude(other.getLatitude());
            longitude(other.getLongitude());
            return this;
        }

        @JsonSetter(value = "city", nulls = Nulls.SKIP)
        public Builder city(Optional<String> city) {
            this.city = city;
            return this;
        }

        public Builder city(String city) {
            this.city = Optional.ofNullable(city);
            return this;
        }

        @JsonSetter(value = "state", nulls = Nulls.SKIP)
        public Builder state(Optional<String> state) {
            this.state = state;
            return this;
        }

        public Builder state(String state) {
            this.state = Optional.ofNullable(state);
            return this;
        }

        @JsonSetter(value = "country", nulls = Nulls.SKIP)
        public Builder country(Optional<String> country) {
            this.country = country;
            return this;
        }

        public Builder country(String country) {
            this.country = Optional.ofNullable(country);
            return this;
        }

        @JsonSetter(value = "region", nulls = Nulls.SKIP)
        public Builder region(Optional<String> region) {
            this.region = region;
            return this;
        }

        public Builder region(String region) {
            this.region = Optional.ofNullable(region);
            return this;
        }

        @JsonSetter(value = "latitude", nulls = Nulls.SKIP)
        public Builder latitude(Optional<Double> latitude) {
            this.latitude = latitude;
            return this;
        }

        public Builder latitude(Double latitude) {
            this.latitude = Optional.ofNullable(latitude);
            return this;
        }

        @JsonSetter(value = "longitude", nulls = Nulls.SKIP)
        public Builder longitude(Optional<Double> longitude) {
            this.longitude = longitude;
            return this;
        }

        public Builder longitude(Double longitude) {
            this.longitude = Optional.ofNullable(longitude);
            return this;
        }

        public GeoInfo build() {
            return new GeoInfo(city, state, country, region, latitude, longitude, additionalProperties);
        }
    }
}
