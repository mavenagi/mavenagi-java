/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.inbox;

import com.mavenagi.core.ClientOptions;
import com.mavenagi.core.RequestOptions;
import com.mavenagi.resources.commons.types.InboxItem;
import com.mavenagi.resources.commons.types.InboxItemFix;
import com.mavenagi.resources.inbox.requests.InboxItemFixRequest;
import com.mavenagi.resources.inbox.requests.InboxItemIgnoreRequest;
import com.mavenagi.resources.inbox.requests.InboxItemRequest;
import com.mavenagi.resources.inbox.types.ApplyInboxItemFixRequest;
import com.mavenagi.resources.inbox.types.InboxSearchRequest;
import com.mavenagi.resources.inbox.types.InboxSearchResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncInboxClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawInboxClient rawClient;

    public AsyncInboxClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawInboxClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawInboxClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Retrieve a paginated list of inbox items for an agent.
     */
    public CompletableFuture<InboxSearchResponse> search() {
        return this.rawClient.search().thenApply(response -> response.body());
    }

    /**
     * Retrieve a paginated list of inbox items for an agent.
     */
    public CompletableFuture<InboxSearchResponse> search(InboxSearchRequest request) {
        return this.rawClient.search(request).thenApply(response -> response.body());
    }

    /**
     * Retrieve a paginated list of inbox items for an agent.
     */
    public CompletableFuture<InboxSearchResponse> search(InboxSearchRequest request, RequestOptions requestOptions) {
        return this.rawClient.search(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Retrieve details of a specific inbox item by its ID.
     */
    public CompletableFuture<InboxItem> get(String inboxItemId, InboxItemRequest request) {
        return this.rawClient.get(inboxItemId, request).thenApply(response -> response.body());
    }

    /**
     * Retrieve details of a specific inbox item by its ID.
     */
    public CompletableFuture<InboxItem> get(
            String inboxItemId, InboxItemRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(inboxItemId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Retrieve a suggested fix. Includes document information if the fix is a Missing Knowledge suggestion.
     */
    public CompletableFuture<InboxItemFix> getFix(String inboxItemFixId, InboxItemFixRequest request) {
        return this.rawClient.getFix(inboxItemFixId, request).thenApply(response -> response.body());
    }

    /**
     * Retrieve a suggested fix. Includes document information if the fix is a Missing Knowledge suggestion.
     */
    public CompletableFuture<InboxItemFix> getFix(
            String inboxItemFixId, InboxItemFixRequest request, RequestOptions requestOptions) {
        return this.rawClient.getFix(inboxItemFixId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Apply a fix to an inbox item with a specific document.
     */
    public CompletableFuture<Void> applyFix(String inboxItemFixId, ApplyInboxItemFixRequest request) {
        return this.rawClient.applyFix(inboxItemFixId, request).thenApply(response -> response.body());
    }

    /**
     * Apply a fix to an inbox item with a specific document.
     */
    public CompletableFuture<Void> applyFix(
            String inboxItemFixId, ApplyInboxItemFixRequest request, RequestOptions requestOptions) {
        return this.rawClient.applyFix(inboxItemFixId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Ignore a specific inbox item by its ID.
     */
    public CompletableFuture<Void> ignore(String inboxItemId, InboxItemIgnoreRequest request) {
        return this.rawClient.ignore(inboxItemId, request).thenApply(response -> response.body());
    }

    /**
     * Ignore a specific inbox item by its ID.
     */
    public CompletableFuture<Void> ignore(
            String inboxItemId, InboxItemIgnoreRequest request, RequestOptions requestOptions) {
        return this.rawClient.ignore(inboxItemId, request, requestOptions).thenApply(response -> response.body());
    }
}
