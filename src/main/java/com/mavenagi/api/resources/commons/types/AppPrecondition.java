/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AppPrecondition.Builder.class)
public final class AppPrecondition implements IPreconditionBase {
    private final Optional<PreconditionOperator> operator;

    private final String appId;

    private final Map<String, Object> additionalProperties;

    private AppPrecondition(
            Optional<PreconditionOperator> operator, String appId, Map<String, Object> additionalProperties) {
        this.operator = operator;
        this.appId = appId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Operator to apply to this precondition
     */
    @JsonProperty("operator")
    @java.lang.Override
    public Optional<PreconditionOperator> getOperator() {
        return operator;
    }

    /**
     * @return Match only conversations created by this appId
     */
    @JsonProperty("appId")
    public String getAppId() {
        return appId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AppPrecondition && equalTo((AppPrecondition) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AppPrecondition other) {
        return operator.equals(other.operator) && appId.equals(other.appId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.operator, this.appId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AppIdStage builder() {
        return new Builder();
    }

    public interface AppIdStage {
        _FinalStage appId(@NotNull String appId);

        Builder from(AppPrecondition other);
    }

    public interface _FinalStage {
        AppPrecondition build();

        _FinalStage operator(Optional<PreconditionOperator> operator);

        _FinalStage operator(PreconditionOperator operator);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AppIdStage, _FinalStage {
        private String appId;

        private Optional<PreconditionOperator> operator = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AppPrecondition other) {
            operator(other.getOperator());
            appId(other.getAppId());
            return this;
        }

        /**
         * <p>Match only conversations created by this appId</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("appId")
        public _FinalStage appId(@NotNull String appId) {
            this.appId = Objects.requireNonNull(appId, "appId must not be null");
            return this;
        }

        /**
         * <p>Operator to apply to this precondition</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage operator(PreconditionOperator operator) {
            this.operator = Optional.ofNullable(operator);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "operator", nulls = Nulls.SKIP)
        public _FinalStage operator(Optional<PreconditionOperator> operator) {
            this.operator = operator;
            return this;
        }

        @java.lang.Override
        public AppPrecondition build() {
            return new AppPrecondition(operator, appId, additionalProperties);
        }
    }
}
