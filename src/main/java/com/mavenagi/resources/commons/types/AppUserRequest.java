/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AppUserRequest.Builder.class)
public final class AppUserRequest implements IAppUser {
    private final Set<AppUserIdentifier> identifiers;

    private final Map<String, UserData> data;

    private final EntityIdBase userId;

    private final Map<String, Object> additionalProperties;

    private AppUserRequest(
            Set<AppUserIdentifier> identifiers,
            Map<String, UserData> data,
            EntityIdBase userId,
            Map<String, Object> additionalProperties) {
        this.identifiers = identifiers;
        this.data = data;
        this.userId = userId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Used to determine whether two users from different apps are the same
     */
    @JsonProperty("identifiers")
    @java.lang.Override
    public Set<AppUserIdentifier> getIdentifiers() {
        return identifiers;
    }

    @JsonProperty("data")
    @java.lang.Override
    public Map<String, UserData> getData() {
        return data;
    }

    /**
     * @return ID that uniquely identifies this app user
     */
    @JsonProperty("userId")
    public EntityIdBase getUserId() {
        return userId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AppUserRequest && equalTo((AppUserRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AppUserRequest other) {
        return identifiers.equals(other.identifiers) && data.equals(other.data) && userId.equals(other.userId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.identifiers, this.data, this.userId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UserIdStage builder() {
        return new Builder();
    }

    public interface UserIdStage {
        /**
         * <p>ID that uniquely identifies this app user</p>
         */
        _FinalStage userId(@NotNull EntityIdBase userId);

        Builder from(AppUserRequest other);
    }

    public interface _FinalStage {
        AppUserRequest build();

        /**
         * <p>Used to determine whether two users from different apps are the same</p>
         */
        _FinalStage identifiers(Set<AppUserIdentifier> identifiers);

        _FinalStage addIdentifiers(AppUserIdentifier identifiers);

        _FinalStage addAllIdentifiers(Set<AppUserIdentifier> identifiers);

        _FinalStage data(Map<String, UserData> data);

        _FinalStage putAllData(Map<String, UserData> data);

        _FinalStage data(String key, UserData value);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements UserIdStage, _FinalStage {
        private EntityIdBase userId;

        private Map<String, UserData> data = new LinkedHashMap<>();

        private Set<AppUserIdentifier> identifiers = new LinkedHashSet<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AppUserRequest other) {
            identifiers(other.getIdentifiers());
            data(other.getData());
            userId(other.getUserId());
            return this;
        }

        /**
         * <p>ID that uniquely identifies this app user</p>
         * <p>ID that uniquely identifies this app user</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("userId")
        public _FinalStage userId(@NotNull EntityIdBase userId) {
            this.userId = Objects.requireNonNull(userId, "userId must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage data(String key, UserData value) {
            this.data.put(key, value);
            return this;
        }

        @java.lang.Override
        public _FinalStage putAllData(Map<String, UserData> data) {
            this.data.putAll(data);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public _FinalStage data(Map<String, UserData> data) {
            this.data.clear();
            this.data.putAll(data);
            return this;
        }

        /**
         * <p>Used to determine whether two users from different apps are the same</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllIdentifiers(Set<AppUserIdentifier> identifiers) {
            this.identifiers.addAll(identifiers);
            return this;
        }

        /**
         * <p>Used to determine whether two users from different apps are the same</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addIdentifiers(AppUserIdentifier identifiers) {
            this.identifiers.add(identifiers);
            return this;
        }

        /**
         * <p>Used to determine whether two users from different apps are the same</p>
         */
        @java.lang.Override
        @JsonSetter(value = "identifiers", nulls = Nulls.SKIP)
        public _FinalStage identifiers(Set<AppUserIdentifier> identifiers) {
            this.identifiers.clear();
            this.identifiers.addAll(identifiers);
            return this;
        }

        @java.lang.Override
        public AppUserRequest build() {
            return new AppUserRequest(identifiers, data, userId, additionalProperties);
        }
    }
}
