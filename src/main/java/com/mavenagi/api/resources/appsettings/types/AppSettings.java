/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.appsettings.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AppSettings.Builder.class)
public final class AppSettings {
    private final String organizationId;

    private final String agentId;

    private final Map<String, Object> settings;

    private final Map<String, Object> additionalProperties;

    private AppSettings(
            String organizationId,
            String agentId,
            Map<String, Object> settings,
            Map<String, Object> additionalProperties) {
        this.organizationId = organizationId;
        this.agentId = agentId;
        this.settings = settings;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of an organization.
     */
    @JsonProperty("organizationId")
    public String getOrganizationId() {
        return organizationId;
    }

    /**
     * @return The ID of an agent.
     */
    @JsonProperty("agentId")
    public String getAgentId() {
        return agentId;
    }

    /**
     * @return The settings that were set during installation.
     */
    @JsonProperty("settings")
    public Map<String, Object> getSettings() {
        return settings;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AppSettings && equalTo((AppSettings) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AppSettings other) {
        return organizationId.equals(other.organizationId)
                && agentId.equals(other.agentId)
                && settings.equals(other.settings);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.organizationId, this.agentId, this.settings);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static OrganizationIdStage builder() {
        return new Builder();
    }

    public interface OrganizationIdStage {
        AgentIdStage organizationId(@NotNull String organizationId);

        Builder from(AppSettings other);
    }

    public interface AgentIdStage {
        _FinalStage agentId(@NotNull String agentId);
    }

    public interface _FinalStage {
        AppSettings build();

        _FinalStage settings(Map<String, Object> settings);

        _FinalStage putAllSettings(Map<String, Object> settings);

        _FinalStage settings(String key, Object value);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements OrganizationIdStage, AgentIdStage, _FinalStage {
        private String organizationId;

        private String agentId;

        private Map<String, Object> settings = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AppSettings other) {
            organizationId(other.getOrganizationId());
            agentId(other.getAgentId());
            settings(other.getSettings());
            return this;
        }

        /**
         * <p>The ID of an organization.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("organizationId")
        public AgentIdStage organizationId(@NotNull String organizationId) {
            this.organizationId = Objects.requireNonNull(organizationId, "organizationId must not be null");
            return this;
        }

        /**
         * <p>The ID of an agent.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("agentId")
        public _FinalStage agentId(@NotNull String agentId) {
            this.agentId = Objects.requireNonNull(agentId, "agentId must not be null");
            return this;
        }

        /**
         * <p>The settings that were set during installation.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage settings(String key, Object value) {
            this.settings.put(key, value);
            return this;
        }

        /**
         * <p>The settings that were set during installation.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage putAllSettings(Map<String, Object> settings) {
            this.settings.putAll(settings);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "settings", nulls = Nulls.SKIP)
        public _FinalStage settings(Map<String, Object> settings) {
            this.settings.clear();
            this.settings.putAll(settings);
            return this;
        }

        @java.lang.Override
        public AppSettings build() {
            return new AppSettings(organizationId, agentId, settings, additionalProperties);
        }
    }
}
