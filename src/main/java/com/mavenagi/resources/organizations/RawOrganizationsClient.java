/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.organizations;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.mavenagi.core.ClientOptions;
import com.mavenagi.core.MavenAGIApiException;
import com.mavenagi.core.MavenAGIException;
import com.mavenagi.core.MavenAGIHttpResponse;
import com.mavenagi.core.MediaTypes;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.core.RequestOptions;
import com.mavenagi.resources.analytics.types.ChartResponse;
import com.mavenagi.resources.analytics.types.ConversationChartRequest;
import com.mavenagi.resources.analytics.types.ConversationTableRequest;
import com.mavenagi.resources.analytics.types.ConversationTableResponse;
import com.mavenagi.resources.commons.errors.BadRequestError;
import com.mavenagi.resources.commons.errors.NotFoundError;
import com.mavenagi.resources.commons.errors.ServerError;
import com.mavenagi.resources.commons.types.ErrorMessage;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawOrganizationsClient {
    protected final ClientOptions clientOptions;

    public RawOrganizationsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Retrieves structured conversation data across all organizations, formatted as a table,
     * allowing users to group, filter, and define specific metrics to display as columns.
     * <p>&lt;Tip&gt;
     * This endpoint requires additional permissions. Contact support to request access.
     * &lt;/Tip&gt;</p>
     */
    public MavenAGIHttpResponse<ConversationTableResponse> getConversationTable(ConversationTableRequest request) {
        return getConversationTable(request, null);
    }

    /**
     * Retrieves structured conversation data across all organizations, formatted as a table,
     * allowing users to group, filter, and define specific metrics to display as columns.
     * <p>&lt;Tip&gt;
     * This endpoint requires additional permissions. Contact support to request access.
     * &lt;/Tip&gt;</p>
     */
    public MavenAGIHttpResponse<ConversationTableResponse> getConversationTable(
            ConversationTableRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/organizations")
                .addPathSegments("tables/conversations")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new MavenAGIException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MavenAGIHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ConversationTableResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class), response);
                    case 500:
                        throw new ServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new MavenAGIApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MavenAGIException("Network error executing HTTP request", e);
        }
    }

    /**
     * Fetches conversation data across all organizations, visualized in a chart format.
     * Supported chart types include pie chart, date histogram, and stacked bar charts.
     * <p>&lt;Tip&gt;
     * This endpoint requires additional permissions. Contact support to request access.
     * &lt;/Tip&gt;</p>
     */
    public MavenAGIHttpResponse<ChartResponse> getConversationChart(ConversationChartRequest request) {
        return getConversationChart(request, null);
    }

    /**
     * Fetches conversation data across all organizations, visualized in a chart format.
     * Supported chart types include pie chart, date histogram, and stacked bar charts.
     * <p>&lt;Tip&gt;
     * This endpoint requires additional permissions. Contact support to request access.
     * &lt;/Tip&gt;</p>
     */
    public MavenAGIHttpResponse<ChartResponse> getConversationChart(
            ConversationChartRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/organizations")
                .addPathSegments("charts/conversations")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new MavenAGIException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new MavenAGIHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ChartResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class), response);
                    case 500:
                        throw new ServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorMessage.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new MavenAGIApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new MavenAGIException("Network error executing HTTP request", e);
        }
    }
}
