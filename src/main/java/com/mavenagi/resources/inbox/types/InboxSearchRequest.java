/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.inbox.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.resources.commons.types.InboxItemStatus;
import com.mavenagi.resources.commons.types.InboxItemType;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InboxSearchRequest.Builder.class)
public final class InboxSearchRequest implements IBaseInboxSearchRequest {
    private final Optional<Integer> page;

    private final Optional<Integer> size;

    private final Optional<List<InboxItemStatus>> statuses;

    private final Optional<List<InboxItemType>> type;

    private final Optional<OffsetDateTime> createdAfter;

    private final Optional<OffsetDateTime> createdBefore;

    private final Optional<String> sortId;

    private final Optional<Boolean> sortDesc;

    private final Map<String, Object> additionalProperties;

    private InboxSearchRequest(
            Optional<Integer> page,
            Optional<Integer> size,
            Optional<List<InboxItemStatus>> statuses,
            Optional<List<InboxItemType>> type,
            Optional<OffsetDateTime> createdAfter,
            Optional<OffsetDateTime> createdBefore,
            Optional<String> sortId,
            Optional<Boolean> sortDesc,
            Map<String, Object> additionalProperties) {
        this.page = page;
        this.size = size;
        this.statuses = statuses;
        this.type = type;
        this.createdAfter = createdAfter;
        this.createdBefore = createdBefore;
        this.sortId = sortId;
        this.sortDesc = sortDesc;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Page number to return, defaults to 0
     */
    @JsonProperty("page")
    @java.lang.Override
    public Optional<Integer> getPage() {
        return page;
    }

    /**
     * @return The size of the page to return, defaults to 20
     */
    @JsonProperty("size")
    @java.lang.Override
    public Optional<Integer> getSize() {
        return size;
    }

    /**
     * @return List of inbox item statuses to filter by.
     */
    @JsonProperty("statuses")
    public Optional<List<InboxItemStatus>> getStatuses() {
        return statuses;
    }

    /**
     * @return List of inbox item types to filter by.
     */
    @JsonProperty("type")
    public Optional<List<InboxItemType>> getType() {
        return type;
    }

    /**
     * @return Filter for items created after this timestamp.
     */
    @JsonProperty("createdAfter")
    public Optional<OffsetDateTime> getCreatedAfter() {
        return createdAfter;
    }

    /**
     * @return Filter for items created before this timestamp.
     */
    @JsonProperty("createdBefore")
    public Optional<OffsetDateTime> getCreatedBefore() {
        return createdBefore;
    }

    /**
     * @return The field to sort by, defaults to created timestamp.
     */
    @JsonProperty("sortId")
    public Optional<String> getSortId() {
        return sortId;
    }

    /**
     * @return Whether to sort descending, defaults to true.
     */
    @JsonProperty("sortDesc")
    public Optional<Boolean> getSortDesc() {
        return sortDesc;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InboxSearchRequest && equalTo((InboxSearchRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InboxSearchRequest other) {
        return page.equals(other.page)
                && size.equals(other.size)
                && statuses.equals(other.statuses)
                && type.equals(other.type)
                && createdAfter.equals(other.createdAfter)
                && createdBefore.equals(other.createdBefore)
                && sortId.equals(other.sortId)
                && sortDesc.equals(other.sortDesc);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.page,
                this.size,
                this.statuses,
                this.type,
                this.createdAfter,
                this.createdBefore,
                this.sortId,
                this.sortDesc);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> page = Optional.empty();

        private Optional<Integer> size = Optional.empty();

        private Optional<List<InboxItemStatus>> statuses = Optional.empty();

        private Optional<List<InboxItemType>> type = Optional.empty();

        private Optional<OffsetDateTime> createdAfter = Optional.empty();

        private Optional<OffsetDateTime> createdBefore = Optional.empty();

        private Optional<String> sortId = Optional.empty();

        private Optional<Boolean> sortDesc = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(InboxSearchRequest other) {
            page(other.getPage());
            size(other.getSize());
            statuses(other.getStatuses());
            type(other.getType());
            createdAfter(other.getCreatedAfter());
            createdBefore(other.getCreatedBefore());
            sortId(other.getSortId());
            sortDesc(other.getSortDesc());
            return this;
        }

        /**
         * <p>Page number to return, defaults to 0</p>
         */
        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public Builder page(Optional<Integer> page) {
            this.page = page;
            return this;
        }

        public Builder page(Integer page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * <p>The size of the page to return, defaults to 20</p>
         */
        @JsonSetter(value = "size", nulls = Nulls.SKIP)
        public Builder size(Optional<Integer> size) {
            this.size = size;
            return this;
        }

        public Builder size(Integer size) {
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * <p>List of inbox item statuses to filter by.</p>
         */
        @JsonSetter(value = "statuses", nulls = Nulls.SKIP)
        public Builder statuses(Optional<List<InboxItemStatus>> statuses) {
            this.statuses = statuses;
            return this;
        }

        public Builder statuses(List<InboxItemStatus> statuses) {
            this.statuses = Optional.ofNullable(statuses);
            return this;
        }

        /**
         * <p>List of inbox item types to filter by.</p>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<List<InboxItemType>> type) {
            this.type = type;
            return this;
        }

        public Builder type(List<InboxItemType> type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>Filter for items created after this timestamp.</p>
         */
        @JsonSetter(value = "createdAfter", nulls = Nulls.SKIP)
        public Builder createdAfter(Optional<OffsetDateTime> createdAfter) {
            this.createdAfter = createdAfter;
            return this;
        }

        public Builder createdAfter(OffsetDateTime createdAfter) {
            this.createdAfter = Optional.ofNullable(createdAfter);
            return this;
        }

        /**
         * <p>Filter for items created before this timestamp.</p>
         */
        @JsonSetter(value = "createdBefore", nulls = Nulls.SKIP)
        public Builder createdBefore(Optional<OffsetDateTime> createdBefore) {
            this.createdBefore = createdBefore;
            return this;
        }

        public Builder createdBefore(OffsetDateTime createdBefore) {
            this.createdBefore = Optional.ofNullable(createdBefore);
            return this;
        }

        /**
         * <p>The field to sort by, defaults to created timestamp.</p>
         */
        @JsonSetter(value = "sortId", nulls = Nulls.SKIP)
        public Builder sortId(Optional<String> sortId) {
            this.sortId = sortId;
            return this;
        }

        public Builder sortId(String sortId) {
            this.sortId = Optional.ofNullable(sortId);
            return this;
        }

        /**
         * <p>Whether to sort descending, defaults to true.</p>
         */
        @JsonSetter(value = "sortDesc", nulls = Nulls.SKIP)
        public Builder sortDesc(Optional<Boolean> sortDesc) {
            this.sortDesc = sortDesc;
            return this;
        }

        public Builder sortDesc(Boolean sortDesc) {
            this.sortDesc = Optional.ofNullable(sortDesc);
            return this;
        }

        public InboxSearchRequest build() {
            return new InboxSearchRequest(
                    page, size, statuses, type, createdAfter, createdBefore, sortId, sortDesc, additionalProperties);
        }
    }
}
