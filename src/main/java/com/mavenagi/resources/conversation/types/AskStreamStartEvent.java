/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.conversation.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.resources.commons.types.EntityId;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AskStreamStartEvent.Builder.class)
public final class AskStreamStartEvent {
    private final EntityId conversationMessageId;

    private final Map<String, Object> additionalProperties;

    private AskStreamStartEvent(EntityId conversationMessageId, Map<String, Object> additionalProperties) {
        this.conversationMessageId = conversationMessageId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("conversationMessageId")
    public EntityId getConversationMessageId() {
        return conversationMessageId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AskStreamStartEvent && equalTo((AskStreamStartEvent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AskStreamStartEvent other) {
        return conversationMessageId.equals(other.conversationMessageId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.conversationMessageId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ConversationMessageIdStage builder() {
        return new Builder();
    }

    public interface ConversationMessageIdStage {
        _FinalStage conversationMessageId(@NotNull EntityId conversationMessageId);

        Builder from(AskStreamStartEvent other);
    }

    public interface _FinalStage {
        AskStreamStartEvent build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ConversationMessageIdStage, _FinalStage {
        private EntityId conversationMessageId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AskStreamStartEvent other) {
            conversationMessageId(other.getConversationMessageId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("conversationMessageId")
        public _FinalStage conversationMessageId(@NotNull EntityId conversationMessageId) {
            this.conversationMessageId =
                    Objects.requireNonNull(conversationMessageId, "conversationMessageId must not be null");
            return this;
        }

        @java.lang.Override
        public AskStreamStartEvent build() {
            return new AskStreamStartEvent(conversationMessageId, additionalProperties);
        }
    }
}
