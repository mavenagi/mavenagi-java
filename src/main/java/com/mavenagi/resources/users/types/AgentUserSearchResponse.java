/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.users.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.resources.commons.types.IPage;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AgentUserSearchResponse.Builder.class)
public final class AgentUserSearchResponse implements IPage {
    private final int number;

    private final int size;

    private final long totalElements;

    private final int totalPages;

    private final List<AgentUser> agentUsers;

    private final Map<String, Object> additionalProperties;

    private AgentUserSearchResponse(
            int number,
            int size,
            long totalElements,
            int totalPages,
            List<AgentUser> agentUsers,
            Map<String, Object> additionalProperties) {
        this.number = number;
        this.size = size;
        this.totalElements = totalElements;
        this.totalPages = totalPages;
        this.agentUsers = agentUsers;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The page being returned, starts at 0
     */
    @JsonProperty("number")
    @java.lang.Override
    public int getNumber() {
        return number;
    }

    /**
     * @return The number of elements in this page
     */
    @JsonProperty("size")
    @java.lang.Override
    public int getSize() {
        return size;
    }

    /**
     * @return The total number of elements in the collection
     */
    @JsonProperty("totalElements")
    @java.lang.Override
    public long getTotalElements() {
        return totalElements;
    }

    /**
     * @return The total number of pages in the collection
     */
    @JsonProperty("totalPages")
    @java.lang.Override
    public int getTotalPages() {
        return totalPages;
    }

    /**
     * @return The agent users that match the search criteria
     */
    @JsonProperty("agentUsers")
    public List<AgentUser> getAgentUsers() {
        return agentUsers;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AgentUserSearchResponse && equalTo((AgentUserSearchResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AgentUserSearchResponse other) {
        return number == other.number
                && size == other.size
                && totalElements == other.totalElements
                && totalPages == other.totalPages
                && agentUsers.equals(other.agentUsers);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.number, this.size, this.totalElements, this.totalPages, this.agentUsers);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NumberStage builder() {
        return new Builder();
    }

    public interface NumberStage {
        /**
         * <p>The page being returned, starts at 0</p>
         */
        SizeStage number(int number);

        Builder from(AgentUserSearchResponse other);
    }

    public interface SizeStage {
        /**
         * <p>The number of elements in this page</p>
         */
        TotalElementsStage size(int size);
    }

    public interface TotalElementsStage {
        /**
         * <p>The total number of elements in the collection</p>
         */
        TotalPagesStage totalElements(long totalElements);
    }

    public interface TotalPagesStage {
        /**
         * <p>The total number of pages in the collection</p>
         */
        _FinalStage totalPages(int totalPages);
    }

    public interface _FinalStage {
        AgentUserSearchResponse build();

        /**
         * <p>The agent users that match the search criteria</p>
         */
        _FinalStage agentUsers(List<AgentUser> agentUsers);

        _FinalStage addAgentUsers(AgentUser agentUsers);

        _FinalStage addAllAgentUsers(List<AgentUser> agentUsers);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements NumberStage, SizeStage, TotalElementsStage, TotalPagesStage, _FinalStage {
        private int number;

        private int size;

        private long totalElements;

        private int totalPages;

        private List<AgentUser> agentUsers = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AgentUserSearchResponse other) {
            number(other.getNumber());
            size(other.getSize());
            totalElements(other.getTotalElements());
            totalPages(other.getTotalPages());
            agentUsers(other.getAgentUsers());
            return this;
        }

        /**
         * <p>The page being returned, starts at 0</p>
         * <p>The page being returned, starts at 0</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("number")
        public SizeStage number(int number) {
            this.number = number;
            return this;
        }

        /**
         * <p>The number of elements in this page</p>
         * <p>The number of elements in this page</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("size")
        public TotalElementsStage size(int size) {
            this.size = size;
            return this;
        }

        /**
         * <p>The total number of elements in the collection</p>
         * <p>The total number of elements in the collection</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("totalElements")
        public TotalPagesStage totalElements(long totalElements) {
            this.totalElements = totalElements;
            return this;
        }

        /**
         * <p>The total number of pages in the collection</p>
         * <p>The total number of pages in the collection</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("totalPages")
        public _FinalStage totalPages(int totalPages) {
            this.totalPages = totalPages;
            return this;
        }

        /**
         * <p>The agent users that match the search criteria</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllAgentUsers(List<AgentUser> agentUsers) {
            this.agentUsers.addAll(agentUsers);
            return this;
        }

        /**
         * <p>The agent users that match the search criteria</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAgentUsers(AgentUser agentUsers) {
            this.agentUsers.add(agentUsers);
            return this;
        }

        /**
         * <p>The agent users that match the search criteria</p>
         */
        @java.lang.Override
        @JsonSetter(value = "agentUsers", nulls = Nulls.SKIP)
        public _FinalStage agentUsers(List<AgentUser> agentUsers) {
            this.agentUsers.clear();
            this.agentUsers.addAll(agentUsers);
            return this;
        }

        @java.lang.Override
        public AgentUserSearchResponse build() {
            return new AgentUserSearchResponse(
                    number, size, totalElements, totalPages, agentUsers, additionalProperties);
        }
    }
}
