/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.assets;

import com.mavenagi.core.ClientOptions;
import com.mavenagi.core.RequestOptions;
import com.mavenagi.resources.assets.types.CommitAssetUploadRequest;
import com.mavenagi.resources.assets.types.InitiateAssetUploadRequest;
import com.mavenagi.resources.assets.types.InitiateAssetUploadResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncAssetsClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawAssetsClient rawClient;

    public AsyncAssetsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawAssetsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawAssetsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Initiate an upload.
     * Returns a pre-signed URL for direct file upload and an asset ID for subsequent operations.
     */
    public CompletableFuture<InitiateAssetUploadResponse> initiateUpload(InitiateAssetUploadRequest request) {
        return this.rawClient.initiateUpload(request).thenApply(response -> response.body());
    }

    /**
     * Initiate an upload.
     * Returns a pre-signed URL for direct file upload and an asset ID for subsequent operations.
     */
    public CompletableFuture<InitiateAssetUploadResponse> initiateUpload(
            InitiateAssetUploadRequest request, RequestOptions requestOptions) {
        return this.rawClient.initiateUpload(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Commit an upload after successful file transfer.
     * Updates the asset status and makes it available for use.
     */
    public CompletableFuture<Void> commitUpload(String assetReferenceId) {
        return this.rawClient.commitUpload(assetReferenceId).thenApply(response -> response.body());
    }

    /**
     * Commit an upload after successful file transfer.
     * Updates the asset status and makes it available for use.
     */
    public CompletableFuture<Void> commitUpload(String assetReferenceId, CommitAssetUploadRequest request) {
        return this.rawClient.commitUpload(assetReferenceId, request).thenApply(response -> response.body());
    }

    /**
     * Commit an upload after successful file transfer.
     * Updates the asset status and makes it available for use.
     */
    public CompletableFuture<Void> commitUpload(
            String assetReferenceId, CommitAssetUploadRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .commitUpload(assetReferenceId, request, requestOptions)
                .thenApply(response -> response.body());
    }
}
