/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.users.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AgentUserFilter.Builder.class)
public final class AgentUserFilter {
    private final Optional<String> search;

    private final Optional<List<String>> identifiers;

    private final Map<String, Object> additionalProperties;

    private AgentUserFilter(
            Optional<String> search, Optional<List<String>> identifiers, Map<String, Object> additionalProperties) {
        this.search = search;
        this.identifiers = identifiers;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Full-text search query for matching agent users by content.
     * When you search with this parameter, you're performing a full-text search across the user identifiers.
     */
    @JsonProperty("search")
    public Optional<String> getSearch() {
        return search;
    }

    /**
     * @return Filter by identifiers
     */
    @JsonProperty("identifiers")
    public Optional<List<String>> getIdentifiers() {
        return identifiers;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AgentUserFilter && equalTo((AgentUserFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AgentUserFilter other) {
        return search.equals(other.search) && identifiers.equals(other.identifiers);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.search, this.identifiers);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> search = Optional.empty();

        private Optional<List<String>> identifiers = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AgentUserFilter other) {
            search(other.getSearch());
            identifiers(other.getIdentifiers());
            return this;
        }

        /**
         * <p>Full-text search query for matching agent users by content.
         * When you search with this parameter, you're performing a full-text search across the user identifiers.</p>
         */
        @JsonSetter(value = "search", nulls = Nulls.SKIP)
        public Builder search(Optional<String> search) {
            this.search = search;
            return this;
        }

        public Builder search(String search) {
            this.search = Optional.ofNullable(search);
            return this;
        }

        /**
         * <p>Filter by identifiers</p>
         */
        @JsonSetter(value = "identifiers", nulls = Nulls.SKIP)
        public Builder identifiers(Optional<List<String>> identifiers) {
            this.identifiers = identifiers;
            return this;
        }

        public Builder identifiers(List<String> identifiers) {
            this.identifiers = Optional.ofNullable(identifiers);
            return this;
        }

        public AgentUserFilter build() {
            return new AgentUserFilter(search, identifiers, additionalProperties);
        }
    }
}
