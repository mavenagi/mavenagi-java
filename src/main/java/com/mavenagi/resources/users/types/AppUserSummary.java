/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.users.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.resources.commons.types.AppUserIdentifier;
import com.mavenagi.resources.commons.types.EntityId;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AppUserSummary.Builder.class)
public final class AppUserSummary {
    private final EntityId userId;

    private final Set<AppUserIdentifier> identifiers;

    private final Map<String, String> visibleData;

    private final Map<String, Object> additionalProperties;

    private AppUserSummary(
            EntityId userId,
            Set<AppUserIdentifier> identifiers,
            Map<String, String> visibleData,
            Map<String, Object> additionalProperties) {
        this.userId = userId;
        this.identifiers = identifiers;
        this.visibleData = visibleData;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return App provided user ID.
     */
    @JsonProperty("userId")
    public EntityId getUserId() {
        return userId;
    }

    /**
     * @return App provided identifiers for the user.
     */
    @JsonProperty("identifiers")
    public Set<AppUserIdentifier> getIdentifiers() {
        return identifiers;
    }

    /**
     * @return App provided data masked according to the data's visibility type. <code>HIDDEN</code> or <code>PARTIALLY_VISIBLE</code> data values will be not be fully returned.
     */
    @JsonProperty("visibleData")
    public Map<String, String> getVisibleData() {
        return visibleData;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AppUserSummary && equalTo((AppUserSummary) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AppUserSummary other) {
        return userId.equals(other.userId)
                && identifiers.equals(other.identifiers)
                && visibleData.equals(other.visibleData);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.userId, this.identifiers, this.visibleData);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UserIdStage builder() {
        return new Builder();
    }

    public interface UserIdStage {
        /**
         * <p>App provided user ID.</p>
         */
        _FinalStage userId(@NotNull EntityId userId);

        Builder from(AppUserSummary other);
    }

    public interface _FinalStage {
        AppUserSummary build();

        /**
         * <p>App provided identifiers for the user.</p>
         */
        _FinalStage identifiers(Set<AppUserIdentifier> identifiers);

        _FinalStage addIdentifiers(AppUserIdentifier identifiers);

        _FinalStage addAllIdentifiers(Set<AppUserIdentifier> identifiers);

        /**
         * <p>App provided data masked according to the data's visibility type. <code>HIDDEN</code> or <code>PARTIALLY_VISIBLE</code> data values will be not be fully returned.</p>
         */
        _FinalStage visibleData(Map<String, String> visibleData);

        _FinalStage putAllVisibleData(Map<String, String> visibleData);

        _FinalStage visibleData(String key, String value);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements UserIdStage, _FinalStage {
        private EntityId userId;

        private Map<String, String> visibleData = new LinkedHashMap<>();

        private Set<AppUserIdentifier> identifiers = new LinkedHashSet<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AppUserSummary other) {
            userId(other.getUserId());
            identifiers(other.getIdentifiers());
            visibleData(other.getVisibleData());
            return this;
        }

        /**
         * <p>App provided user ID.</p>
         * <p>App provided user ID.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("userId")
        public _FinalStage userId(@NotNull EntityId userId) {
            this.userId = Objects.requireNonNull(userId, "userId must not be null");
            return this;
        }

        /**
         * <p>App provided data masked according to the data's visibility type. <code>HIDDEN</code> or <code>PARTIALLY_VISIBLE</code> data values will be not be fully returned.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage visibleData(String key, String value) {
            this.visibleData.put(key, value);
            return this;
        }

        /**
         * <p>App provided data masked according to the data's visibility type. <code>HIDDEN</code> or <code>PARTIALLY_VISIBLE</code> data values will be not be fully returned.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage putAllVisibleData(Map<String, String> visibleData) {
            this.visibleData.putAll(visibleData);
            return this;
        }

        /**
         * <p>App provided data masked according to the data's visibility type. <code>HIDDEN</code> or <code>PARTIALLY_VISIBLE</code> data values will be not be fully returned.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "visibleData", nulls = Nulls.SKIP)
        public _FinalStage visibleData(Map<String, String> visibleData) {
            this.visibleData.clear();
            this.visibleData.putAll(visibleData);
            return this;
        }

        /**
         * <p>App provided identifiers for the user.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllIdentifiers(Set<AppUserIdentifier> identifiers) {
            this.identifiers.addAll(identifiers);
            return this;
        }

        /**
         * <p>App provided identifiers for the user.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addIdentifiers(AppUserIdentifier identifiers) {
            this.identifiers.add(identifiers);
            return this;
        }

        /**
         * <p>App provided identifiers for the user.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "identifiers", nulls = Nulls.SKIP)
        public _FinalStage identifiers(Set<AppUserIdentifier> identifiers) {
            this.identifiers.clear();
            this.identifiers.addAll(identifiers);
            return this;
        }

        @java.lang.Override
        public AppUserSummary build() {
            return new AppUserSummary(userId, identifiers, visibleData, additionalProperties);
        }
    }
}
