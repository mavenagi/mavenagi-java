/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InboxItemKnowledgeBaseAlert.Builder.class)
public final class InboxItemKnowledgeBaseAlert implements IInboxItemBase {
    private final EntityId id;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final InboxItemStatus status;

    private final InboxItemFixDeactivateKnowledgeBase fix;

    private final KnowledgeBaseInformation knowledgeBase;

    private final Map<String, Object> additionalProperties;

    private InboxItemKnowledgeBaseAlert(
            EntityId id,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            InboxItemStatus status,
            InboxItemFixDeactivateKnowledgeBase fix,
            KnowledgeBaseInformation knowledgeBase,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.status = status;
        this.fix = fix;
        this.knowledgeBase = knowledgeBase;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique identifier for the inbox item.
     */
    @JsonProperty("id")
    @java.lang.Override
    public EntityId getId() {
        return id;
    }

    /**
     * @return Timestamp when the inbox item was created.
     */
    @JsonProperty("createdAt")
    @java.lang.Override
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return Timestamp when the inbox item was last updated.
     */
    @JsonProperty("updatedAt")
    @java.lang.Override
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return Status of the inbox item.
     */
    @JsonProperty("status")
    @java.lang.Override
    public InboxItemStatus getStatus() {
        return status;
    }

    /**
     * @return Fix associated with the inbox item.
     */
    @JsonProperty("fix")
    public InboxItemFixDeactivateKnowledgeBase getFix() {
        return fix;
    }

    /**
     * @return Information about the Knowledge Base referenced in the inbox item.
     */
    @JsonProperty("knowledgeBase")
    public KnowledgeBaseInformation getKnowledgeBase() {
        return knowledgeBase;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InboxItemKnowledgeBaseAlert && equalTo((InboxItemKnowledgeBaseAlert) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InboxItemKnowledgeBaseAlert other) {
        return id.equals(other.id)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && status.equals(other.status)
                && fix.equals(other.fix)
                && knowledgeBase.equals(other.knowledgeBase);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.createdAt, this.updatedAt, this.status, this.fix, this.knowledgeBase);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        CreatedAtStage id(@NotNull EntityId id);

        Builder from(InboxItemKnowledgeBaseAlert other);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        StatusStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface StatusStage {
        FixStage status(@NotNull InboxItemStatus status);
    }

    public interface FixStage {
        KnowledgeBaseStage fix(@NotNull InboxItemFixDeactivateKnowledgeBase fix);
    }

    public interface KnowledgeBaseStage {
        _FinalStage knowledgeBase(@NotNull KnowledgeBaseInformation knowledgeBase);
    }

    public interface _FinalStage {
        InboxItemKnowledgeBaseAlert build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage, CreatedAtStage, UpdatedAtStage, StatusStage, FixStage, KnowledgeBaseStage, _FinalStage {
        private EntityId id;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private InboxItemStatus status;

        private InboxItemFixDeactivateKnowledgeBase fix;

        private KnowledgeBaseInformation knowledgeBase;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(InboxItemKnowledgeBaseAlert other) {
            id(other.getId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            status(other.getStatus());
            fix(other.getFix());
            knowledgeBase(other.getKnowledgeBase());
            return this;
        }

        /**
         * <p>Unique identifier for the inbox item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public CreatedAtStage id(@NotNull EntityId id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>Timestamp when the inbox item was created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>Timestamp when the inbox item was last updated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updatedAt")
        public StatusStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        /**
         * <p>Status of the inbox item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public FixStage status(@NotNull InboxItemStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>Fix associated with the inbox item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("fix")
        public KnowledgeBaseStage fix(@NotNull InboxItemFixDeactivateKnowledgeBase fix) {
            this.fix = Objects.requireNonNull(fix, "fix must not be null");
            return this;
        }

        /**
         * <p>Information about the Knowledge Base referenced in the inbox item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("knowledgeBase")
        public _FinalStage knowledgeBase(@NotNull KnowledgeBaseInformation knowledgeBase) {
            this.knowledgeBase = Objects.requireNonNull(knowledgeBase, "knowledgeBase must not be null");
            return this;
        }

        @java.lang.Override
        public InboxItemKnowledgeBaseAlert build() {
            return new InboxItemKnowledgeBaseAlert(
                    id, createdAt, updatedAt, status, fix, knowledgeBase, additionalProperties);
        }
    }
}
