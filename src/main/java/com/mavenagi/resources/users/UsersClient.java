/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.users;

import com.mavenagi.core.ClientOptions;
import com.mavenagi.core.RequestOptions;
import com.mavenagi.resources.commons.types.AppUserRequest;
import com.mavenagi.resources.commons.types.AppUserResponse;
import com.mavenagi.resources.users.requests.UserDeleteRequest;
import com.mavenagi.resources.users.requests.UserGetRequest;
import com.mavenagi.resources.users.types.AgentUser;
import com.mavenagi.resources.users.types.AgentUserSearchRequest;
import com.mavenagi.resources.users.types.AgentUserSearchResponse;

public class UsersClient {
    protected final ClientOptions clientOptions;

    private final RawUsersClient rawClient;

    public UsersClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawUsersClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawUsersClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Search across all agent users on an agent.
     * <p>Agent users are a merged view of the users created by individual apps.</p>
     */
    public AgentUserSearchResponse search() {
        return this.rawClient.search().body();
    }

    /**
     * Search across all agent users on an agent.
     * <p>Agent users are a merged view of the users created by individual apps.</p>
     */
    public AgentUserSearchResponse search(AgentUserSearchRequest request) {
        return this.rawClient.search(request).body();
    }

    /**
     * Search across all agent users on an agent.
     * <p>Agent users are a merged view of the users created by individual apps.</p>
     */
    public AgentUserSearchResponse search(AgentUserSearchRequest request, RequestOptions requestOptions) {
        return this.rawClient.search(request, requestOptions).body();
    }

    /**
     * Get an agent user by its supplied ID.
     * <p>Agent users are a merged view of the users created by individual apps.</p>
     */
    public AgentUser getAgentUser(String userId) {
        return this.rawClient.getAgentUser(userId).body();
    }

    /**
     * Get an agent user by its supplied ID.
     * <p>Agent users are a merged view of the users created by individual apps.</p>
     */
    public AgentUser getAgentUser(String userId, RequestOptions requestOptions) {
        return this.rawClient.getAgentUser(userId, requestOptions).body();
    }

    /**
     * Update an app user or create it if it doesn't exist.
     */
    public AppUserResponse createOrUpdate(AppUserRequest request) {
        return this.rawClient.createOrUpdate(request).body();
    }

    /**
     * Update an app user or create it if it doesn't exist.
     */
    public AppUserResponse createOrUpdate(AppUserRequest request, RequestOptions requestOptions) {
        return this.rawClient.createOrUpdate(request, requestOptions).body();
    }

    /**
     * Get an app user by its supplied ID
     */
    public AppUserResponse get(String userId) {
        return this.rawClient.get(userId).body();
    }

    /**
     * Get an app user by its supplied ID
     */
    public AppUserResponse get(String userId, UserGetRequest request) {
        return this.rawClient.get(userId, request).body();
    }

    /**
     * Get an app user by its supplied ID
     */
    public AppUserResponse get(String userId, UserGetRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(userId, request, requestOptions).body();
    }

    /**
     * Deletes all identifiers and user data saved by the specified app.
     * Does not modify data or identifiers saved by other apps.
     * <p>If this user is linked to a user from another app, it will not be unlinked. Unlinking of users is not yet supported.</p>
     * <p>&lt;Warning&gt;This is a destructive operation and cannot be undone.&lt;/Warning&gt;</p>
     */
    public void delete(String userId) {
        this.rawClient.delete(userId).body();
    }

    /**
     * Deletes all identifiers and user data saved by the specified app.
     * Does not modify data or identifiers saved by other apps.
     * <p>If this user is linked to a user from another app, it will not be unlinked. Unlinking of users is not yet supported.</p>
     * <p>&lt;Warning&gt;This is a destructive operation and cannot be undone.&lt;/Warning&gt;</p>
     */
    public void delete(String userId, UserDeleteRequest request) {
        this.rawClient.delete(userId, request).body();
    }

    /**
     * Deletes all identifiers and user data saved by the specified app.
     * Does not modify data or identifiers saved by other apps.
     * <p>If this user is linked to a user from another app, it will not be unlinked. Unlinking of users is not yet supported.</p>
     * <p>&lt;Warning&gt;This is a destructive operation and cannot be undone.&lt;/Warning&gt;</p>
     */
    public void delete(String userId, UserDeleteRequest request, RequestOptions requestOptions) {
        this.rawClient.delete(userId, request, requestOptions).body();
    }
}
