/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.analytics;

import com.mavenagi.core.ClientOptions;
import com.mavenagi.core.RequestOptions;
import com.mavenagi.resources.analytics.types.ChartResponse;
import com.mavenagi.resources.analytics.types.ConversationChartRequest;
import com.mavenagi.resources.analytics.types.ConversationTableRequest;
import com.mavenagi.resources.analytics.types.ConversationTableResponse;
import com.mavenagi.resources.analytics.types.FeedbackTableRequest;
import com.mavenagi.resources.analytics.types.FeedbackTableResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncAnalyticsClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawAnalyticsClient rawClient;

    public AsyncAnalyticsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawAnalyticsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawAnalyticsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Retrieves structured conversation data formatted as a table, allowing users to group, filter, and define specific metrics to display as columns.
     */
    public CompletableFuture<ConversationTableResponse> getConversationTable(ConversationTableRequest request) {
        return this.rawClient.getConversationTable(request).thenApply(response -> response.body());
    }

    /**
     * Retrieves structured conversation data formatted as a table, allowing users to group, filter, and define specific metrics to display as columns.
     */
    public CompletableFuture<ConversationTableResponse> getConversationTable(
            ConversationTableRequest request, RequestOptions requestOptions) {
        return this.rawClient.getConversationTable(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Fetches conversation data visualized in a chart format. Supported chart types include pie chart, date histogram, and stacked bar charts.
     */
    public CompletableFuture<ChartResponse> getConversationChart(ConversationChartRequest request) {
        return this.rawClient.getConversationChart(request).thenApply(response -> response.body());
    }

    /**
     * Fetches conversation data visualized in a chart format. Supported chart types include pie chart, date histogram, and stacked bar charts.
     */
    public CompletableFuture<ChartResponse> getConversationChart(
            ConversationChartRequest request, RequestOptions requestOptions) {
        return this.rawClient.getConversationChart(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Retrieves structured feedback data formatted as a table, allowing users to group, filter,  and define specific metrics to display as columns.
     */
    public CompletableFuture<FeedbackTableResponse> getFeedbackTable(FeedbackTableRequest request) {
        return this.rawClient.getFeedbackTable(request).thenApply(response -> response.body());
    }

    /**
     * Retrieves structured feedback data formatted as a table, allowing users to group, filter,  and define specific metrics to display as columns.
     */
    public CompletableFuture<FeedbackTableResponse> getFeedbackTable(
            FeedbackTableRequest request, RequestOptions requestOptions) {
        return this.rawClient.getFeedbackTable(request, requestOptions).thenApply(response -> response.body());
    }
}
