/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.users;

import com.mavenagi.core.ClientOptions;
import com.mavenagi.core.RequestOptions;
import com.mavenagi.resources.commons.types.AppUserRequest;
import com.mavenagi.resources.commons.types.AppUserResponse;
import com.mavenagi.resources.users.requests.UserDeleteRequest;
import com.mavenagi.resources.users.requests.UserGetRequest;
import java.util.concurrent.CompletableFuture;

public class AsyncUsersClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawUsersClient rawClient;

    public AsyncUsersClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawUsersClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawUsersClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Update a user or create it if it doesn't exist.
     */
    public CompletableFuture<AppUserResponse> createOrUpdate(AppUserRequest request) {
        return this.rawClient.createOrUpdate(request).thenApply(response -> response.body());
    }

    /**
     * Update a user or create it if it doesn't exist.
     */
    public CompletableFuture<AppUserResponse> createOrUpdate(AppUserRequest request, RequestOptions requestOptions) {
        return this.rawClient.createOrUpdate(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Get a user by its supplied ID
     */
    public CompletableFuture<AppUserResponse> get(String userId) {
        return this.rawClient.get(userId).thenApply(response -> response.body());
    }

    /**
     * Get a user by its supplied ID
     */
    public CompletableFuture<AppUserResponse> get(String userId, UserGetRequest request) {
        return this.rawClient.get(userId, request).thenApply(response -> response.body());
    }

    /**
     * Get a user by its supplied ID
     */
    public CompletableFuture<AppUserResponse> get(
            String userId, UserGetRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(userId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Deletes all identifiers and user data saved by the specified app.
     * Does not modify data or identifiers saved by other apps.
     * <p>If this user is linked to a user from another app, it will not be unlinked. Unlinking of users is not yet supported.</p>
     * <p>&lt;Warning&gt;This is a destructive operation and cannot be undone.&lt;/Warning&gt;</p>
     */
    public CompletableFuture<Void> delete(String userId) {
        return this.rawClient.delete(userId).thenApply(response -> response.body());
    }

    /**
     * Deletes all identifiers and user data saved by the specified app.
     * Does not modify data or identifiers saved by other apps.
     * <p>If this user is linked to a user from another app, it will not be unlinked. Unlinking of users is not yet supported.</p>
     * <p>&lt;Warning&gt;This is a destructive operation and cannot be undone.&lt;/Warning&gt;</p>
     */
    public CompletableFuture<Void> delete(String userId, UserDeleteRequest request) {
        return this.rawClient.delete(userId, request).thenApply(response -> response.body());
    }

    /**
     * Deletes all identifiers and user data saved by the specified app.
     * Does not modify data or identifiers saved by other apps.
     * <p>If this user is linked to a user from another app, it will not be unlinked. Unlinking of users is not yet supported.</p>
     * <p>&lt;Warning&gt;This is a destructive operation and cannot be undone.&lt;/Warning&gt;</p>
     */
    public CompletableFuture<Void> delete(String userId, UserDeleteRequest request, RequestOptions requestOptions) {
        return this.rawClient.delete(userId, request, requestOptions).thenApply(response -> response.body());
    }
}
