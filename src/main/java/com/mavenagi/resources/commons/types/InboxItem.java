/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class InboxItem {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private InboxItem(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static InboxItem duplicateDocuments(InboxItemDuplicateDocuments value) {
        return new InboxItem(new DuplicateDocumentsValue(value));
    }

    public static InboxItem missingKnowledge(InboxItemMissingKnowledge value) {
        return new InboxItem(new MissingKnowledgeValue(value));
    }

    public boolean isDuplicateDocuments() {
        return value instanceof DuplicateDocumentsValue;
    }

    public boolean isMissingKnowledge() {
        return value instanceof MissingKnowledgeValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<InboxItemDuplicateDocuments> getDuplicateDocuments() {
        if (isDuplicateDocuments()) {
            return Optional.of(((DuplicateDocumentsValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<InboxItemMissingKnowledge> getMissingKnowledge() {
        if (isMissingKnowledge()) {
            return Optional.of(((MissingKnowledgeValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitDuplicateDocuments(InboxItemDuplicateDocuments duplicateDocuments);

        T visitMissingKnowledge(InboxItemMissingKnowledge missingKnowledge);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({@JsonSubTypes.Type(DuplicateDocumentsValue.class), @JsonSubTypes.Type(MissingKnowledgeValue.class)})
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("duplicateDocuments")
    @JsonIgnoreProperties("type")
    private static final class DuplicateDocumentsValue implements Value {
        @JsonUnwrapped
        private InboxItemDuplicateDocuments value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DuplicateDocumentsValue() {}

        private DuplicateDocumentsValue(InboxItemDuplicateDocuments value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDuplicateDocuments(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DuplicateDocumentsValue && equalTo((DuplicateDocumentsValue) other);
        }

        private boolean equalTo(DuplicateDocumentsValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "InboxItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("missingKnowledge")
    @JsonIgnoreProperties("type")
    private static final class MissingKnowledgeValue implements Value {
        @JsonUnwrapped
        private InboxItemMissingKnowledge value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private MissingKnowledgeValue() {}

        private MissingKnowledgeValue(InboxItemMissingKnowledge value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitMissingKnowledge(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof MissingKnowledgeValue && equalTo((MissingKnowledgeValue) other);
        }

        private boolean equalTo(MissingKnowledgeValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "InboxItem{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("type")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "InboxItem{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
