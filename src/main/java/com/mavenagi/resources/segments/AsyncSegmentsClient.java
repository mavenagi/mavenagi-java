/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.segments;

import com.mavenagi.core.ClientOptions;
import com.mavenagi.core.RequestOptions;
import com.mavenagi.resources.segments.requests.SegmentGetRequest;
import com.mavenagi.resources.segments.types.SegmentPatchRequest;
import com.mavenagi.resources.segments.types.SegmentRequest;
import com.mavenagi.resources.segments.types.SegmentResponse;
import com.mavenagi.resources.segments.types.SegmentsSearchRequest;
import com.mavenagi.resources.segments.types.SegmentsSearchResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncSegmentsClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawSegmentsClient rawClient;

    public AsyncSegmentsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawSegmentsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawSegmentsClient withRawResponse() {
        return this.rawClient;
    }

    public CompletableFuture<SegmentsSearchResponse> search() {
        return this.rawClient.search().thenApply(response -> response.body());
    }

    public CompletableFuture<SegmentsSearchResponse> search(SegmentsSearchRequest request) {
        return this.rawClient.search(request).thenApply(response -> response.body());
    }

    public CompletableFuture<SegmentsSearchResponse> search(
            SegmentsSearchRequest request, RequestOptions requestOptions) {
        return this.rawClient.search(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Update a segment or create it if it doesn't exist.
     */
    public CompletableFuture<SegmentResponse> createOrUpdate(SegmentRequest request) {
        return this.rawClient.createOrUpdate(request).thenApply(response -> response.body());
    }

    /**
     * Update a segment or create it if it doesn't exist.
     */
    public CompletableFuture<SegmentResponse> createOrUpdate(SegmentRequest request, RequestOptions requestOptions) {
        return this.rawClient.createOrUpdate(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Get a segment by its supplied ID
     */
    public CompletableFuture<SegmentResponse> get(String segmentReferenceId) {
        return this.rawClient.get(segmentReferenceId).thenApply(response -> response.body());
    }

    /**
     * Get a segment by its supplied ID
     */
    public CompletableFuture<SegmentResponse> get(String segmentReferenceId, SegmentGetRequest request) {
        return this.rawClient.get(segmentReferenceId, request).thenApply(response -> response.body());
    }

    /**
     * Get a segment by its supplied ID
     */
    public CompletableFuture<SegmentResponse> get(
            String segmentReferenceId, SegmentGetRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(segmentReferenceId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Update mutable segment fields
     * <p>The <code>appId</code> field can be provided to update a segment owned by a different app.
     * All other fields will overwrite the existing value on the segment only if provided.</p>
     */
    public CompletableFuture<SegmentResponse> patch(String segmentReferenceId) {
        return this.rawClient.patch(segmentReferenceId).thenApply(response -> response.body());
    }

    /**
     * Update mutable segment fields
     * <p>The <code>appId</code> field can be provided to update a segment owned by a different app.
     * All other fields will overwrite the existing value on the segment only if provided.</p>
     */
    public CompletableFuture<SegmentResponse> patch(String segmentReferenceId, SegmentPatchRequest request) {
        return this.rawClient.patch(segmentReferenceId, request).thenApply(response -> response.body());
    }

    /**
     * Update mutable segment fields
     * <p>The <code>appId</code> field can be provided to update a segment owned by a different app.
     * All other fields will overwrite the existing value on the segment only if provided.</p>
     */
    public CompletableFuture<SegmentResponse> patch(
            String segmentReferenceId, SegmentPatchRequest request, RequestOptions requestOptions) {
        return this.rawClient.patch(segmentReferenceId, request, requestOptions).thenApply(response -> response.body());
    }
}
