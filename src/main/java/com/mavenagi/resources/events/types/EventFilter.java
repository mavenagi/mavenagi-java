/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.events.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.resources.commons.types.EntityId;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EventFilter.Builder.class)
public final class EventFilter {
    private final Optional<String> search;

    private final Optional<OffsetDateTime> createdAfter;

    private final Optional<OffsetDateTime> createdBefore;

    private final Optional<List<EntityId>> references;

    private final Optional<List<EventType>> eventTypes;

    private final Optional<List<UserEventName>> userEventNames;

    private final Optional<List<SystemEventName>> systemEventNames;

    private final Map<String, Object> additionalProperties;

    private EventFilter(
            Optional<String> search,
            Optional<OffsetDateTime> createdAfter,
            Optional<OffsetDateTime> createdBefore,
            Optional<List<EntityId>> references,
            Optional<List<EventType>> eventTypes,
            Optional<List<UserEventName>> userEventNames,
            Optional<List<SystemEventName>> systemEventNames,
            Map<String, Object> additionalProperties) {
        this.search = search;
        this.createdAfter = createdAfter;
        this.createdBefore = createdBefore;
        this.references = references;
        this.eventTypes = eventTypes;
        this.userEventNames = userEventNames;
        this.systemEventNames = systemEventNames;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("search")
    public Optional<String> getSearch() {
        return search;
    }

    @JsonProperty("createdAfter")
    public Optional<OffsetDateTime> getCreatedAfter() {
        return createdAfter;
    }

    @JsonProperty("createdBefore")
    public Optional<OffsetDateTime> getCreatedBefore() {
        return createdBefore;
    }

    @JsonProperty("references")
    public Optional<List<EntityId>> getReferences() {
        return references;
    }

    @JsonProperty("eventTypes")
    public Optional<List<EventType>> getEventTypes() {
        return eventTypes;
    }

    @JsonProperty("userEventNames")
    public Optional<List<UserEventName>> getUserEventNames() {
        return userEventNames;
    }

    @JsonProperty("systemEventNames")
    public Optional<List<SystemEventName>> getSystemEventNames() {
        return systemEventNames;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EventFilter && equalTo((EventFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EventFilter other) {
        return search.equals(other.search)
                && createdAfter.equals(other.createdAfter)
                && createdBefore.equals(other.createdBefore)
                && references.equals(other.references)
                && eventTypes.equals(other.eventTypes)
                && userEventNames.equals(other.userEventNames)
                && systemEventNames.equals(other.systemEventNames);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.search,
                this.createdAfter,
                this.createdBefore,
                this.references,
                this.eventTypes,
                this.userEventNames,
                this.systemEventNames);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> search = Optional.empty();

        private Optional<OffsetDateTime> createdAfter = Optional.empty();

        private Optional<OffsetDateTime> createdBefore = Optional.empty();

        private Optional<List<EntityId>> references = Optional.empty();

        private Optional<List<EventType>> eventTypes = Optional.empty();

        private Optional<List<UserEventName>> userEventNames = Optional.empty();

        private Optional<List<SystemEventName>> systemEventNames = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(EventFilter other) {
            search(other.getSearch());
            createdAfter(other.getCreatedAfter());
            createdBefore(other.getCreatedBefore());
            references(other.getReferences());
            eventTypes(other.getEventTypes());
            userEventNames(other.getUserEventNames());
            systemEventNames(other.getSystemEventNames());
            return this;
        }

        @JsonSetter(value = "search", nulls = Nulls.SKIP)
        public Builder search(Optional<String> search) {
            this.search = search;
            return this;
        }

        public Builder search(String search) {
            this.search = Optional.ofNullable(search);
            return this;
        }

        @JsonSetter(value = "createdAfter", nulls = Nulls.SKIP)
        public Builder createdAfter(Optional<OffsetDateTime> createdAfter) {
            this.createdAfter = createdAfter;
            return this;
        }

        public Builder createdAfter(OffsetDateTime createdAfter) {
            this.createdAfter = Optional.ofNullable(createdAfter);
            return this;
        }

        @JsonSetter(value = "createdBefore", nulls = Nulls.SKIP)
        public Builder createdBefore(Optional<OffsetDateTime> createdBefore) {
            this.createdBefore = createdBefore;
            return this;
        }

        public Builder createdBefore(OffsetDateTime createdBefore) {
            this.createdBefore = Optional.ofNullable(createdBefore);
            return this;
        }

        @JsonSetter(value = "references", nulls = Nulls.SKIP)
        public Builder references(Optional<List<EntityId>> references) {
            this.references = references;
            return this;
        }

        public Builder references(List<EntityId> references) {
            this.references = Optional.ofNullable(references);
            return this;
        }

        @JsonSetter(value = "eventTypes", nulls = Nulls.SKIP)
        public Builder eventTypes(Optional<List<EventType>> eventTypes) {
            this.eventTypes = eventTypes;
            return this;
        }

        public Builder eventTypes(List<EventType> eventTypes) {
            this.eventTypes = Optional.ofNullable(eventTypes);
            return this;
        }

        @JsonSetter(value = "userEventNames", nulls = Nulls.SKIP)
        public Builder userEventNames(Optional<List<UserEventName>> userEventNames) {
            this.userEventNames = userEventNames;
            return this;
        }

        public Builder userEventNames(List<UserEventName> userEventNames) {
            this.userEventNames = Optional.ofNullable(userEventNames);
            return this;
        }

        @JsonSetter(value = "systemEventNames", nulls = Nulls.SKIP)
        public Builder systemEventNames(Optional<List<SystemEventName>> systemEventNames) {
            this.systemEventNames = systemEventNames;
            return this;
        }

        public Builder systemEventNames(List<SystemEventName> systemEventNames) {
            this.systemEventNames = Optional.ofNullable(systemEventNames);
            return this;
        }

        public EventFilter build() {
            return new EventFilter(
                    search,
                    createdAfter,
                    createdBefore,
                    references,
                    eventTypes,
                    userEventNames,
                    systemEventNames,
                    additionalProperties);
        }
    }
}
