/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.conversation.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.resources.commons.types.EntityIdBase;
import com.mavenagi.resources.commons.types.FeedbackType;
import com.mavenagi.resources.commons.types.IFeedbackBase;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FeedbackRequest.Builder.class)
public final class FeedbackRequest implements IFeedbackBase {
    private final FeedbackType type;

    private final Optional<String> text;

    private final EntityIdBase feedbackId;

    private final EntityIdBase conversationId;

    private final EntityIdBase conversationMessageId;

    private final Optional<EntityIdBase> userId;

    private final Map<String, Object> additionalProperties;

    private FeedbackRequest(
            FeedbackType type,
            Optional<String> text,
            EntityIdBase feedbackId,
            EntityIdBase conversationId,
            EntityIdBase conversationMessageId,
            Optional<EntityIdBase> userId,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.text = text;
        this.feedbackId = feedbackId;
        this.conversationId = conversationId;
        this.conversationMessageId = conversationMessageId;
        this.userId = userId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The type of feedback
     */
    @JsonProperty("type")
    @java.lang.Override
    public FeedbackType getType() {
        return type;
    }

    /**
     * @return The feedback text
     */
    @JsonProperty("text")
    @java.lang.Override
    public Optional<String> getText() {
        return text;
    }

    /**
     * @return The ID that uniquely identifies this feedback
     */
    @JsonProperty("feedbackId")
    public EntityIdBase getFeedbackId() {
        return feedbackId;
    }

    /**
     * @return The ID that uniquely identifies the the conversation the feedback is about
     */
    @JsonProperty("conversationId")
    public EntityIdBase getConversationId() {
        return conversationId;
    }

    /**
     * @return The ID that uniquely identifies the message within the conversation the feedback is about
     */
    @JsonProperty("conversationMessageId")
    public EntityIdBase getConversationMessageId() {
        return conversationMessageId;
    }

    /**
     * @return The ID of the user who is creating the feedback
     */
    @JsonProperty("userId")
    public Optional<EntityIdBase> getUserId() {
        return userId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FeedbackRequest && equalTo((FeedbackRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FeedbackRequest other) {
        return type.equals(other.type)
                && text.equals(other.text)
                && feedbackId.equals(other.feedbackId)
                && conversationId.equals(other.conversationId)
                && conversationMessageId.equals(other.conversationMessageId)
                && userId.equals(other.userId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.type, this.text, this.feedbackId, this.conversationId, this.conversationMessageId, this.userId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        /**
         * <p>The type of feedback</p>
         */
        FeedbackIdStage type(@NotNull FeedbackType type);

        Builder from(FeedbackRequest other);
    }

    public interface FeedbackIdStage {
        /**
         * <p>The ID that uniquely identifies this feedback</p>
         */
        ConversationIdStage feedbackId(@NotNull EntityIdBase feedbackId);
    }

    public interface ConversationIdStage {
        /**
         * <p>The ID that uniquely identifies the the conversation the feedback is about</p>
         */
        ConversationMessageIdStage conversationId(@NotNull EntityIdBase conversationId);
    }

    public interface ConversationMessageIdStage {
        /**
         * <p>The ID that uniquely identifies the message within the conversation the feedback is about</p>
         */
        _FinalStage conversationMessageId(@NotNull EntityIdBase conversationMessageId);
    }

    public interface _FinalStage {
        FeedbackRequest build();

        /**
         * <p>The feedback text</p>
         */
        _FinalStage text(Optional<String> text);

        _FinalStage text(String text);

        /**
         * <p>The ID of the user who is creating the feedback</p>
         */
        _FinalStage userId(Optional<EntityIdBase> userId);

        _FinalStage userId(EntityIdBase userId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements TypeStage, FeedbackIdStage, ConversationIdStage, ConversationMessageIdStage, _FinalStage {
        private FeedbackType type;

        private EntityIdBase feedbackId;

        private EntityIdBase conversationId;

        private EntityIdBase conversationMessageId;

        private Optional<EntityIdBase> userId = Optional.empty();

        private Optional<String> text = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(FeedbackRequest other) {
            type(other.getType());
            text(other.getText());
            feedbackId(other.getFeedbackId());
            conversationId(other.getConversationId());
            conversationMessageId(other.getConversationMessageId());
            userId(other.getUserId());
            return this;
        }

        /**
         * <p>The type of feedback</p>
         * <p>The type of feedback</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public FeedbackIdStage type(@NotNull FeedbackType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>The ID that uniquely identifies this feedback</p>
         * <p>The ID that uniquely identifies this feedback</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("feedbackId")
        public ConversationIdStage feedbackId(@NotNull EntityIdBase feedbackId) {
            this.feedbackId = Objects.requireNonNull(feedbackId, "feedbackId must not be null");
            return this;
        }

        /**
         * <p>The ID that uniquely identifies the the conversation the feedback is about</p>
         * <p>The ID that uniquely identifies the the conversation the feedback is about</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("conversationId")
        public ConversationMessageIdStage conversationId(@NotNull EntityIdBase conversationId) {
            this.conversationId = Objects.requireNonNull(conversationId, "conversationId must not be null");
            return this;
        }

        /**
         * <p>The ID that uniquely identifies the message within the conversation the feedback is about</p>
         * <p>The ID that uniquely identifies the message within the conversation the feedback is about</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("conversationMessageId")
        public _FinalStage conversationMessageId(@NotNull EntityIdBase conversationMessageId) {
            this.conversationMessageId =
                    Objects.requireNonNull(conversationMessageId, "conversationMessageId must not be null");
            return this;
        }

        /**
         * <p>The ID of the user who is creating the feedback</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage userId(EntityIdBase userId) {
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        /**
         * <p>The ID of the user who is creating the feedback</p>
         */
        @java.lang.Override
        @JsonSetter(value = "userId", nulls = Nulls.SKIP)
        public _FinalStage userId(Optional<EntityIdBase> userId) {
            this.userId = userId;
            return this;
        }

        /**
         * <p>The feedback text</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage text(String text) {
            this.text = Optional.ofNullable(text);
            return this;
        }

        /**
         * <p>The feedback text</p>
         */
        @java.lang.Override
        @JsonSetter(value = "text", nulls = Nulls.SKIP)
        public _FinalStage text(Optional<String> text) {
            this.text = text;
            return this;
        }

        @java.lang.Override
        public FeedbackRequest build() {
            return new FeedbackRequest(
                    type, text, feedbackId, conversationId, conversationMessageId, userId, additionalProperties);
        }
    }
}
