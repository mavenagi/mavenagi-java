/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.analytics.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import com.mavenagi.resources.conversation.types.FeedbackFilter;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FeedbackAnalyticsRequest.Builder.class)
public final class FeedbackAnalyticsRequest implements IFeedbackAnalyticsRequest {
    private final Optional<FeedbackFilter> feedbackFilter;

    private final Map<String, Object> additionalProperties;

    private FeedbackAnalyticsRequest(
            Optional<FeedbackFilter> feedbackFilter, Map<String, Object> additionalProperties) {
        this.feedbackFilter = feedbackFilter;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Optional filter applied to refine the feedback data before processing.
     */
    @JsonProperty("feedbackFilter")
    @java.lang.Override
    public Optional<FeedbackFilter> getFeedbackFilter() {
        return feedbackFilter;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FeedbackAnalyticsRequest && equalTo((FeedbackAnalyticsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FeedbackAnalyticsRequest other) {
        return feedbackFilter.equals(other.feedbackFilter);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.feedbackFilter);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<FeedbackFilter> feedbackFilter = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FeedbackAnalyticsRequest other) {
            feedbackFilter(other.getFeedbackFilter());
            return this;
        }

        /**
         * <p>Optional filter applied to refine the feedback data before processing.</p>
         */
        @JsonSetter(value = "feedbackFilter", nulls = Nulls.SKIP)
        public Builder feedbackFilter(Optional<FeedbackFilter> feedbackFilter) {
            this.feedbackFilter = feedbackFilter;
            return this;
        }

        public Builder feedbackFilter(FeedbackFilter feedbackFilter) {
            this.feedbackFilter = Optional.ofNullable(feedbackFilter);
            return this;
        }

        public FeedbackAnalyticsRequest build() {
            return new FeedbackAnalyticsRequest(feedbackFilter, additionalProperties);
        }
    }
}
