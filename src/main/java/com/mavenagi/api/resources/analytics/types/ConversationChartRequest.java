/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.analytics.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class ConversationChartRequest {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private ConversationChartRequest(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static ConversationChartRequest pieChart(PieChartRequest value) {
        return new ConversationChartRequest(new PieChartValue(value));
    }

    public static ConversationChartRequest dateHistogram(DateHistogramRequest value) {
        return new ConversationChartRequest(new DateHistogramValue(value));
    }

    public static ConversationChartRequest barChart(BarChartRequest value) {
        return new ConversationChartRequest(new BarChartValue(value));
    }

    public boolean isPieChart() {
        return value instanceof PieChartValue;
    }

    public boolean isDateHistogram() {
        return value instanceof DateHistogramValue;
    }

    public boolean isBarChart() {
        return value instanceof BarChartValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<PieChartRequest> getPieChart() {
        if (isPieChart()) {
            return Optional.of(((PieChartValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<DateHistogramRequest> getDateHistogram() {
        if (isDateHistogram()) {
            return Optional.of(((DateHistogramValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<BarChartRequest> getBarChart() {
        if (isBarChart()) {
            return Optional.of(((BarChartValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitPieChart(PieChartRequest pieChart);

        T visitDateHistogram(DateHistogramRequest dateHistogram);

        T visitBarChart(BarChartRequest barChart);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(PieChartValue.class),
        @JsonSubTypes.Type(DateHistogramValue.class),
        @JsonSubTypes.Type(BarChartValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("pieChart")
    private static final class PieChartValue implements Value {
        @JsonUnwrapped
        private PieChartRequest value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private PieChartValue() {}

        private PieChartValue(PieChartRequest value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitPieChart(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof PieChartValue && equalTo((PieChartValue) other);
        }

        private boolean equalTo(PieChartValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ConversationChartRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("dateHistogram")
    private static final class DateHistogramValue implements Value {
        @JsonUnwrapped
        private DateHistogramRequest value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DateHistogramValue() {}

        private DateHistogramValue(DateHistogramRequest value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDateHistogram(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DateHistogramValue && equalTo((DateHistogramValue) other);
        }

        private boolean equalTo(DateHistogramValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ConversationChartRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("barChart")
    private static final class BarChartValue implements Value {
        @JsonUnwrapped
        private BarChartRequest value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private BarChartValue() {}

        private BarChartValue(BarChartRequest value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitBarChart(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof BarChartValue && equalTo((BarChartValue) other);
        }

        private boolean equalTo(BarChartValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ConversationChartRequest{" + "value: " + value + "}";
        }
    }

    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ConversationChartRequest{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
