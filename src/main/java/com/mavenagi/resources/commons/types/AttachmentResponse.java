/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AttachmentResponse.Builder.class)
public final class AttachmentResponse implements IBaseAttachment {
    private final String type;

    private final Optional<String> name;

    private final Optional<String> url;

    private final Optional<Long> sizeBytes;

    private final AttachmentStatus status;

    private final Map<String, Object> additionalProperties;

    private AttachmentResponse(
            String type,
            Optional<String> name,
            Optional<String> url,
            Optional<Long> sizeBytes,
            AttachmentStatus status,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.name = name;
        this.url = url;
        this.sizeBytes = sizeBytes;
        this.status = status;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The mime-type of the attachment. Supported types are:
     * <ul>
     * <li>image/jpeg</li>
     * <li>image/jpg</li>
     * <li>image/png</li>
     * <li>image/gif</li>
     * <li>image/webp</li>
     * <li>application/pdf</li>
     * <li>text/plain</li>
     * <li>text/csv</li>
     * <li>application/vnd.openxmlformats-officedocument.wordprocessingml.document</li>
     * <li>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</li>
     * <li>application/vnd.openxmlformats-officedocument.presentationml.presentation</li>
     * <li>application/msword</li>
     * <li>application/vnd.ms-excel</li>
     * <li>application/vnd.ms-powerpoint</li>
     * <li>audio/aac</li>
     * <li>audio/mpeg</li>
     * <li>audio/mp4</li>
     * <li>audio/wav</li>
     * <li>audio/ogg</li>
     * <li>video/mp4</li>
     * <li>video/webm</li>
     * </ul>
     */
    @JsonProperty("type")
    @java.lang.Override
    public String getType() {
        return type;
    }

    /**
     * @return An optional name for the attachment.
     */
    @JsonProperty("name")
    @java.lang.Override
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return The URL to access the attachment, The URL will be valid for 20 minutes. Only present when status is <code>ACCEPTED</code>.
     */
    @JsonProperty("url")
    public Optional<String> getUrl() {
        return url;
    }

    /**
     * @return The size of the attachment in bytes
     */
    @JsonProperty("sizeBytes")
    public Optional<Long> getSizeBytes() {
        return sizeBytes;
    }

    /**
     * @return The processing status of the attachment.
     */
    @JsonProperty("status")
    public AttachmentStatus getStatus() {
        return status;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AttachmentResponse && equalTo((AttachmentResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AttachmentResponse other) {
        return type.equals(other.type)
                && name.equals(other.name)
                && url.equals(other.url)
                && sizeBytes.equals(other.sizeBytes)
                && status.equals(other.status);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.name, this.url, this.sizeBytes, this.status);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        /**
         * <p>The mime-type of the attachment. Supported types are:</p>
         * <ul>
         * <li>image/jpeg</li>
         * <li>image/jpg</li>
         * <li>image/png</li>
         * <li>image/gif</li>
         * <li>image/webp</li>
         * <li>application/pdf</li>
         * <li>text/plain</li>
         * <li>text/csv</li>
         * <li>application/vnd.openxmlformats-officedocument.wordprocessingml.document</li>
         * <li>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</li>
         * <li>application/vnd.openxmlformats-officedocument.presentationml.presentation</li>
         * <li>application/msword</li>
         * <li>application/vnd.ms-excel</li>
         * <li>application/vnd.ms-powerpoint</li>
         * <li>audio/aac</li>
         * <li>audio/mpeg</li>
         * <li>audio/mp4</li>
         * <li>audio/wav</li>
         * <li>audio/ogg</li>
         * <li>video/mp4</li>
         * <li>video/webm</li>
         * </ul>
         */
        StatusStage type(@NotNull String type);

        Builder from(AttachmentResponse other);
    }

    public interface StatusStage {
        /**
         * <p>The processing status of the attachment.</p>
         */
        _FinalStage status(@NotNull AttachmentStatus status);
    }

    public interface _FinalStage {
        AttachmentResponse build();

        /**
         * <p>An optional name for the attachment.</p>
         */
        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        /**
         * <p>The URL to access the attachment, The URL will be valid for 20 minutes. Only present when status is <code>ACCEPTED</code>.</p>
         */
        _FinalStage url(Optional<String> url);

        _FinalStage url(String url);

        /**
         * <p>The size of the attachment in bytes</p>
         */
        _FinalStage sizeBytes(Optional<Long> sizeBytes);

        _FinalStage sizeBytes(Long sizeBytes);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, StatusStage, _FinalStage {
        private String type;

        private AttachmentStatus status;

        private Optional<Long> sizeBytes = Optional.empty();

        private Optional<String> url = Optional.empty();

        private Optional<String> name = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AttachmentResponse other) {
            type(other.getType());
            name(other.getName());
            url(other.getUrl());
            sizeBytes(other.getSizeBytes());
            status(other.getStatus());
            return this;
        }

        /**
         * <p>The mime-type of the attachment. Supported types are:</p>
         * <ul>
         * <li>image/jpeg</li>
         * <li>image/jpg</li>
         * <li>image/png</li>
         * <li>image/gif</li>
         * <li>image/webp</li>
         * <li>application/pdf</li>
         * <li>text/plain</li>
         * <li>text/csv</li>
         * <li>application/vnd.openxmlformats-officedocument.wordprocessingml.document</li>
         * <li>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</li>
         * <li>application/vnd.openxmlformats-officedocument.presentationml.presentation</li>
         * <li>application/msword</li>
         * <li>application/vnd.ms-excel</li>
         * <li>application/vnd.ms-powerpoint</li>
         * <li>audio/aac</li>
         * <li>audio/mpeg</li>
         * <li>audio/mp4</li>
         * <li>audio/wav</li>
         * <li>audio/ogg</li>
         * <li>video/mp4</li>
         * <li>video/webm</li>
         * </ul>
         * <p>The mime-type of the attachment. Supported types are:</p>
         * <ul>
         * <li>image/jpeg</li>
         * <li>image/jpg</li>
         * <li>image/png</li>
         * <li>image/gif</li>
         * <li>image/webp</li>
         * <li>application/pdf</li>
         * <li>text/plain</li>
         * <li>text/csv</li>
         * <li>application/vnd.openxmlformats-officedocument.wordprocessingml.document</li>
         * <li>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</li>
         * <li>application/vnd.openxmlformats-officedocument.presentationml.presentation</li>
         * <li>application/msword</li>
         * <li>application/vnd.ms-excel</li>
         * <li>application/vnd.ms-powerpoint</li>
         * <li>audio/aac</li>
         * <li>audio/mpeg</li>
         * <li>audio/mp4</li>
         * <li>audio/wav</li>
         * <li>audio/ogg</li>
         * <li>video/mp4</li>
         * <li>video/webm</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public StatusStage type(@NotNull String type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>The processing status of the attachment.</p>
         * <p>The processing status of the attachment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public _FinalStage status(@NotNull AttachmentStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>The size of the attachment in bytes</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sizeBytes(Long sizeBytes) {
            this.sizeBytes = Optional.ofNullable(sizeBytes);
            return this;
        }

        /**
         * <p>The size of the attachment in bytes</p>
         */
        @java.lang.Override
        @JsonSetter(value = "sizeBytes", nulls = Nulls.SKIP)
        public _FinalStage sizeBytes(Optional<Long> sizeBytes) {
            this.sizeBytes = sizeBytes;
            return this;
        }

        /**
         * <p>The URL to access the attachment, The URL will be valid for 20 minutes. Only present when status is <code>ACCEPTED</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage url(String url) {
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * <p>The URL to access the attachment, The URL will be valid for 20 minutes. Only present when status is <code>ACCEPTED</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "url", nulls = Nulls.SKIP)
        public _FinalStage url(Optional<String> url) {
            this.url = url;
            return this;
        }

        /**
         * <p>An optional name for the attachment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>An optional name for the attachment.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        public AttachmentResponse build() {
            return new AttachmentResponse(type, name, url, sizeBytes, status, additionalProperties);
        }
    }
}
