/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.analytics.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import com.mavenagi.api.resources.conversation.types.ConversationField;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Percentile.Builder.class)
public final class Percentile implements IBasicMetric {
    private final ConversationField targetField;

    private final List<Double> percentiles;

    private final Map<String, Object> additionalProperties;

    private Percentile(
            ConversationField targetField, List<Double> percentiles, Map<String, Object> additionalProperties) {
        this.targetField = targetField;
        this.percentiles = percentiles;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Field to apply the metric to. The field should be numeric for all metrics except for Count (no field) and DistinctCount.
     */
    @JsonProperty("targetField")
    @java.lang.Override
    public ConversationField getTargetField() {
        return targetField;
    }

    /**
     * @return List of percentiles to calculate. Example: [25, 50, 75] computes the 25th, 50th, and 75th percentiles.
     */
    @JsonProperty("percentiles")
    public List<Double> getPercentiles() {
        return percentiles;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Percentile && equalTo((Percentile) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Percentile other) {
        return targetField.equals(other.targetField) && percentiles.equals(other.percentiles);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.targetField, this.percentiles);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TargetFieldStage builder() {
        return new Builder();
    }

    public interface TargetFieldStage {
        _FinalStage targetField(@NotNull ConversationField targetField);

        Builder from(Percentile other);
    }

    public interface _FinalStage {
        Percentile build();

        _FinalStage percentiles(List<Double> percentiles);

        _FinalStage addPercentiles(Double percentiles);

        _FinalStage addAllPercentiles(List<Double> percentiles);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TargetFieldStage, _FinalStage {
        private ConversationField targetField;

        private List<Double> percentiles = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Percentile other) {
            targetField(other.getTargetField());
            percentiles(other.getPercentiles());
            return this;
        }

        /**
         * <p>Field to apply the metric to. The field should be numeric for all metrics except for Count (no field) and DistinctCount.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("targetField")
        public _FinalStage targetField(@NotNull ConversationField targetField) {
            this.targetField = Objects.requireNonNull(targetField, "targetField must not be null");
            return this;
        }

        /**
         * <p>List of percentiles to calculate. Example: [25, 50, 75] computes the 25th, 50th, and 75th percentiles.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllPercentiles(List<Double> percentiles) {
            this.percentiles.addAll(percentiles);
            return this;
        }

        /**
         * <p>List of percentiles to calculate. Example: [25, 50, 75] computes the 25th, 50th, and 75th percentiles.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addPercentiles(Double percentiles) {
            this.percentiles.add(percentiles);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "percentiles", nulls = Nulls.SKIP)
        public _FinalStage percentiles(List<Double> percentiles) {
            this.percentiles.clear();
            this.percentiles.addAll(percentiles);
            return this;
        }

        @java.lang.Override
        public Percentile build() {
            return new Percentile(targetField, percentiles, additionalProperties);
        }
    }
}
