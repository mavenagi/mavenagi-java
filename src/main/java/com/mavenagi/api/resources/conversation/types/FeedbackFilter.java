/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.conversation.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import com.mavenagi.api.resources.commons.types.FeedbackType;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FeedbackFilter.Builder.class)
public final class FeedbackFilter {
    private final Optional<String> search;

    private final Optional<OffsetDateTime> createdAfter;

    private final Optional<OffsetDateTime> createdBefore;

    private final Optional<List<String>> users;

    private final Optional<List<String>> apps;

    private final Optional<List<FeedbackType>> types;

    private final Map<String, Object> additionalProperties;

    private FeedbackFilter(
            Optional<String> search,
            Optional<OffsetDateTime> createdAfter,
            Optional<OffsetDateTime> createdBefore,
            Optional<List<String>> users,
            Optional<List<String>> apps,
            Optional<List<FeedbackType>> types,
            Map<String, Object> additionalProperties) {
        this.search = search;
        this.createdAfter = createdAfter;
        this.createdBefore = createdBefore;
        this.users = users;
        this.apps = apps;
        this.types = types;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("search")
    public Optional<String> getSearch() {
        return search;
    }

    @JsonProperty("createdAfter")
    public Optional<OffsetDateTime> getCreatedAfter() {
        return createdAfter;
    }

    @JsonProperty("createdBefore")
    public Optional<OffsetDateTime> getCreatedBefore() {
        return createdBefore;
    }

    @JsonProperty("users")
    public Optional<List<String>> getUsers() {
        return users;
    }

    @JsonProperty("apps")
    public Optional<List<String>> getApps() {
        return apps;
    }

    @JsonProperty("types")
    public Optional<List<FeedbackType>> getTypes() {
        return types;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FeedbackFilter && equalTo((FeedbackFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FeedbackFilter other) {
        return search.equals(other.search)
                && createdAfter.equals(other.createdAfter)
                && createdBefore.equals(other.createdBefore)
                && users.equals(other.users)
                && apps.equals(other.apps)
                && types.equals(other.types);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.search, this.createdAfter, this.createdBefore, this.users, this.apps, this.types);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> search = Optional.empty();

        private Optional<OffsetDateTime> createdAfter = Optional.empty();

        private Optional<OffsetDateTime> createdBefore = Optional.empty();

        private Optional<List<String>> users = Optional.empty();

        private Optional<List<String>> apps = Optional.empty();

        private Optional<List<FeedbackType>> types = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FeedbackFilter other) {
            search(other.getSearch());
            createdAfter(other.getCreatedAfter());
            createdBefore(other.getCreatedBefore());
            users(other.getUsers());
            apps(other.getApps());
            types(other.getTypes());
            return this;
        }

        @JsonSetter(value = "search", nulls = Nulls.SKIP)
        public Builder search(Optional<String> search) {
            this.search = search;
            return this;
        }

        public Builder search(String search) {
            this.search = Optional.ofNullable(search);
            return this;
        }

        @JsonSetter(value = "createdAfter", nulls = Nulls.SKIP)
        public Builder createdAfter(Optional<OffsetDateTime> createdAfter) {
            this.createdAfter = createdAfter;
            return this;
        }

        public Builder createdAfter(OffsetDateTime createdAfter) {
            this.createdAfter = Optional.ofNullable(createdAfter);
            return this;
        }

        @JsonSetter(value = "createdBefore", nulls = Nulls.SKIP)
        public Builder createdBefore(Optional<OffsetDateTime> createdBefore) {
            this.createdBefore = createdBefore;
            return this;
        }

        public Builder createdBefore(OffsetDateTime createdBefore) {
            this.createdBefore = Optional.ofNullable(createdBefore);
            return this;
        }

        @JsonSetter(value = "users", nulls = Nulls.SKIP)
        public Builder users(Optional<List<String>> users) {
            this.users = users;
            return this;
        }

        public Builder users(List<String> users) {
            this.users = Optional.ofNullable(users);
            return this;
        }

        @JsonSetter(value = "apps", nulls = Nulls.SKIP)
        public Builder apps(Optional<List<String>> apps) {
            this.apps = apps;
            return this;
        }

        public Builder apps(List<String> apps) {
            this.apps = Optional.ofNullable(apps);
            return this;
        }

        @JsonSetter(value = "types", nulls = Nulls.SKIP)
        public Builder types(Optional<List<FeedbackType>> types) {
            this.types = types;
            return this;
        }

        public Builder types(List<FeedbackType> types) {
            this.types = Optional.ofNullable(types);
            return this;
        }

        public FeedbackFilter build() {
            return new FeedbackFilter(search, createdAfter, createdBefore, users, apps, types, additionalProperties);
        }
    }
}
