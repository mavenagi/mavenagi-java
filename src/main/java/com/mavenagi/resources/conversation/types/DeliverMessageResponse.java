/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.conversation.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DeliverMessageResponse.Builder.class)
public final class DeliverMessageResponse {
    private final DeliveryStatus status;

    private final Map<String, Object> additionalProperties;

    private DeliverMessageResponse(DeliveryStatus status, Map<String, Object> additionalProperties) {
        this.status = status;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("status")
    public DeliveryStatus getStatus() {
        return status;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeliverMessageResponse && equalTo((DeliverMessageResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DeliverMessageResponse other) {
        return status.equals(other.status);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.status);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static StatusStage builder() {
        return new Builder();
    }

    public interface StatusStage {
        _FinalStage status(@NotNull DeliveryStatus status);

        Builder from(DeliverMessageResponse other);
    }

    public interface _FinalStage {
        DeliverMessageResponse build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements StatusStage, _FinalStage {
        private DeliveryStatus status;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DeliverMessageResponse other) {
            status(other.getStatus());
            return this;
        }

        @java.lang.Override
        @JsonSetter("status")
        public _FinalStage status(@NotNull DeliveryStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        @java.lang.Override
        public DeliverMessageResponse build() {
            return new DeliverMessageResponse(status, additionalProperties);
        }
    }
}
