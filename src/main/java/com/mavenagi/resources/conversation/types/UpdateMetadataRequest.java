/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.resources.conversation.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateMetadataRequest.Builder.class)
public final class UpdateMetadataRequest {
    private final Optional<String> appId;

    private final Map<String, String> values;

    private final Map<String, Object> additionalProperties;

    private UpdateMetadataRequest(
            Optional<String> appId, Map<String, String> values, Map<String, Object> additionalProperties) {
        this.appId = appId;
        this.values = values;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The App ID of the conversation to modify metadata for. If not provided the ID of the calling app will be used.
     */
    @JsonProperty("appId")
    public Optional<String> getAppId() {
        return appId;
    }

    /**
     * @return The metadata values to add to the conversation.
     */
    @JsonProperty("values")
    public Map<String, String> getValues() {
        return values;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateMetadataRequest && equalTo((UpdateMetadataRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateMetadataRequest other) {
        return appId.equals(other.appId) && values.equals(other.values);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.appId, this.values);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> appId = Optional.empty();

        private Map<String, String> values = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UpdateMetadataRequest other) {
            appId(other.getAppId());
            values(other.getValues());
            return this;
        }

        /**
         * <p>The App ID of the conversation to modify metadata for. If not provided the ID of the calling app will be used.</p>
         */
        @JsonSetter(value = "appId", nulls = Nulls.SKIP)
        public Builder appId(Optional<String> appId) {
            this.appId = appId;
            return this;
        }

        public Builder appId(String appId) {
            this.appId = Optional.ofNullable(appId);
            return this;
        }

        /**
         * <p>The metadata values to add to the conversation.</p>
         */
        @JsonSetter(value = "values", nulls = Nulls.SKIP)
        public Builder values(Map<String, String> values) {
            this.values.clear();
            this.values.putAll(values);
            return this;
        }

        public Builder putAllValues(Map<String, String> values) {
            this.values.putAll(values);
            return this;
        }

        public Builder values(String key, String value) {
            this.values.put(key, value);
            return this;
        }

        public UpdateMetadataRequest build() {
            return new UpdateMetadataRequest(appId, values, additionalProperties);
        }
    }
}
