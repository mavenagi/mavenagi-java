/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ConversationAnalysis.Builder.class)
public final class ConversationAnalysis {
    private final Optional<String> userRequest;

    private final Optional<String> agentResponse;

    private final Optional<String> resolutionStatus;

    private final Optional<String> category;

    private final Optional<Sentiment> sentiment;

    private final Optional<Boolean> resolvedByMaven;

    private final Map<String, Object> additionalProperties;

    private ConversationAnalysis(
            Optional<String> userRequest,
            Optional<String> agentResponse,
            Optional<String> resolutionStatus,
            Optional<String> category,
            Optional<Sentiment> sentiment,
            Optional<Boolean> resolvedByMaven,
            Map<String, Object> additionalProperties) {
        this.userRequest = userRequest;
        this.agentResponse = agentResponse;
        this.resolutionStatus = resolutionStatus;
        this.category = category;
        this.sentiment = sentiment;
        this.resolvedByMaven = resolvedByMaven;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Generated user request summary of the conversation
     */
    @JsonProperty("userRequest")
    public Optional<String> getUserRequest() {
        return userRequest;
    }

    /**
     * @return Generated agent response summary of the conversation
     */
    @JsonProperty("agentResponse")
    public Optional<String> getAgentResponse() {
        return agentResponse;
    }

    /**
     * @return Generated resolution status of the conversation
     */
    @JsonProperty("resolutionStatus")
    public Optional<String> getResolutionStatus() {
        return resolutionStatus;
    }

    /**
     * @return Generated category of the conversation
     */
    @JsonProperty("category")
    public Optional<String> getCategory() {
        return category;
    }

    /**
     * @return Generated sentiment of the conversation
     */
    @JsonProperty("sentiment")
    public Optional<Sentiment> getSentiment() {
        return sentiment;
    }

    /**
     * @return Whether the conversation was resolved by Maven
     */
    @JsonProperty("resolvedByMaven")
    public Optional<Boolean> getResolvedByMaven() {
        return resolvedByMaven;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ConversationAnalysis && equalTo((ConversationAnalysis) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ConversationAnalysis other) {
        return userRequest.equals(other.userRequest)
                && agentResponse.equals(other.agentResponse)
                && resolutionStatus.equals(other.resolutionStatus)
                && category.equals(other.category)
                && sentiment.equals(other.sentiment)
                && resolvedByMaven.equals(other.resolvedByMaven);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.userRequest,
                this.agentResponse,
                this.resolutionStatus,
                this.category,
                this.sentiment,
                this.resolvedByMaven);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> userRequest = Optional.empty();

        private Optional<String> agentResponse = Optional.empty();

        private Optional<String> resolutionStatus = Optional.empty();

        private Optional<String> category = Optional.empty();

        private Optional<Sentiment> sentiment = Optional.empty();

        private Optional<Boolean> resolvedByMaven = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ConversationAnalysis other) {
            userRequest(other.getUserRequest());
            agentResponse(other.getAgentResponse());
            resolutionStatus(other.getResolutionStatus());
            category(other.getCategory());
            sentiment(other.getSentiment());
            resolvedByMaven(other.getResolvedByMaven());
            return this;
        }

        @JsonSetter(value = "userRequest", nulls = Nulls.SKIP)
        public Builder userRequest(Optional<String> userRequest) {
            this.userRequest = userRequest;
            return this;
        }

        public Builder userRequest(String userRequest) {
            this.userRequest = Optional.ofNullable(userRequest);
            return this;
        }

        @JsonSetter(value = "agentResponse", nulls = Nulls.SKIP)
        public Builder agentResponse(Optional<String> agentResponse) {
            this.agentResponse = agentResponse;
            return this;
        }

        public Builder agentResponse(String agentResponse) {
            this.agentResponse = Optional.ofNullable(agentResponse);
            return this;
        }

        @JsonSetter(value = "resolutionStatus", nulls = Nulls.SKIP)
        public Builder resolutionStatus(Optional<String> resolutionStatus) {
            this.resolutionStatus = resolutionStatus;
            return this;
        }

        public Builder resolutionStatus(String resolutionStatus) {
            this.resolutionStatus = Optional.ofNullable(resolutionStatus);
            return this;
        }

        @JsonSetter(value = "category", nulls = Nulls.SKIP)
        public Builder category(Optional<String> category) {
            this.category = category;
            return this;
        }

        public Builder category(String category) {
            this.category = Optional.ofNullable(category);
            return this;
        }

        @JsonSetter(value = "sentiment", nulls = Nulls.SKIP)
        public Builder sentiment(Optional<Sentiment> sentiment) {
            this.sentiment = sentiment;
            return this;
        }

        public Builder sentiment(Sentiment sentiment) {
            this.sentiment = Optional.ofNullable(sentiment);
            return this;
        }

        @JsonSetter(value = "resolvedByMaven", nulls = Nulls.SKIP)
        public Builder resolvedByMaven(Optional<Boolean> resolvedByMaven) {
            this.resolvedByMaven = resolvedByMaven;
            return this;
        }

        public Builder resolvedByMaven(Boolean resolvedByMaven) {
            this.resolvedByMaven = Optional.ofNullable(resolvedByMaven);
            return this;
        }

        public ConversationAnalysis build() {
            return new ConversationAnalysis(
                    userRequest,
                    agentResponse,
                    resolutionStatus,
                    category,
                    sentiment,
                    resolvedByMaven,
                    additionalProperties);
        }
    }
}
