/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.realtime.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class SubscribeEvent {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private SubscribeEvent(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static SubscribeEvent audio(AudioSubscribeEvent value) {
        return new SubscribeEvent(new AudioValue(value));
    }

    public static SubscribeEvent controlSessionStart(ControlEvent value) {
        return new SubscribeEvent(new ControlSessionStartValue(value));
    }

    public static SubscribeEvent controlSessionStop(ControlEvent value) {
        return new SubscribeEvent(new ControlSessionStopValue(value));
    }

    public static SubscribeEvent controlAudioDone(ControlEvent value) {
        return new SubscribeEvent(new ControlAudioDoneValue(value));
    }

    public static SubscribeEvent controlSessionUpdated(ControlEvent value) {
        return new SubscribeEvent(new ControlSessionUpdatedValue(value));
    }

    public boolean isAudio() {
        return value instanceof AudioValue;
    }

    public boolean isControlSessionStart() {
        return value instanceof ControlSessionStartValue;
    }

    public boolean isControlSessionStop() {
        return value instanceof ControlSessionStopValue;
    }

    public boolean isControlAudioDone() {
        return value instanceof ControlAudioDoneValue;
    }

    public boolean isControlSessionUpdated() {
        return value instanceof ControlSessionUpdatedValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<AudioSubscribeEvent> getAudio() {
        if (isAudio()) {
            return Optional.of(((AudioValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ControlEvent> getControlSessionStart() {
        if (isControlSessionStart()) {
            return Optional.of(((ControlSessionStartValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ControlEvent> getControlSessionStop() {
        if (isControlSessionStop()) {
            return Optional.of(((ControlSessionStopValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ControlEvent> getControlAudioDone() {
        if (isControlAudioDone()) {
            return Optional.of(((ControlAudioDoneValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ControlEvent> getControlSessionUpdated() {
        if (isControlSessionUpdated()) {
            return Optional.of(((ControlSessionUpdatedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitAudio(AudioSubscribeEvent audio);

        T visitControlSessionStart(ControlEvent controlSessionStart);

        T visitControlSessionStop(ControlEvent controlSessionStop);

        T visitControlAudioDone(ControlEvent controlAudioDone);

        T visitControlSessionUpdated(ControlEvent controlSessionUpdated);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(
            use = JsonTypeInfo.Id.NAME,
            property = "messageType",
            visible = true,
            defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(AudioValue.class),
        @JsonSubTypes.Type(ControlSessionStartValue.class),
        @JsonSubTypes.Type(ControlSessionStopValue.class),
        @JsonSubTypes.Type(ControlAudioDoneValue.class),
        @JsonSubTypes.Type(ControlSessionUpdatedValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("audio")
    private static final class AudioValue implements Value {
        @JsonUnwrapped
        private AudioSubscribeEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private AudioValue() {}

        private AudioValue(AudioSubscribeEvent value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitAudio(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof AudioValue && equalTo((AudioValue) other);
        }

        private boolean equalTo(AudioValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "SubscribeEvent{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("controlSessionStart")
    private static final class ControlSessionStartValue implements Value {
        @JsonUnwrapped
        private ControlEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ControlSessionStartValue() {}

        private ControlSessionStartValue(ControlEvent value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitControlSessionStart(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ControlSessionStartValue && equalTo((ControlSessionStartValue) other);
        }

        private boolean equalTo(ControlSessionStartValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "SubscribeEvent{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("controlSessionStop")
    private static final class ControlSessionStopValue implements Value {
        @JsonUnwrapped
        private ControlEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ControlSessionStopValue() {}

        private ControlSessionStopValue(ControlEvent value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitControlSessionStop(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ControlSessionStopValue && equalTo((ControlSessionStopValue) other);
        }

        private boolean equalTo(ControlSessionStopValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "SubscribeEvent{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("controlAudioDone")
    private static final class ControlAudioDoneValue implements Value {
        @JsonUnwrapped
        private ControlEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ControlAudioDoneValue() {}

        private ControlAudioDoneValue(ControlEvent value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitControlAudioDone(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ControlAudioDoneValue && equalTo((ControlAudioDoneValue) other);
        }

        private boolean equalTo(ControlAudioDoneValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "SubscribeEvent{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("controlSessionUpdated")
    private static final class ControlSessionUpdatedValue implements Value {
        @JsonUnwrapped
        private ControlEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ControlSessionUpdatedValue() {}

        private ControlSessionUpdatedValue(ControlEvent value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitControlSessionUpdated(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ControlSessionUpdatedValue && equalTo((ControlSessionUpdatedValue) other);
        }

        private boolean equalTo(ControlSessionUpdatedValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "SubscribeEvent{" + "value: " + value + "}";
        }
    }

    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "SubscribeEvent{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
