/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.events.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import com.mavenagi.api.resources.commons.types.EntityId;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EventBaseNoId.Builder.class)
public final class EventBaseNoId implements IEventBaseNoId {
    private final Optional<OffsetDateTime> timestamp;

    private final Optional<Set<EntityId>> references;

    private final Optional<SourceInfo> sourceInfo;

    private final Optional<SessionInfo> sessionInfo;

    private final Optional<ContextInfo> contextInfo;

    private final Map<String, Object> additionalProperties;

    private EventBaseNoId(
            Optional<OffsetDateTime> timestamp,
            Optional<Set<EntityId>> references,
            Optional<SourceInfo> sourceInfo,
            Optional<SessionInfo> sessionInfo,
            Optional<ContextInfo> contextInfo,
            Map<String, Object> additionalProperties) {
        this.timestamp = timestamp;
        this.references = references;
        this.sourceInfo = sourceInfo;
        this.sessionInfo = sessionInfo;
        this.contextInfo = contextInfo;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("timestamp")
    @java.lang.Override
    public Optional<OffsetDateTime> getTimestamp() {
        return timestamp;
    }

    @JsonProperty("references")
    @java.lang.Override
    public Optional<Set<EntityId>> getReferences() {
        return references;
    }

    @JsonProperty("sourceInfo")
    @java.lang.Override
    public Optional<SourceInfo> getSourceInfo() {
        return sourceInfo;
    }

    @JsonProperty("sessionInfo")
    @java.lang.Override
    public Optional<SessionInfo> getSessionInfo() {
        return sessionInfo;
    }

    @JsonProperty("contextInfo")
    @java.lang.Override
    public Optional<ContextInfo> getContextInfo() {
        return contextInfo;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EventBaseNoId && equalTo((EventBaseNoId) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EventBaseNoId other) {
        return timestamp.equals(other.timestamp)
                && references.equals(other.references)
                && sourceInfo.equals(other.sourceInfo)
                && sessionInfo.equals(other.sessionInfo)
                && contextInfo.equals(other.contextInfo);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.timestamp, this.references, this.sourceInfo, this.sessionInfo, this.contextInfo);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<OffsetDateTime> timestamp = Optional.empty();

        private Optional<Set<EntityId>> references = Optional.empty();

        private Optional<SourceInfo> sourceInfo = Optional.empty();

        private Optional<SessionInfo> sessionInfo = Optional.empty();

        private Optional<ContextInfo> contextInfo = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(EventBaseNoId other) {
            timestamp(other.getTimestamp());
            references(other.getReferences());
            sourceInfo(other.getSourceInfo());
            sessionInfo(other.getSessionInfo());
            contextInfo(other.getContextInfo());
            return this;
        }

        @JsonSetter(value = "timestamp", nulls = Nulls.SKIP)
        public Builder timestamp(Optional<OffsetDateTime> timestamp) {
            this.timestamp = timestamp;
            return this;
        }

        public Builder timestamp(OffsetDateTime timestamp) {
            this.timestamp = Optional.ofNullable(timestamp);
            return this;
        }

        @JsonSetter(value = "references", nulls = Nulls.SKIP)
        public Builder references(Optional<Set<EntityId>> references) {
            this.references = references;
            return this;
        }

        public Builder references(Set<EntityId> references) {
            this.references = Optional.ofNullable(references);
            return this;
        }

        @JsonSetter(value = "sourceInfo", nulls = Nulls.SKIP)
        public Builder sourceInfo(Optional<SourceInfo> sourceInfo) {
            this.sourceInfo = sourceInfo;
            return this;
        }

        public Builder sourceInfo(SourceInfo sourceInfo) {
            this.sourceInfo = Optional.ofNullable(sourceInfo);
            return this;
        }

        @JsonSetter(value = "sessionInfo", nulls = Nulls.SKIP)
        public Builder sessionInfo(Optional<SessionInfo> sessionInfo) {
            this.sessionInfo = sessionInfo;
            return this;
        }

        public Builder sessionInfo(SessionInfo sessionInfo) {
            this.sessionInfo = Optional.ofNullable(sessionInfo);
            return this;
        }

        @JsonSetter(value = "contextInfo", nulls = Nulls.SKIP)
        public Builder contextInfo(Optional<ContextInfo> contextInfo) {
            this.contextInfo = contextInfo;
            return this;
        }

        public Builder contextInfo(ContextInfo contextInfo) {
            this.contextInfo = Optional.ofNullable(contextInfo);
            return this;
        }

        public EventBaseNoId build() {
            return new EventBaseNoId(timestamp, references, sourceInfo, sessionInfo, contextInfo, additionalProperties);
        }
    }
}
