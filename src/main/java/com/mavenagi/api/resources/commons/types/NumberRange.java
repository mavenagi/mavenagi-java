/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mavenagi.api.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mavenagi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = NumberRange.Builder.class)
public final class NumberRange {
    private final Optional<Integer> greaterThanOrEqual;

    private final Optional<Integer> lessThan;

    private final Map<String, Object> additionalProperties;

    private NumberRange(
            Optional<Integer> greaterThanOrEqual,
            Optional<Integer> lessThan,
            Map<String, Object> additionalProperties) {
        this.greaterThanOrEqual = greaterThanOrEqual;
        this.lessThan = lessThan;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("greaterThanOrEqual")
    public Optional<Integer> getGreaterThanOrEqual() {
        return greaterThanOrEqual;
    }

    @JsonProperty("lessThan")
    public Optional<Integer> getLessThan() {
        return lessThan;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NumberRange && equalTo((NumberRange) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NumberRange other) {
        return greaterThanOrEqual.equals(other.greaterThanOrEqual) && lessThan.equals(other.lessThan);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.greaterThanOrEqual, this.lessThan);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> greaterThanOrEqual = Optional.empty();

        private Optional<Integer> lessThan = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(NumberRange other) {
            greaterThanOrEqual(other.getGreaterThanOrEqual());
            lessThan(other.getLessThan());
            return this;
        }

        @JsonSetter(value = "greaterThanOrEqual", nulls = Nulls.SKIP)
        public Builder greaterThanOrEqual(Optional<Integer> greaterThanOrEqual) {
            this.greaterThanOrEqual = greaterThanOrEqual;
            return this;
        }

        public Builder greaterThanOrEqual(Integer greaterThanOrEqual) {
            this.greaterThanOrEqual = Optional.ofNullable(greaterThanOrEqual);
            return this;
        }

        @JsonSetter(value = "lessThan", nulls = Nulls.SKIP)
        public Builder lessThan(Optional<Integer> lessThan) {
            this.lessThan = lessThan;
            return this;
        }

        public Builder lessThan(Integer lessThan) {
            this.lessThan = Optional.ofNullable(lessThan);
            return this;
        }

        public NumberRange build() {
            return new NumberRange(greaterThanOrEqual, lessThan, additionalProperties);
        }
    }
}
